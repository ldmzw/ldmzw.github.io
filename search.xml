<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>日志组件</title>
    <url>/2022/02/28/log-framework/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在应用中，日志是必不可少的，它能帮助我们快速的排查问题。但是在java中，我们时常会看到很多关于日志的包，比如<code>common-logging.jar</code>、<code>log4j-api.jar</code>、<code>slf4j-api.jar</code>、<code>logback-classic.jar</code>、<code>log4j-to-slf4j.jar</code>等等。一堆的jar让我们感觉云里雾里，弄不明白日志框架。本文主要是做一些梳理，从大体上讲解java的日志体系。</p>
<ul>
<li><a href="https://logback.qos.ch/" title="logback 官网">logback 官网</a></li>
<li><a href="https://logging.apache.org/log4j/1.2/" title="log4j 官网">log4j 官网</a></li>
<li><a href="https://logging.apache.org/log4j/2.x/" title="log4j2 官网">log4j2 官网</a></li>
<li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/logging/package-summary.html" title="jul summary">jul summary</a></li>
<li><a href="https://www.slf4j.org/" title="slf4j 官网">slf4j 官网</a></li>
<li><a href="https://commons.apache.org/proper/commons-logging/" title="jcl 官网">jcl 官网</a></li>
</ul>
<p>上面的框架我们可以分为两大类：<code>门面日志框架</code>与<code>记录日志框架</code>。通俗的讲，门面日志框架只负责一些规范与定义，并不负责具体的实现，就好比Mysql的存储引擎规范。而记录日志框架则是具体的实现，就好比实现Mysql存储引擎规范的<code>InnoDB</code>与<code>MyISAM</code>。</p>
<p>系列相关文章：</p>
<ul>
<li><a href="/2022/02/28/log-framework/" title="日志组件">日志组件</a></li>
<li><a href="/2022/03/07/log-logback/" title="日志组件Logback">日志组件Logback</a></li>
<li><a href="/2022/03/14/log-log4j2/" title="日志组件Log4j2">日志组件Log4j2</a></li>
<li><a href="/2022/03/21/log-framework1/" title="日志组件动态日志">日志组件动态日志</a></li>
</ul>
<span id="more"></span>

<h2 id="门面日志框架"><a href="#门面日志框架" class="headerlink" title="门面日志框架"></a>门面日志框架</h2><p>在java中，门面日志框架有<code>JCL(commons logging)</code>与<code>Slf4j(simple logging facade for java)</code>。</p>
<h3 id="JCL（Apache-Commons-Logging）"><a href="#JCL（Apache-Commons-Logging）" class="headerlink" title="JCL（Apache Commons Logging）"></a>JCL（Apache Commons Logging）</h3><p><code>JCL</code>也就是我们常说的<code>Apache Commons Logging</code>。<code>jcl</code>采用了设计模式中的<code>适配器模式</code>，它对外提供统一的接口，然后在适配类中对日志的操作委托给具体的记录日志框架，包括<code>Log4j</code>、<code>JDK1.4</code>以及任何一个实现<code>JDK1.4 logging APIs(JSR-47)</code>。</p>
<p>在JCL中对外有两个统一的接口，分别是<code>Log</code>和<code>LogFactory</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.logging.Log;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.LogFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CLASS</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Log log = LogFactory.getLog(CLASS.class);</span><br><span class="line">    ...</span><br><span class="line">    ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当我们调用<code>LogFactory.getLog(CLASS.class)</code>的时候，最终会通过<code>LogAdapter.createLog(name)</code>来进行<code>Log</code>创建，所有的创建逻辑我们都可以在源码<code>org.apache.commons.logging.LogAdapter</code>中找到。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">log.fatal(Object message);</span><br><span class="line">log.fatal(Object message, Throwable t);</span><br><span class="line">log.error(Object message);</span><br><span class="line">log.error(Object message, Throwable t);</span><br><span class="line">log.warn(Object message);</span><br><span class="line">log.warn(Object message, Throwable t);</span><br><span class="line">log.info(Object message);</span><br><span class="line">log.info(Object message, Throwable t);</span><br><span class="line">log.debug(Object message);</span><br><span class="line">log.debug(Object message, Throwable t);</span><br><span class="line">log.trace(Object message);</span><br><span class="line">log.trace(Object message, Throwable t);</span><br></pre></td></tr></table></figure>

<p>在使用<code>jcl</code>时，我们经常会为引入的jar文件感到迷惑。</p>
<ul>
<li>commons-logging.jar：文件包括了<code>LogFacctory</code>的实现，<code>Log</code>的对<code>Log4j</code>、<code>Avalon logkit</code>、<code>Lumberjack</code>与<code>jul</code>的简单封装，我们可以不再引入其它依赖就能实现日志的打印，同时也包含了两个自己的日志实现<code>SimpleLog</code>与<code>NoOpLog</code>。</li>
<li>commons-logging-api.jar：文件包括了<code>LogFacctory</code>的实现，<code>Log</code>的对<code>jul</code>的简单封装，同时也包含了两个自己的日志实现<code>SimpleLog</code>与<code>NoOpLog</code>。与<code>commons-logging.jar</code>不同的是，使用<code>commons-logging-api.jar</code>时，我们需要再引入其它实现才能打印日志，如<code>log4j</code>、<code>avalon</code>与<code>lumberjack</code>等。</li>
<li>commons-logging-adapters：文件只包含了三方日志的适配器。</li>
</ul>
<h3 id="Slf4j（simple-facade-logging-for-java）"><a href="#Slf4j（simple-facade-logging-for-java）" class="headerlink" title="Slf4j（simple facade logging for java）"></a>Slf4j（simple facade logging for java）</h3><p><code>slf4j</code>是一个简单的门面日志框架，如果我们需要使用<code>slf4j</code>，我们需要引入具体的记录日志依赖，如<code>jul</code>、<code>logback</code>、<code>reload4j</code>等。我们使用<code>slf4j</code>只需要引入<code>slf4j-api.jar</code>即可。</p>
<p>在Slf4j中对外有两个统一的接口，分别是<code>Logger</code>和<code>LoggerFactory</code>。</p>
<p><img src="/2022/02/28/log-framework/001.png" alt="Slf4j 实现" title="Slf4j 实现"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CLASS</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = LoggerFactory.getLog(CLASS.class);</span><br><span class="line">    ...</span><br><span class="line">    ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果我们不引入任何记录日志实现，<code>slf4j</code>将会使用<code>org.slf4j.helpers.NOPLogger</code>，当我们启动应用的时候，会出现如下日志</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SLF4J: Failed to load class &quot;org.slf4j.impl.StaticLoggerBinder&quot;.</span><br><span class="line">SLF4J: Defaulting to no-operation (NOP) logger implementation</span><br><span class="line">SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.</span><br></pre></td></tr></table></figure>

<p>当然，我们可以通过引入记录日志框架来消除上面的警告，slf4j也提供了自己的实现<code>slf4j-simple.jar</code></p>
<h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p><code>log4j</code>在被<code>Apache Software Foundation</code>收入门下之后，由于理念不合，<code>log4j</code>的作者离开了并且随后开发了<code>slf4j</code>与<code>logback</code>。</p>
<p><code>slf4j</code>与<code>jcl</code>最大的区别在于日志的绑定服务。</p>
<p>jcl采用动态绑定机制：</p>
<ol>
<li>在进程启动时尝试获取名为”org.apache.commons.logging.Log”的配置属性（可与在commons-logging.properties文件中配置，或使用Java代码进行配置），按配置选取对应的日志输出服务</li>
<li>如果没有获取到对应配置属性，会尝试在系统参数中寻找名为”org.apache.commons.logging.Log”的参数项</li>
<li>如果1,2均没有获取到，会在classpath下寻找log4j的相关class，如果找到，则使用log4j作为日志输出服务</li>
<li>如果没有找到log4j，则尝试使用java.util.logging包作为日志输出服务</li>
<li>如果上述都失败，则使用SimpleLog作为日志输出服务，即将所有日志输出至控制台标准输出System.err</li>
</ol>
<p>JCL的动态绑定机制基于ClassLoader实现，缺点一是效率较低，二是容易引发混乱，在一个复杂甚至混乱的依赖环境下，确定当前正在生效的日志服务是很费力的，特别是在程序开发和设计人员并不理解JCL的机制时，三是最致命的问题：在使用了自定义ClassLoader的程序中，使用JCL会引发各类问题，例如内存泄露、与OSGI冲突等。</p>
<p>而slf4j则简单得多，采用静态绑定机制：</p>
<ul>
<li>slf4j为各类日志输出服务提供了适配库，如slf4j-log4j12，slf4j-simple，slf4j-jdk14等。一个Java工程下只能引入一个slf4j适配库</li>
<li>slf4j会加载org.slf4j.impl.StaticLoggerBinder作为输出日志的实现类。这个类在每个适配库中都存在，所以slf4j不需要像JCL一样主动去寻找日志输出实现，自然而然地就能与具体的日志输出实现绑定起来</li>
<li>当需要更换日志输出服务时（比如从logback切换回log4j），只需要替换掉适配库即可</li>
</ul>
<p>所以slf4j不仅对比JCL有性能上的优势，使用slf4j的程序员也不需要去翻找配置文件或追踪启动过程就能够清除明白地了解当前使用的是什么日志输出服务。</p>
<blockquote>
<p>内容引用至：<a href="https://www.jianshu.com/p/85d141365d39" title="该让log4j退休了 - 论Java日志组件的选择">该让log4j退休了 - 论Java日志组件的选择</a></p>
</blockquote>
<p>由于<code>jcl</code>的一些存在问题，目前门面日志框架<code>slf4j</code>已经占据了较大的份额，如果是新应用的话，建议使用<code>slf4j</code>。</p>
<h2 id="记录日志框架"><a href="#记录日志框架" class="headerlink" title="记录日志框架"></a>记录日志框架</h2><p>java里面记录日志框架有很多，比如大家耳熟能详的<code>log4j</code>、<code>log4j2</code>、<code>logback</code>等。</p>
<h3 id="log4j"><a href="#log4j" class="headerlink" title="log4j"></a>log4j</h3><p>由于使用<code>log4j</code>的系统太多，经过多年的发展，为了兼容java的低版本，<code>log4j</code>变得越来越难维护。因此，在2015年8月5日，log4j的管理委员会宣布不再维护<code>log4j</code>，<code>log4j</code>也因此迎来了生命的尽头，最后一个版本是<code>1.2.17</code>。管理委员会建议使用<code>log4j</code>的用户切换到<code>log4j2</code>。</p>
<blockquote>
<p>注意：在没有特别说明的情况下，<code>log4j</code>指的是<code>log4j 1.x</code>版本</p>
</blockquote>
<h3 id="log4j2"><a href="#log4j2" class="headerlink" title="log4j2"></a>log4j2</h3><p><code>log4j2</code>从名称上就能看出来是<code>log4j</code>的升级产品，相比于<code>log4j</code>，团队重新设计了<code>log4j2</code>，并且吸取了<code>logback</code>的优点。</p>
<h3 id="logback"><a href="#logback" class="headerlink" title="logback"></a>logback</h3><p><code>logback</code>是一款优秀的日志框架，目前<code>Spring Boot</code>中默认的日志组件就是采用的<code>logback</code>。</p>
<ul>
<li><a href="/2022/03/07/log-logback/" title="日志组件Logback">日志组件Logback</a></li>
</ul>
<h3 id="对比-1"><a href="#对比-1" class="headerlink" title="对比"></a>对比</h3><h4 id="log4j与log4j2"><a href="#log4j与log4j2" class="headerlink" title="log4j与log4j2"></a>log4j与log4j2</h4><ul>
<li>配置文件：<code>log4j</code>采用的是 <code>.properties</code> 的文件作为主配置文件，默认是<code>log4j.properties</code>。而<code>log4j2</code>则是采用了 <code>.xml</code>或者<code>.json</code>来配置，默认为<code>log4j2.xml</code>。</li>
<li>核心jar包：<code>log4j</code>只需要引入<code>log4j.jar</code>即可，<code>log4j2</code>需要引入<code>log4j-core</code>与<code>log4j-api</code>。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>log调用：<code>log4j</code>与<code>log4j2</code>的调用都十分的简单。apache为了区分两者，修改了对应的<code>package</code>。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    org.apache.log4j.Logger log4j = org.apache.log4j.LogManager.getLogger(MTest.class);</span><br><span class="line">    log4j.info(<span class="string">&quot;level is: info&quot;</span>);</span><br><span class="line"></span><br><span class="line">    org.apache.logging.log4j.Logger log4j2 = org.apache.logging.log4j.LogManager.getLogger(MTest.class);</span><br><span class="line">    log4j2.info(<span class="string">&quot;level is: info&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>配置不同：由于<code>.properties</code>文件的可读性较差，<code>log4j2</code>采用了<code>.xml</code>或者<code>.json</code>进行配置，因此两者的配置差别较大。</li>
</ul>
<h4 id="log4j2与logback"><a href="#log4j2与logback" class="headerlink" title="log4j2与logback"></a>log4j2与logback</h4><p>由于<code>log4j</code>已经停止维护，因此目前对比得最多的就是<code>log4j2</code>与<code>logback</code>，两个日志框架都十分的优秀，如果不是深度使用，我们也许感受不到两者的差异。总的来说，<code>log4j2</code>功能更强大，<code>logbakc</code>使用更简单。其中有一个比较有意思的点是<code>logback</code>的根<code>logger</code>名称为<code>ROOT</code>，而<code>log4j2</code>的根<code>logger</code>名称为空<code>&quot;&quot;</code>。</p>
<h2 id="日志转换"><a href="#日志转换" class="headerlink" title="日志转换"></a>日志转换</h2><p>在java开发中，一般日志是配套出现的，也既是一个日志门面与一个日志实现配套使用。由于<code>slf4j</code>未提供日志实现，因此会有很多的桥接jar来匹配具体的日志实现。</p>
<table>
<thead>
<tr>
<th align="center">日志门面</th>
<th align="center">桥接包</th>
<th align="center">日志实现</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">slf4j</td>
<td align="center">logback-classic.jar</td>
<td align="center">logback</td>
<td align="center">slf4j到logback的桥接</td>
</tr>
<tr>
<td align="center">slf4j</td>
<td align="center">slf4j-jdk14.jar</td>
<td align="center">jul</td>
<td align="center">slf4j到julr桥接</td>
</tr>
<tr>
<td align="center">slf4j</td>
<td align="center">slf4j-jcl.jar</td>
<td align="center">jcl</td>
<td align="center">slf4j到jcl的桥接</td>
</tr>
<tr>
<td align="center">slf4j</td>
<td align="center">slf4j-log4j12.jar</td>
<td align="center">log4j</td>
<td align="center">slf4j到log4j的桥接</td>
</tr>
<tr>
<td align="center">slf4j</td>
<td align="center">slf4j-log4j-impl.jar</td>
<td align="center">log4j2</td>
<td align="center">slf4j到log4j2的桥接</td>
</tr>
</tbody></table>
<p><img src="/2022/02/28/log-framework/003.png" alt="Slf4j adapter" title="Slf4j adapter"></p>
<p>日志的重定向：</p>
<table>
<thead>
<tr>
<th align="center">迁移包</th>
<th align="center">迁移方向</th>
</tr>
</thead>
<tbody><tr>
<td align="center">jul-to-slf4j.jar</td>
<td align="center">jul –&gt; slf4j</td>
</tr>
<tr>
<td align="center">jcl-over-slf4j.jar</td>
<td align="center">jcl –&gt; slf4j</td>
</tr>
<tr>
<td align="center">log4j-over-slf4j.jar</td>
<td align="center">log4j –&gt; slf4j</td>
</tr>
<tr>
<td align="center">log4j-to-slf4j.jar</td>
<td align="center">log4j2 –&gt; slf4j</td>
</tr>
<tr>
<td align="center">log4j-jul.jar</td>
<td align="center">jul –&gt; log4j2</td>
</tr>
<tr>
<td align="center">log4j-jcl.jar</td>
<td align="center">jcl –&gt; log4j2</td>
</tr>
<tr>
<td align="center">log4j-1.2-api.jar</td>
<td align="center">log4j –&gt; log4j2</td>
</tr>
</tbody></table>
<p>举例说明：</p>
<p>如果我们原来应用中是使用的<code>log4j</code>，现在我们需要转换成<code>logback</code>，那么我们首先需要引入<code>log4j-over-slf4j.jar</code>将<code>log4j</code>转换成<code>slf4j</code>，然后再引入<code>logback-classic.jar</code>将<code>slf4j</code>转换成<code>logback</code>。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>java的日志框架随着<code>slf4j</code>的出现而结束了长期的混乱局面。然而在记录日志框架的选型上，<code>logback</code>与<code>log4j2</code>都有自己的优点。目前比较常使用的为<code>slf4j+logback</code>、<code>log4j2</code>、<code>slf4j+log4j2</code>。</p>
<p>参考文章：</p>
<ul>
<li><a href="/2022/03/07/log-logback/" title="日志组件Logback">日志组件Logback</a></li>
<li><a href="/2022/03/14/log-log4j2/" title="日志组件Log4j2">日志组件Log4j2</a></li>
<li><a href="https://www.jianshu.com/p/85d141365d39" title="该让log4j退休了 - 论Java日志组件">该让log4j退休了 - 论Java日志组件的选择</a></li>
</ul>
]]></content>
      <categories>
        <category>java</category>
        <category>日志组件</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>日志组件</tag>
        <tag>Logback</tag>
        <tag>Log4j</tag>
        <tag>Log4j2</tag>
        <tag>JUL(java util logging)</tag>
        <tag>JCL(commons logging)</tag>
        <tag>Slf4j(simple logging facade for java)</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis Generator</title>
    <url>/2022/01/08/mybatis-generator/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在日常开发中，<code>MyBatis</code>因其轻量化而被我们所广泛使用。但是有时候，大量的重复操作与数据库实体编写让我们感到十分的枯燥与繁琐，为了减少这些繁琐的工作，<code>MyBatis Generator</code>应运而生。</p>
<ul>
<li><a href="http://mybatis.org/generator/" title="MyBatis Generator官网">MyBatis Generator官网</a></li>
<li><a href="https://mybatis.org/mybatis-3/zh/index.html" title="MyBatis 官网">MyBatis 官网</a></li>
</ul>
<span id="more"></span>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>从<code>MyBatis Generator</code>官网上可以看到，我们有五种方式来使用<code>MyBatis Generator</code>。</p>
<ul>
<li><a href="http://mybatis.org/generator/running/runningFromCmdLine.html" title="From the Command Line">From the Command Line</a></li>
<li><a href="http://mybatis.org/generator/running/runningWithAnt.html" title="With Ant">With Ant</a></li>
<li><a href="http://mybatis.org/generator/running/runningWithMaven.html" title="With Maven">With Maven</a></li>
<li><a href="http://mybatis.org/generator/running/runningWithJava.html" title="With Java">With Java</a></li>
<li><a href="http://mybatis.org/generator/running/runningWithEclipse.html" title="In Eclipse">In Eclipse</a></li>
</ul>
<p>但是在日常开发中，我们用得最多的应该是<code>From the Command Line</code>和<code>With Maven</code>方式来使用<code>MyBatis Generator</code>。第一种是直接通过命令行的方式来运行，这种方式简单，不依赖项目；第二种是通过集成到<code>maven</code>项目中通过<code>maven</code>的<code>plugin</code>来实现。本文主要记录这两种方式的使用，其它的使用方式可以直接从官网上面找到示例。</p>
<h3 id="命令行方式使用"><a href="#命令行方式使用" class="headerlink" title="命令行方式使用"></a>命令行方式使用</h3><h4 id="下载jar包"><a href="#下载jar包" class="headerlink" title="下载jar包"></a>下载jar包</h4><p>下载地址: <a href="https://github.com/mybatis/generator/releases" title="mybatis-generator-core">mybatis-generator-core</a></p>
<p><img src="/2022/01/08/mybatis-generator/001.png" alt="mybatis-generator-core" title="mybatis-generator-core"></p>
<h4 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;default&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://127.0.0.1:13306/test?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8<span class="symbol">&amp;amp;</span>serverTimezone=UTC<span class="symbol">&amp;amp;</span>nullCatalogMeansCurrent=true&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;root@123&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;example.model&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;example.mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/resources&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span> <span class="attr">targetPackage</span>=<span class="string">&quot;example.mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;sys_user&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar mybatis-generator-core-x.x.x.jar -configfile generatorConfig.xml</span><br><span class="line">java -jar mybatis-generator-core-x.x.x.jar -configfile generatorConfig.xml -overwrite</span><br><span class="line">java -cp mybatis-generator-core-x.x.x.jar org.mybatis.generator.api.ShellRunner -configfile generatorConfig.xml</span><br><span class="line">java -cp mybatis-generator-core-x.x.x.jar org.mybatis.generator.api.ShellRunner -configfile generatorConfig.xml -overwrite</span><br><span class="line"></span><br><span class="line">java -cp mybatis-generator-core-x.x.x.jar;mysql-connector-java-x.x.x.jar org.mybatis.generator.api.ShellRunner -configfile generatorConfig.xml -overwrite</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<p>当我们使用不同的数据库的时候，我们需要下载相应数据库的<code>driver</code>，示例中是使用的<code>mysql com.mysql.cj.jdbc.Driver</code>，所以需要下载 <code>mysql-connector-java-x.x.x.jar</code>。</p>
</blockquote>
<p>数据库Driver下载地址：</p>
<ul>
<li>Mysql：<a href="https://downloads.mysql.com/archives/c-j/" title="官网">官网</a>、<a href="https://mvnrepository.com/artifact/mysql/mysql-connector-java/" title="maven repository">maven repository</a></li>
<li>Oracle：<a href="https://www.oracle.com/cn/database/technologies/enterprise-edition/jdbc.html" title="官网">官网</a>、<a href="https://mvnrepository.com/artifact/com.oracle.database.jdbc/ojdbc10/" title="maven repository">maven repository</a></li>
<li>Postgresql：<a href="htthttps://jdbc.postgresql.org/download.htmll" title="官网">官网</a>、<a href="https://mvnrepository.com/artifact/org.postgresql/postgresql/" title="maven repository">maven repository</a></li>
</ul>
<h3 id="Maven方式使用"><a href="#Maven方式使用" class="headerlink" title="Maven方式使用"></a>Maven方式使用</h3><h4 id="增加maven配置"><a href="#增加maven配置" class="headerlink" title="增加maven配置"></a>增加maven配置</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 在控制台打印执行日志 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 重复生成时会覆盖之前的文件--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>src/main/resources/generatorConfig.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="编写配置文件-1"><a href="#编写配置文件-1" class="headerlink" title="编写配置文件"></a>编写配置文件</h4><p>配置文件同上</p>
<h4 id="执行命令-1"><a href="#执行命令-1" class="headerlink" title="执行命令"></a>执行命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn mybatis-generator:generate</span><br><span class="line">mvn mybatis-generator:generate -Dmybatis.generator.overwrite=true</span><br></pre></td></tr></table></figure>

<h2 id="通用配置"><a href="#通用配置" class="headerlink" title="通用配置"></a>通用配置</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;default&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;autoDelimitKeywords&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;beginningDelimiter&quot;</span> <span class="attr">value</span>=<span class="string">&quot;`&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;endingDelimiter&quot;</span> <span class="attr">value</span>=<span class="string">&quot;`&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressAllComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressDate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;addRemarkComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8<span class="symbol">&amp;amp;</span>serverTimezone=UTC<span class="symbol">&amp;amp;</span>nullCatalogMeansCurrent=true&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;root@123&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;forceBigDecimals&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useJSR310Types&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;example.model&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;mappers&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetProject</span>=<span class="string">&quot;src/main/resources&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetPackage</span>=<span class="string">&quot;example.mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- tableName是数据库中的表名，domainObjectName是生成的JAVA模型名，后面的参数不用改，要生成更多的表就在下面继续加table标签 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;sys_user&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;User&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableCountByExample</span>=<span class="string">&quot;true&quot;</span> <span class="attr">enableUpdateByExample</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableDeleteByExample</span>=<span class="string">&quot;true&quot;</span> <span class="attr">enableSelectByExample</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">selectByExampleQueryId</span>=<span class="string">&quot;true&quot;</span> <span class="attr">enableUpdateByPrimaryKey</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableDeleteByPrimaryKey</span>=<span class="string">&quot;true&quot;</span> <span class="attr">enableSelectByPrimaryKey</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">columnOverride</span> <span class="attr">column</span>=<span class="string">&quot;status&quot;</span> <span class="attr">property</span>=<span class="string">&quot;status&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;java.lang.Integer&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p><code>MyBatis Generator</code>还有许多其它的配置，官方文档上给我们做了详细的介绍，同时也给我们引入了大量的示例。不管任何技术，官方网站永远是我们获取资料的第一途径。</p>
]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
        <tag>mybatis generator</tag>
      </tags>
  </entry>
  <entry>
    <title>接口文档Swagger</title>
    <url>/2022/01/15/swagger/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在日常开发中，文档是一项很重要的工作，但是很多时候，也许是由于项目时间太赶，也许是由于业务历史遗留原因，我们往往会疲于去维护文档。<code>swagger</code>可以通过在代码中增加注释，从面生成在线文档。</p>
<ul>
<li><a href="https://swagger.io/" title="swagger 官网">swagger 官网</a></li>
<li><a href="https://swagger.io/tools/swagger-ui/" title="swagger-ui 官网">swagger-ui 官网</a></li>
</ul>
<span id="more"></span>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><code>swagger 3.0.0</code>已经在2020年7月发布，相对于<code>swagger 2.x.x</code>版本，<code>swagger 3.0.0</code>增加了对<code>WebFlux</code>的支持，对于使用<code>WebFlux</code>的项目来说非常友好，并且相对于<code>swagger 2.x.x</code>版本来说，配置改动也很小。</p>
<h3 id="2-x-x版本"><a href="#2-x-x版本" class="headerlink" title="2.x.x版本"></a>2.x.x版本</h3><h4 id="引入pom依赖"><a href="#引入pom依赖" class="headerlink" title="引入pom依赖"></a>引入pom依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="增加配置（可选）"><a href="#增加配置（可选）" class="headerlink" title="增加配置（可选）"></a>增加配置（可选）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 增加配置，以便在生产环境关闭</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;swagger.enable&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean enable;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">&quot;API接口文档&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;接口文档&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;1.0.0&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .enable(enable)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.xxx.controller&quot;</span>)) <span class="comment">//这里写的是API接口所在的包位置</span></span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build()</span><br><span class="line">                .globalOperationParameters(getParameterList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;Parameter&gt; <span class="title">getParameterList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Parameter&gt; pars = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        pars.add(<span class="keyword">new</span> ParameterBuilder()</span><br><span class="line">                .name(<span class="string">&quot;Authorization&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;令牌&quot;</span>)</span><br><span class="line">                .modelRef(<span class="keyword">new</span> ModelRef(<span class="string">&quot;string&quot;</span>))</span><br><span class="line">                .parameterType(<span class="string">&quot;header&quot;</span>)</span><br><span class="line">                .required(<span class="keyword">false</span>).build());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pars;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<p>我们也可以不用增加上面的配置文件，采用<code>swagger</code>默认的配置。</p>
</blockquote>
<h4 id="访问swagger"><a href="#访问swagger" class="headerlink" title="访问swagger"></a>访问swagger</h4><p>我们可以启动项目，然后访问<code>swagger</code>地址，便可以查看到在线的<code>swagger</code>文档。<code>swagger</code>的默认访问地址为<code>sheme://host:port/swagger-ui.html</code>。示例：<a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a></p>
<h3 id="3-0-0版本"><a href="#3-0-0版本" class="headerlink" title="3.0.0版本"></a>3.0.0版本</h3><p>由于<code>WebFlux</code>目前在国内的项目使用中还不是很普遍，所以很多时候大家在使用的时候还是使用的<code>swagger 2.x.x</code>版本，但是也有些项目是基于<code>WebFlux</code>来进行开发的，这时候，我们会发现<code>swagger 2.x.x</code>版本无法处理<code>Mono</code>或者是<code>Flux</code>，好在官方及时的支持了<code>WebFlux</code>。</p>
<h4 id="引入pom依赖-1"><a href="#引入pom依赖-1" class="headerlink" title="引入pom依赖"></a>引入pom依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="增加配置（可选）-1"><a href="#增加配置（可选）-1" class="headerlink" title="增加配置（可选）"></a>增加配置（可选）</h4><p>同<code>swagger 2.x.x</code>一样，这里的配置都是可选的，如果我们未进行任何配置，会使用<code>swagger</code>的默认配置。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 增加配置，以便在生产环境关闭</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;swagger.enable&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean enable;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.OAS_30)</span><br><span class="line">                .enable(enable)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.xxx.controller&quot;</span>)) <span class="comment">//这里写的是API接口所在的包位置</span></span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build()</span><br><span class="line">                .globalRequestParameters(getParameterList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">&quot;API接口文档&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;1.0.0&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;接口文档&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;RequestParameter&gt; <span class="title">getParameterList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;RequestParameter&gt; pars = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        pars.add(<span class="keyword">new</span> RequestParameterBuilder()</span><br><span class="line">                .name(<span class="string">&quot;Authorization&quot;</span>)</span><br><span class="line">                .in(ParameterType.HEADER)</span><br><span class="line">                .description(<span class="string">&quot;令牌&quot;</span>)</span><br><span class="line">                .required(<span class="keyword">false</span>).build());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pars;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们看到配置上与<code>swagger 2.x.x</code>大体相同，只是有一些类进行了替换和一些参数进行了改变。</p>
<h4 id="访问swagger-1"><a href="#访问swagger-1" class="headerlink" title="访问swagger"></a>访问swagger</h4><p>我们可以启动项目，然后访问<code>swagger</code>地址，便可以查看到在线的<code>swagger</code>文档。<code>swagger</code>的默认访问地址为<code>sheme://host:port/swagger-ui/index.html</code>。示例：<a href="http://localhost:8080/swagger-ui/index.html">http://localhost:8080/swagger-ui/index.html</a></p>
<blockquote>
<p>注意：</p>
<p>由于<code>swagger 3.0.0</code>目前使用还较少，网上很多教程都是基于之前的<code>snapshot</code>版本，所以有时候会有一些误导。下面是一些误导：</p>
<ul>
<li>不再使用<code>EnableSwagger2</code>注解，需要使用<code>EnableSwagger2WebFlux</code>或者<code>EnableSwagger2WebMvc</code>。其实从源码中我们可以看出，<code>swagger 3.0.0</code>依旧可以使用<code>EnableSwagger2</code>，而<code>EnableSwagger2WebFlux</code>与<code>EnableSwagger2WebMvc</code>已经被标记为<code>@Deprecated</code>。</li>
</ul>
</blockquote>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>在开发中，<code>swagger</code>给我们带来了很多便利。大家在日常开发中，还是应该维护好接口文档与单元测试，这样不论是新同事入手还是各种交接边调都会十分的便利，省去了很多人力成本。</p>
]]></content>
      <categories>
        <category>java</category>
        <category>接口文档</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>接口文档</tag>
        <tag>swagger</tag>
        <tag>swagger ui</tag>
      </tags>
  </entry>
  <entry>
    <title>密码学BCrypt</title>
    <url>/2022/02/06/bcrypt/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在日常的开发中，我们会经常用到一些加密算法。我们常见的有<code>消息摘要算法</code>（包括<code>MD（Message Digest）算法</code>、<code>SHA（Secure Hash Algorithm）算法</code>、<code>MAC（Message Authentication Code）算法</code>等）、<code>对称加密算法</code>（包括<code>AES算法</code>、<code>DES算法</code>、<code>3DES算法</code>、<code>RC算法</code>等）、<code>非对称加密算法</code>（包括<code>RSA算法</code>、<code>DSA算法</code>、<code>ECC算法</code>等）。本文记录的<code>BCrypt</code>则是属于<code>消息摘要算法</code>，是由<code>Niels Provos</code>和<code>David Mazières</code>设计的密码哈希函数，他是基于<code>Blowfish</code>密码而来的，并于1999年在USENIX上提出。</p>
<p>除了加盐来抵御<code>rainbow table</code>攻击之外，<code>bcrypt</code>的一个非常重要的特征就是自适应性，可以保证加密的速度在一个特定的范围内，即使计算机的运算能力非常高，可以通过增加迭代次数的方式，使得加密速度变慢，从而可以抵御暴力搜索攻击。</p>
<p><code>bcrypt</code>函数是OpenBSD和其他系统包括一些Linux发行版（如SUSE Linux）的默认密码哈希算法。</p>
<ul>
<li><a href="https://man.openbsd.org/bcrypt" title="OpenBSD BCrypt">OpenBSD BCrypt</a></li>
<li><a href="http://www.mindrot.org/projects/jBCrypt/" title="jBCrypt">jBCrypt</a></li>
</ul>
<span id="more"></span>

<h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p><code>BCrypt</code>属于单向哈希，平常我们使用<code>MD</code>进行加密时，对于相同的明文，每次加密后的密文是相同的。为了加大破解难度，<code>BCrypt</code>在加密时引入了盐，同时引入了循环次数<code>log_rounds</code>。</p>
<h3 id="盐实现（Spring-Security-Crypto）"><a href="#盐实现（Spring-Security-Crypto）" class="headerlink" title="盐实现（Spring Security Crypto）"></a>盐实现（Spring Security Crypto）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Generate a salt for use with the BCrypt.hashpw() method</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> prefix the prefix value (default $2a)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> log_rounds the log2 of the number of rounds of hashing to apply - the work</span></span><br><span class="line"><span class="comment"> * factor therefore increases as 2**log_rounds.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> random an instance of SecureRandom to use</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> an encoded salt value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@exception</span> IllegalArgumentException if prefix or log_rounds is invalid</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">gensalt</span><span class="params">(String prefix, <span class="keyword">int</span> log_rounds, SecureRandom random)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">	StringBuilder rs = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">	<span class="keyword">byte</span> rnd[] = <span class="keyword">new</span> <span class="keyword">byte</span>[BCRYPT_SALT_LEN];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!prefix.startsWith(<span class="string">&quot;$2&quot;</span>)</span><br><span class="line">			|| (prefix.charAt(<span class="number">2</span>) != <span class="string">&#x27;a&#x27;</span> &amp;&amp; prefix.charAt(<span class="number">2</span>) != <span class="string">&#x27;y&#x27;</span> &amp;&amp; prefix.charAt(<span class="number">2</span>) != <span class="string">&#x27;b&#x27;</span>)) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Invalid prefix&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (log_rounds &lt; <span class="number">4</span> || log_rounds &gt; <span class="number">31</span>) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Invalid log_rounds&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	random.nextBytes(rnd);</span><br><span class="line"></span><br><span class="line">	rs.append(<span class="string">&quot;$2&quot;</span>);</span><br><span class="line">	rs.append(prefix.charAt(<span class="number">2</span>));</span><br><span class="line">	rs.append(<span class="string">&quot;$&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (log_rounds &lt; <span class="number">10</span>) &#123;</span><br><span class="line">		rs.append(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	rs.append(log_rounds);</span><br><span class="line">	rs.append(<span class="string">&quot;$&quot;</span>);</span><br><span class="line">	encode_base64(rnd, rnd.length, rs);</span><br><span class="line">	<span class="keyword">return</span> rs.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Generate a salt for use with the BCrypt.hashpw() method</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> prefix the prefix value (default $2a)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> log_rounds the log2 of the number of rounds of hashing to apply - the work</span></span><br><span class="line"><span class="comment"> * factor therefore increases as 2**log_rounds.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> an encoded salt value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@exception</span> IllegalArgumentException if prefix or log_rounds is invalid</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">gensalt</span><span class="params">(String prefix, <span class="keyword">int</span> log_rounds)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> gensalt(prefix, log_rounds, <span class="keyword">new</span> SecureRandom());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Generate a salt for use with the BCrypt.hashpw() method</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> log_rounds the log2 of the number of rounds of hashing to apply - the work</span></span><br><span class="line"><span class="comment"> * factor therefore increases as 2**log_rounds.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> random an instance of SecureRandom to use</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> an encoded salt value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@exception</span> IllegalArgumentException if log_rounds is invalid</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">gensalt</span><span class="params">(<span class="keyword">int</span> log_rounds, SecureRandom random)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> gensalt(<span class="string">&quot;$2a&quot;</span>, log_rounds, random);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Generate a salt for use with the BCrypt.hashpw() method</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> log_rounds the log2 of the number of rounds of hashing to apply - the work</span></span><br><span class="line"><span class="comment"> * factor therefore increases as 2**log_rounds.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> an encoded salt value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@exception</span> IllegalArgumentException if log_rounds is invalid</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">gensalt</span><span class="params">(<span class="keyword">int</span> log_rounds)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> gensalt(log_rounds, <span class="keyword">new</span> SecureRandom());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">gensalt</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> gensalt(prefix, GENSALT_DEFAULT_LOG2_ROUNDS);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Generate a salt for use with the BCrypt.hashpw() method, selecting a reasonable</span></span><br><span class="line"><span class="comment"> * default for the number of hashing rounds to apply</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> an encoded salt value</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">gensalt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> gensalt(GENSALT_DEFAULT_LOG2_ROUNDS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>生成的盐如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$2a$10$R7k3LhiSI8QvsOQVw/tvqe</span><br><span class="line">$2a$10$KkQH7VVn1BVeYI70VT825u</span><br><span class="line">$2a$04$UIkeuPkPRLW2LwRBTxFkuO</span><br><span class="line">$2a$05$eS3RERgyjTXHsPhQ3BDonu</span><br><span class="line">$2a$10$EuxCPyaZIWcy39.O3dBbYu</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$2a$	10	$	R7k3LhiSI8QvsOQVw/tvqe</span><br><span class="line">\__/	\/	|	\____________________/</span><br></pre></td></tr></table></figure>
<p>通过源码我们发现，<code>BCrypt</code>生成的盐可以分为4部分有如下规律：</p>
<ul>
<li><code>$2a$</code>：表示<code>BCrypt</code>加密，可能出现的值为<code>$2a$</code>、<code>$2y$</code>、<code>$2b$</code></li>
<li><code>10</code>：循环次数<code>log_rounds</code></li>
<li><code>$</code>：无意义，类似分隔符？</li>
<li><code>R7k3LhiSI8QvsOQVw/tvqe</code>：真正的盐值，在做密码校验的时候会用到。长度为16个Byte，经过涵数<code>encode_base64</code>转换后形成一个长度为22位的字符串</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Table for Base64 encoding </span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> base64_code[] = &#123; <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Z&#x27;</span>, </span><br><span class="line"><span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, </span><br><span class="line"><span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Table for Base64 decoding</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">byte</span> index_64[] = &#123; -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>,</span><br><span class="line">		-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>,</span><br><span class="line">		<span class="number">0</span>, <span class="number">1</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">62</span>, <span class="number">63</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>,</span><br><span class="line">		<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>,</span><br><span class="line">		<span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">encode_base64</span><span class="params">(<span class="keyword">byte</span> d[], <span class="keyword">int</span> len, StringBuilder rs)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> off = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">int</span> c1, c2;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (len &lt;= <span class="number">0</span> || len &gt; d.length) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Invalid len&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">while</span> (off &lt; len) &#123;</span><br><span class="line">           c1 = d[off++] &amp; <span class="number">0xff</span>;</span><br><span class="line">           rs.append(base64_code[(c1 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x3f</span>]);</span><br><span class="line">           c1 = (c1 &amp; <span class="number">0x03</span>) &lt;&lt; <span class="number">4</span>;</span><br><span class="line">           <span class="keyword">if</span> (off &gt;= len) &#123;</span><br><span class="line">               rs.append(base64_code[c1 &amp; <span class="number">0x3f</span>]);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           c2 = d[off++] &amp; <span class="number">0xff</span>;</span><br><span class="line">           c1 |= (c2 &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0f</span>;</span><br><span class="line">           rs.append(base64_code[c1 &amp; <span class="number">0x3f</span>]);</span><br><span class="line">           c1 = (c2 &amp; <span class="number">0x0f</span>) &lt;&lt; <span class="number">2</span>;</span><br><span class="line">           <span class="keyword">if</span> (off &gt;= len) &#123;</span><br><span class="line">               rs.append(base64_code[c1 &amp; <span class="number">0x3f</span>]);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           c2 = d[off++] &amp; <span class="number">0xff</span>;</span><br><span class="line">           c1 |= (c2 &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x03</span>;</span><br><span class="line">           rs.append(base64_code[c1 &amp; <span class="number">0x3f</span>]);</span><br><span class="line">           rs.append(base64_code[c2 &amp; <span class="number">0x3f</span>]);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">byte</span>[] decode_base64(String s, <span class="keyword">int</span> maxolen) <span class="keyword">throws</span> IllegalArgumentException &#123;</span><br><span class="line">       StringBuilder rs = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">       <span class="keyword">int</span> off = <span class="number">0</span>, slen = s.length(), olen = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">byte</span> ret[];</span><br><span class="line">       <span class="keyword">byte</span> c1, c2, c3, c4, o;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (maxolen &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Invalid maxolen&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">while</span> (off &lt; slen - <span class="number">1</span> &amp;&amp; olen &lt; maxolen) &#123;</span><br><span class="line">           c1 = char64(s.charAt(off++));</span><br><span class="line">           c2 = char64(s.charAt(off++));</span><br><span class="line">           <span class="keyword">if</span> (c1 == -<span class="number">1</span> || c2 == -<span class="number">1</span>) &#123;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           o = (<span class="keyword">byte</span>) (c1 &lt;&lt; <span class="number">2</span>);</span><br><span class="line">           o |= (c2 &amp; <span class="number">0x30</span>) &gt;&gt; <span class="number">4</span>;</span><br><span class="line">           rs.append((<span class="keyword">char</span>) o);</span><br><span class="line">           <span class="keyword">if</span> (++olen &gt;= maxolen || off &gt;= slen) &#123;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           c3 = char64(s.charAt(off++));</span><br><span class="line">           <span class="keyword">if</span> (c3 == -<span class="number">1</span>) &#123;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           o = (<span class="keyword">byte</span>) ((c2 &amp; <span class="number">0x0f</span>) &lt;&lt; <span class="number">4</span>);</span><br><span class="line">           o |= (c3 &amp; <span class="number">0x3c</span>) &gt;&gt; <span class="number">2</span>;</span><br><span class="line">           rs.append((<span class="keyword">char</span>) o);</span><br><span class="line">           <span class="keyword">if</span> (++olen &gt;= maxolen || off &gt;= slen) &#123;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           c4 = char64(s.charAt(off++));</span><br><span class="line">           o = (<span class="keyword">byte</span>) ((c3 &amp; <span class="number">0x03</span>) &lt;&lt; <span class="number">6</span>);</span><br><span class="line">           o |= c4;</span><br><span class="line">           rs.append((<span class="keyword">char</span>) o);</span><br><span class="line">           ++olen;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       ret = <span class="keyword">new</span> <span class="keyword">byte</span>[olen];</span><br><span class="line">       <span class="keyword">for</span> (off = <span class="number">0</span>; off &lt; olen; off++) &#123;</span><br><span class="line">           ret[off] = (<span class="keyword">byte</span>) rs.charAt(off);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> ret;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span> <span class="title">char64</span><span class="params">(<span class="keyword">char</span> x)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (x &lt; <span class="number">0</span> || x &gt;= index_64.length) &#123;</span><br><span class="line">           <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> index_64[x];</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h3 id="加密（Spring-Security-Crypto）"><a href="#加密（Spring-Security-Crypto）" class="headerlink" title="加密（Spring Security Crypto）"></a>加密（Spring Security Crypto）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hash a password using the OpenBSD bcrypt scheme</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> passwordb the password to hash, as a byte array</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> salt the salt to hash with (perhaps generated using BCrypt.gensalt)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the hashed password</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">hashpw</span><span class="params">(<span class="keyword">byte</span> passwordb[], String salt)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">byte</span> passwordb[];</span><br><span class="line"></span><br><span class="line">	passwordb = password.getBytes(StandardCharsets.UTF_8);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> hashpw(passwordb, salt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hash a password using the OpenBSD bcrypt scheme</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> passwordb the password to hash, as a byte array</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> salt the salt to hash with (perhaps generated using BCrypt.gensalt)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the hashed password</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">hashpw</span><span class="params">(<span class="keyword">byte</span> passwordb[], String salt)</span> </span>&#123;</span><br><span class="line">	BCrypt B;</span><br><span class="line">	String real_salt;</span><br><span class="line">	<span class="keyword">byte</span> saltb[], hashed[];</span><br><span class="line">	<span class="keyword">char</span> minor = (<span class="keyword">char</span>) <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> rounds, off;</span><br><span class="line">	StringBuilder rs = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (salt == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;salt cannot be null&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> saltLength = salt.length();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (saltLength &lt; <span class="number">28</span>) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Invalid salt&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (salt.charAt(<span class="number">0</span>) != <span class="string">&#x27;$&#x27;</span> || salt.charAt(<span class="number">1</span>) != <span class="string">&#x27;2&#x27;</span>) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Invalid salt version&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (salt.charAt(<span class="number">2</span>) == <span class="string">&#x27;$&#x27;</span>) &#123;</span><br><span class="line">		off = <span class="number">3</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		minor = salt.charAt(<span class="number">2</span>);</span><br><span class="line">		<span class="keyword">if</span> ((minor != <span class="string">&#x27;a&#x27;</span> &amp;&amp; minor != <span class="string">&#x27;x&#x27;</span> &amp;&amp; minor != <span class="string">&#x27;y&#x27;</span> &amp;&amp; minor != <span class="string">&#x27;b&#x27;</span>) || salt.charAt(<span class="number">3</span>) != <span class="string">&#x27;$&#x27;</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Invalid salt revision&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		off = <span class="number">4</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Extract number of rounds</span></span><br><span class="line">	<span class="keyword">if</span> (salt.charAt(off + <span class="number">2</span>) &gt; <span class="string">&#x27;$&#x27;</span>) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Missing salt rounds&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (off == <span class="number">4</span> &amp;&amp; saltLength &lt; <span class="number">29</span>) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Invalid salt&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	rounds = Integer.parseInt(salt.substring(off, off + <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">	real_salt = salt.substring(off + <span class="number">3</span>, off + <span class="number">25</span>);</span><br><span class="line">	saltb = decode_base64(real_salt, BCRYPT_SALT_LEN);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (minor &gt;= <span class="string">&#x27;a&#x27;</span>) &#123;</span><br><span class="line">		passwordb = Arrays.copyOf(passwordb, passwordb.length + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	B = <span class="keyword">new</span> BCrypt();</span><br><span class="line">	hashed = B.crypt_raw(passwordb, saltb, rounds, minor == <span class="string">&#x27;x&#x27;</span>, minor == <span class="string">&#x27;a&#x27;</span> ? <span class="number">0x10000</span> : <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	rs.append(<span class="string">&quot;$2&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (minor &gt;= <span class="string">&#x27;a&#x27;</span>) &#123;</span><br><span class="line">		rs.append(minor);</span><br><span class="line">	&#125;</span><br><span class="line">	rs.append(<span class="string">&quot;$&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (rounds &lt; <span class="number">10</span>) &#123;</span><br><span class="line">		rs.append(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	rs.append(rounds);</span><br><span class="line">	rs.append(<span class="string">&quot;$&quot;</span>);</span><br><span class="line">	encode_base64(saltb, saltb.length, rs);</span><br><span class="line">	encode_base64(hashed, bf_crypt_ciphertext.length * <span class="number">4</span> - <span class="number">1</span>, rs);</span><br><span class="line">	<span class="keyword">return</span> rs.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Perform the central password hashing step in the bcrypt scheme</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> password the password to hash</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> salt the binary salt to hash with the password</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> log_rounds the binary logarithm of the number of rounds of hashing to apply</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sign_ext_bug true to implement the 2x bug</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> safety bit 16 is set when the safety measure is requested</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> an array containing the binary hashed password</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">byte</span>[] crypt_raw(<span class="keyword">byte</span> password[], <span class="keyword">byte</span> salt[], <span class="keyword">int</span> log_rounds, <span class="keyword">boolean</span> sign_ext_bug, <span class="keyword">int</span> safety) &#123;</span><br><span class="line">	<span class="keyword">int</span> rounds, i, j;</span><br><span class="line">	<span class="keyword">int</span> cdata[] = bf_crypt_ciphertext.clone();</span><br><span class="line">	<span class="keyword">int</span> clen = cdata.length;</span><br><span class="line">	<span class="keyword">byte</span> ret[];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (log_rounds &lt; <span class="number">4</span> || log_rounds &gt; <span class="number">31</span>) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Bad number of rounds&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	rounds = <span class="number">1</span> &lt;&lt; log_rounds;</span><br><span class="line">	<span class="keyword">if</span> (salt.length != BCRYPT_SALT_LEN) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Bad salt length&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	init_key();</span><br><span class="line">	ekskey(salt, password, sign_ext_bug, safety);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; rounds; i++) &#123;</span><br><span class="line">		key(password, sign_ext_bug, safety);</span><br><span class="line">		key(salt, <span class="keyword">false</span>, safety);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; (clen &gt;&gt; <span class="number">1</span>); j++) &#123;</span><br><span class="line">			encipher(cdata, j &lt;&lt; <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ret = <span class="keyword">new</span> <span class="keyword">byte</span>[clen * <span class="number">4</span>];</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; clen; i++) &#123;</span><br><span class="line">		ret[j++] = (<span class="keyword">byte</span>) ((cdata[i] &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">		ret[j++] = (<span class="keyword">byte</span>) ((cdata[i] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">		ret[j++] = (<span class="keyword">byte</span>) ((cdata[i] &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">		ret[j++] = (<span class="keyword">byte</span>) (cdata[i] &amp; <span class="number">0xff</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从上面的加密方法中，我们可以看出会从传入的<code>salt</code>中取出原始真正的<code>salt</code>，然后会调用<code>crypt_raw</code>进行真正的加密。我们可以看到，最后加密出来的字符串包含五部分，前面四部分就是盐，第五部分则表示真正的Hash值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$2a$10$R7k3LhiSI8QvsOQVw/tvqe4.JWPuEKQ0J0lSTC1KqXtXcrG19DQS6</span><br><span class="line">$2a$	10	$	R7k3LhiSI8QvsOQVw/tvqe	4.JWPuEKQ0J0lSTC1KqXtXcrG19DQS6</span><br><span class="line">\__/	\/	|	\____________________/	\_____________________________/</span><br></pre></td></tr></table></figure>

<h3 id="解密（Spring-Security-Crypto）"><a href="#解密（Spring-Security-Crypto）" class="headerlink" title="解密（Spring Security Crypto）"></a>解密（Spring Security Crypto）</h3><p>相对上面的加密，解密则变得简单许多，只需要对传入的明文进行加密后再与密文进行比对即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Check that a plaintext password matches a previously hashed one</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> plaintext the plaintext password to verify</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hashed the previously-hashed password</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> true if the passwords match, false otherwise</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkpw</span><span class="params">(String plaintext, String hashed)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> equalsNoEarlyReturn(hashed, hashpw(plaintext, hashed));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Check that a password (as a byte array) matches a previously hashed one</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> passwordb the password to verify, as a byte array</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hashed the previously-hashed password</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> true if the passwords match, false otherwise</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 5.3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkpw</span><span class="params">(<span class="keyword">byte</span>[] passwordb, String hashed)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> equalsNoEarlyReturn(hashed, hashpw(passwordb, hashed));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">equalsNoEarlyReturn</span><span class="params">(String a, String b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> MessageDigest.isEqual(a.getBytes(StandardCharsets.UTF_8), b.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>从源码中我们可以发现，传入的<code>hashed</code>参数中其实已经包含了加密时所需要的盐，所以我们可以直接将密文当作盐传入进行再次加密。</p>
<h2 id="Hash历史"><a href="#Hash历史" class="headerlink" title="Hash历史"></a>Hash历史</h2><p>引用 <a href="https://www.cnblogs.com/flydean/p/15292400.html" title="密码学系列之:bcrypt加密算法详解">密码学系列之:bcrypt加密算法详解</a></p>
<blockquote>
<p>这种hash格式是遵循的是<code>OpenBSD</code>密码文件中存储密码时使用的<code>Modular Crypt Format</code>格式。最开始的时候格式定义是下面的：</p>
<ul>
<li><p>$1$：MD5-based crypt (‘md5crypt’)</p>
</li>
<li><p>$2$：Blowfish-based crypt (‘bcrypt’)</p>
</li>
<li><p>$sha1$：SHA-1-based crypt (‘sha1crypt’)</p>
</li>
<li><p>$5$：SHA-256-based crypt (‘sha256crypt’)</p>
</li>
<li><p>$6$：SHA-512-based crypt (‘sha512crypt’)<br>但是最初的规范没有定义如何处理非ASCII字符，也没有定义如何处理null终止符。修订后的规范规定，在hash字符串时：</p>
</li>
<li><p>String 必须是UTF-8编码</p>
</li>
<li><p>必须包含null终止符<br>因为包含了这些改动，所以<code>bcrypt</code>的版本号被修改成了<code>$2a$</code>。</p>
</li>
</ul>
<p>但是在2011年6月，因为PHP对bcypt的实现<code>crypt_blowfish</code>中的一个bug，他们建议系统管理员更新他们现有的密码数据库，用<code>$2x$</code>代替<code>$2a$</code>，以表明这些哈希值是坏的（需要使用旧的算法）。他们还建议让<code>crypt_blowfish</code>对新算法生成的哈希值使用头<code>$2y$</code>。当然这个改动只限于PHP的<code>crypt_blowfish</code>。</p>
<p>然后在2014年2月，在OpenBSD的bcrypt实现中也发现了一个bug，他们将字符串的长度存储在无符号char中（即8位Byte）。如果密码的长度超过255个字符，就会溢出来。</p>
<p>因为bcrypt是为OpenBSD创建的。所以当他们的库中出现了一个bug时, 他们决定将版本号升级到<code>$2b$</code>。</p>
</blockquote>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p><code>BCrypt</code>已经被广泛使用，相对于<code>MD5</code>，它的碰撞难度变大了。在Spring Security中，已经默认使用<code>BCryptPasswordEncoder</code>作为<code>PasswordEncoder</code>。</p>
<p><a href="/2022/02/06/bcrypt/BCrypt.java" title="BCrypt.java">BCrypt.java</a></p>
]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>密码学</tag>
        <tag>散列算法</tag>
        <tag>BCrypt</tag>
      </tags>
  </entry>
  <entry>
    <title>日志组件动态日志</title>
    <url>/2022/03/21/log-framework1/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>日志对于一个系统来说十分的重要，在前面的几篇文章中，我们介绍了java语言的日志框架关系以及<code>logback</code>与<code>log4j2</code>两个优秀的框架。虽然日志十分重要，但这也是一把双刃剑，如果使用不当，大量的日志输出将导致我们的磁盘使用率以及IO迅速提升，从而可能导致系统崩溃。所以日志等级的配置在实际使用中十分的重要，在开发环境，我们可以打印<code>debug</code>等级日志方便我们排查问题，但是在生产上，我们很多时候都会配置<code>info</code>甚至更高的等级，这样可以节省部分磁盘或者IO。但是当我们生产上出现问题时，我们需要快速的切换日志等级来排查问题，这时候我们希望不是通过停止服务然后修改配置文件再重启服务这样的操作来实现，我们能在不重启服务的情况下来动态的修改日志等级吗？答案是肯定的。这篇文章我们主要介绍一下各个日志框架的使用，重点梳理一下在不重启应用的情况下如何来实现日志等级的动态改变。</p>
<p>系列相关文章：</p>
<ul>
<li><a href="/2022/02/28/log-framework/" title="日志组件">日志组件</a></li>
<li><a href="/2022/03/07/log-logback/" title="日志组件Logback">日志组件Logback</a></li>
<li><a href="/2022/03/14/log-log4j2/" title="日志组件Log4j2">日志组件Log4j2</a></li>
<li><a href="/2022/03/21/log-framework1/" title="日志组件动态日志">日志组件动态日志</a></li>
</ul>
<span id="more"></span>

<h2 id="日志框架使用"><a href="#日志框架使用" class="headerlink" title="日志框架使用"></a>日志框架使用</h2><h3 id="JUL-java-util-logging"><a href="#JUL-java-util-logging" class="headerlink" title="JUL(java util logging)"></a>JUL(java util logging)</h3><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><p><code>jul</code>由jdk提供，不需要额外引入其它依赖就能使用。</p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p><code>jul</code>日志比较简单，我们可以在<code>java.util.logging.Level</code>查看全部支持的等级。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    java.util.logging.Logger log = java.util.logging.Logger.getLogger(MTest.class.getName());</span><br><span class="line">    log.info(<span class="string">&quot;level is: info&quot;</span>);</span><br><span class="line">    log.log(java.util.logging.Level.ALL, <span class="string">&quot;level is: all&quot;</span>);</span><br><span class="line">    log.log(java.util.logging.Level.FINE, <span class="string">&quot;level is: FINE&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Log4j"><a href="#Log4j" class="headerlink" title="Log4j"></a>Log4j</h3><h4 id="引入依赖-1"><a href="#引入依赖-1" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    org.apache.log4j.Logger log4j = org.apache.log4j.LogManager.getLogger(MTest.class);</span><br><span class="line">    log4j.info(<span class="string">&quot;level is: info&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Log4j2"><a href="#Log4j2" class="headerlink" title="Log4j2"></a>Log4j2</h3><h4 id="引入依赖-2"><a href="#引入依赖-2" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    org.apache.logging.log4j.Logger log4j2 = org.apache.logging.log4j.LogManager.getLogger(MTest.class);</span><br><span class="line">    log4j2.info(<span class="string">&quot;level is: info&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Logback"><a href="#Logback" class="headerlink" title="Logback"></a>Logback</h3><h4 id="引入依赖-3"><a href="#引入依赖-3" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="使用-3"><a href="#使用-3" class="headerlink" title="使用"></a>使用</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(MTest.class);</span><br><span class="line">    log.trace(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;trace&quot;</span>);</span><br><span class="line">    log.debug(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;debug&quot;</span>);</span><br><span class="line">    log.info(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;info&quot;</span>);</span><br><span class="line">    log.warn(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;warn&quot;</span>);</span><br><span class="line">    log.error(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="日志等级动态切换"><a href="#日志等级动态切换" class="headerlink" title="日志等级动态切换"></a>日志等级动态切换</h2><h3 id="Log4j2-1"><a href="#Log4j2-1" class="headerlink" title="Log4j2"></a>Log4j2</h3><p>在<code>log4j2</code>中，<code>Logger</code>与<code>LoggerConfig</code>是两个不同的概念，不同的几个<code>Logger</code>可能使用的是同一个<code>LoggerConfig</code>。我们在<code>log4j2.xml</code>中配置的信息会解析成<code>LoggerConfig</code>。比如我们配置了<code>com.ldmzw.demo.log4j2</code>这个<code>LoggerConfig</code>为<code>debug</code>，那么初始化时，<code>com.ldmzw.demo.log4j2</code>包以及包下所有类中<code>Logger</code>都会引用<code>com.ldmzw.demo.log4j2</code>这个<code>LoggerConfig</code>，并且它们的等级都会从<code>LoggerConfig</code>中获取并设置为<code>LoggerConfig</code>的等级<code>debug</code>。因此，我们要想在运行时改变日志的等，那么就有两种方式：</p>
<ul>
<li>改变<code>Logger</code>的等级</li>
<li>改变<code>LoggerConfig</code>的等级</li>
</ul>
<p>前置条件：</p>
<ul>
<li>Mtest：com.ldmzw.demo.log4j2.test.MTest</li>
<li>log4j2.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">&quot;WARN&quot;</span> <span class="attr">monitorInterval</span>=<span class="string">&quot;30&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    。。。省略。。。</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">&quot;com.ldmzw.demo.log4j2&quot;</span> <span class="attr">level</span>=<span class="string">&quot;trace&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;DEBUG_FILE&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;INFO_FILE&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;WARN_FILE&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;ERROR_FILE&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="改变Logger等级"><a href="#改变Logger等级" class="headerlink" title="改变Logger等级"></a>改变Logger等级</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// com.ldmzw.demo.log4j2.test.MTest</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    org.apache.logging.log4j.Logger log = org.apache.logging.log4j.LogManager.getLogger(MTest.class);</span><br><span class="line">    log.trace(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;trace&quot;</span>);</span><br><span class="line">    log.debug(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;debug&quot;</span>);</span><br><span class="line">    log.info(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;info&quot;</span>);</span><br><span class="line">    log.warn(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;warn&quot;</span>);</span><br><span class="line">    log.error(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;error&quot;</span>);</span><br><span class="line"></span><br><span class="line">    org.apache.logging.log4j.core.LoggerContext context = (org.apache.logging.log4j.core.LoggerContext) LogManager.getContext(<span class="keyword">false</span>);</span><br><span class="line">    <span class="comment">// 注意：这里获取`Logger`的时候需要传入日志的名称，与创建日志的名称一致</span></span><br><span class="line">    org.apache.logging.log4j.core.Logger logger = (org.apache.logging.log4j.core.Logger) context.getLogger(<span class="string">&quot;com.ldmzw.demo.log4j2.test.MTest&quot;</span>);</span><br><span class="line">    <span class="comment">// 修改等级</span></span><br><span class="line">    logger.setLevel(Level.WARN);</span><br><span class="line"></span><br><span class="line">    log.trace(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;trace&quot;</span>);</span><br><span class="line">    log.debug(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;debug&quot;</span>);</span><br><span class="line">    log.info(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;info&quot;</span>);</span><br><span class="line">    log.warn(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;warn&quot;</span>);</span><br><span class="line">    log.error(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;error&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改等级</span></span><br><span class="line">    logger.setLevel(Level.DEBUG);</span><br><span class="line"></span><br><span class="line">    log.trace(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;trace&quot;</span>);</span><br><span class="line">    log.debug(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;debug&quot;</span>);</span><br><span class="line">    log.info(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;info&quot;</span>);</span><br><span class="line">    log.warn(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;warn&quot;</span>);</span><br><span class="line">    log.error(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<ul>
<li>获取<code>Logger</code>的时候要与创建<code>Logger</code>的时候使用的是同一个名称，并且只会修改该<code>Logger</code>的等级，不会影响其它的<code>Logger</code>的等级</li>
<li>如果传入的名称没有匹配到相应<code>Logger</code>，框架会创建一个名称为传入名称的<code>Logger</code></li>
</ul>
</blockquote>
<p>关键源代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// org.apache.logging.log4j.core.LoggerContext</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Logger <span class="title">getLogger</span><span class="params">(<span class="keyword">final</span> String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getLogger(name, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Logger <span class="title">getLogger</span><span class="params">(<span class="keyword">final</span> String name, <span class="keyword">final</span> MessageFactory messageFactory)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Note: This is the only method where we add entries to the &#x27;loggerRegistry&#x27; ivar.</span></span><br><span class="line">    Logger logger = loggerRegistry.getLogger(name, messageFactory);</span><br><span class="line">    <span class="keyword">if</span> (logger != <span class="keyword">null</span>) &#123;</span><br><span class="line">        AbstractLogger.checkMessageFactory(logger, messageFactory);</span><br><span class="line">        <span class="keyword">return</span> logger;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    logger = newInstance(<span class="keyword">this</span>, name, messageFactory);</span><br><span class="line">    loggerRegistry.putIfAbsent(name, messageFactory, logger);</span><br><span class="line">    <span class="keyword">return</span> loggerRegistry.getLogger(name, messageFactory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="改变LoggerConfig等级"><a href="#改变LoggerConfig等级" class="headerlink" title="改变LoggerConfig等级"></a>改变LoggerConfig等级</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// com.ldmzw.demo.log4j2.test.MTest</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    log.trace(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;trace&quot;</span>);</span><br><span class="line">    log.debug(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;debug&quot;</span>);</span><br><span class="line">    log.info(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;info&quot;</span>);</span><br><span class="line">    log.warn(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;warn&quot;</span>);</span><br><span class="line">    log.error(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;error&quot;</span>);</span><br><span class="line"></span><br><span class="line">    org.apache.logging.log4j.core.LoggerContext context = (org.apache.logging.log4j.core.LoggerContext) LogManager.getContext(<span class="keyword">false</span>);</span><br><span class="line">    org.apache.logging.log4j.core.config.LoggerConfig loggerConfig = context.getConfiguration().getLoggerConfig(<span class="string">&quot;com.ldmzw.demo.log4j2&quot;</span>);</span><br><span class="line">    <span class="comment">// 修改等级</span></span><br><span class="line">    loggerConfig.setLevel(Level.WARN);</span><br><span class="line">    <span class="comment">// 更新日志</span></span><br><span class="line">    context.updateLoggers();</span><br><span class="line"></span><br><span class="line">    log.trace(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;trace&quot;</span>);</span><br><span class="line">    log.debug(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;debug&quot;</span>);</span><br><span class="line">    log.info(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;info&quot;</span>);</span><br><span class="line">    log.warn(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;warn&quot;</span>);</span><br><span class="line">    log.error(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<ul>
<li><code>context.getConfiguration().getLoggerConfig(&quot;com.ldmzw.demo.log4j2&quot;)</code>中传入的名称是<code>LoggerConfig</code>的名称，与<code>log4j2.xml</code>中配置的需要匹配</li>
<li>如果传入的名称没有匹配到相应<code>LoggerConfig</code>，则会尝试去获取上一级的<code>LoggerConfig</code>，如果最后都没获取到，则会使用<code>root</code>。比如传入的是<code>com.ldmzw.demo.log4j2.test</code>，则最后获取到的是<code>com.ldmzw.demo.log4j2</code>，如果传入的是<code>com.ldmzw.demo</code>，由于我们<code>log4j2.xml</code>中只有<code>com.ldmzw.demo.log4j2</code>与<code>root</code>，所以会一直向上找到<code>root</code></li>
<li>当我们修改了<code>LoggerConfig</code>的等级后，我们一定要调用<code>context.updateLoggers()</code>来更新所有引用了该<code>LoggerConfig</code>的<code>Logger</code>的等级，否则，<code>Logger</code>的等级也不会生效</li>
<li>在我们的用例中，由于创建的<code>Logger</code>为<code>com.ldmzw.demo.log4j2.test.MTest</code>，所以引用的<code>LoggerConfig</code>为<code>com.ldmzw.demo.log4j2</code>，如果我们修改<code>context.getConfiguration().getLoggerConfig(&quot;com.ldmzw.demo.log4j2&quot;)</code>为<code>context.getConfiguration().getLoggerConfig(&quot;com.ldmzw.demo&quot;)</code>，那么上面的用例在等级修改后依旧会打印<code>trace</code>、<code>debug</code>、<code>info</code>的日志。因为修改为<code>context.getConfiguration().getLoggerConfig(&quot;com.ldmzw.demo&quot;)</code>后，获取到的是<code>root LoggerConfig</code>，所以<code>com.ldmzw.demo.log4j2.test.MTest</code>该<code>Logger</code>并不会受影响</li>
</ul>
</blockquote>
<p>关键源代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// org.apache.logging.log4j.core.config.AbstractConfiguration</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> LoggerConfig <span class="title">getLoggerConfig</span><span class="params">(<span class="keyword">final</span> String loggerName)</span> </span>&#123;</span><br><span class="line">    LoggerConfig loggerConfig = loggerConfigs.get(loggerName);</span><br><span class="line">    <span class="keyword">if</span> (loggerConfig != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> loggerConfig;</span><br><span class="line">    &#125;</span><br><span class="line">    String substr = loggerName;</span><br><span class="line">    <span class="keyword">while</span> ((substr = NameUtil.getSubName(substr)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        loggerConfig = loggerConfigs.get(substr);</span><br><span class="line">        <span class="keyword">if</span> (loggerConfig != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> loggerConfig;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Logback-1"><a href="#Logback-1" class="headerlink" title="Logback"></a>Logback</h3><p>相比与<code>log4j2</code>的<code>Logger</code>与<code>LoggerConfig</code>，<code>logback</code>则简单许多，它并没有那么多复杂的概念，只有<code>Logger</code>的概念。所以我们修改等级也只能去修改<code>Logger</code>的等级，但是在<code>logback</code>中，<code>Logger</code>是有继承的概念。而<code>log4j2</code>中的<code>Logger</code>是完全独立的，没有继承的说法，<code>log4j2</code>的继承是通过<code>LoggerConfig</code>去实现的。</p>
<p>前置条件：</p>
<ul>
<li>Mtest：com.ldmzw.demo.logback.test.MTest</li>
<li>logback.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">&quot;true&quot;</span> <span class="attr">scanPeriod</span>=<span class="string">&quot;10 seconds&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    。。。省略。。。</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;root&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;DEBUG_FILE&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;INFO_FILE&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;WARN_FILE&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;ERROR_FILE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.ldmzw.demo.logback&quot;</span> <span class="attr">level</span>=<span class="string">&quot;TRACE&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="切换等级"><a href="#切换等级" class="headerlink" title="切换等级"></a>切换等级</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// com.ldmzw.demo.logback.test.MTest</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(MTest.class);</span><br><span class="line">    log.trace(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;trace&quot;</span>);</span><br><span class="line">    log.debug(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;debug&quot;</span>);</span><br><span class="line">    log.info(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;info&quot;</span>);</span><br><span class="line">    log.warn(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;warn&quot;</span>);</span><br><span class="line">    log.error(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;error&quot;</span>);</span><br><span class="line"></span><br><span class="line">    LoggerContext loggerContext = (ch.qos.logback.classic.LoggerContext) LoggerFactory.getILoggerFactory();</span><br><span class="line">    Logger logger = loggerContext.getLogger(MTest.class);</span><br><span class="line">    <span class="comment">// 修改等级</span></span><br><span class="line">    logger.setLevel(ch.qos.logback.classic.Level.toLevel(<span class="string">&quot;warn&quot;</span>));</span><br><span class="line"></span><br><span class="line">    log.trace(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;trace&quot;</span>);</span><br><span class="line">    log.debug(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;debug&quot;</span>);</span><br><span class="line">    log.info(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;info&quot;</span>);</span><br><span class="line">    log.warn(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;warn&quot;</span>);</span><br><span class="line">    log.error(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<ul>
<li>虽然<code>logback</code>中没有<code>logger</code>与<code>loggerConfig</code>的区别，但是<code>logback</code>的<code>logger</code>中有<code>level</code>与<code>effectiveLevelInt</code>两个属性，<code>level</code>可以为<code>null</code>，当我们没有显示指定<code>level</code>时，它的指就为<code>null</code>，而<code>effectiveLevelInt</code>的值不会为空，当<code>level</code>为空时，<code>effectiveLevelInt</code>会取<code>parent</code>的<code>effectiveLevelInt</code>作为当前<code>logger</code>的<code>effectiveLevelInt</code></li>
<li>设置<code>logger</code>的<code>level</code>有两种方式，一种是在<code>logback.xml</code>中配置，如<code>&lt;logger name=&quot;com.ldmzw.demo.logback&quot; level=&quot;TRACE&quot;/&gt;</code>，第二种是通过代码调用，如<code>logger.setLevel(ch.qos.logback.classic.Level.toLevel(&quot;warn&quot;))</code></li>
<li>当我们显示的去调用<code>logger.setLevel(ch.qos.logback.classic.Level.toLevel(&quot;warn&quot;))</code>时，会触发递归去修改其<code>子logger</code>的<code>effectiveLevelInt</code>，并不会修改其<code>子logger</code>的<code>level</code>属性，并且当其<code>子logger</code>的<code>level</code>属性不为空时，递归调用则会结束</li>
</ul>
</blockquote>
<p>举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// com.ldmzw.demo.logback.test.MTest</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(MTest.class);</span><br><span class="line">    log.trace(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;trace&quot;</span>);</span><br><span class="line">    log.debug(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;debug&quot;</span>);</span><br><span class="line">    log.info(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;info&quot;</span>);</span><br><span class="line">    log.warn(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;warn&quot;</span>);</span><br><span class="line">    log.error(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;error&quot;</span>);</span><br><span class="line"></span><br><span class="line">    LoggerContext loggerContext = (ch.qos.logback.classic.LoggerContext) LoggerFactory.getILoggerFactory();</span><br><span class="line">    Logger logger = loggerContext.getLogger(<span class="string">&quot;com.ldmzw.demo.logback&quot;</span>);</span><br><span class="line">    <span class="comment">// 修改等级</span></span><br><span class="line">    logger.setLevel(ch.qos.logback.classic.Level.toLevel(<span class="string">&quot;warn&quot;</span>));</span><br><span class="line"></span><br><span class="line">    log.trace(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;trace&quot;</span>);</span><br><span class="line">    log.debug(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;debug&quot;</span>);</span><br><span class="line">    log.info(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;info&quot;</span>);</span><br><span class="line">    log.warn(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;warn&quot;</span>);</span><br><span class="line">    log.error(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当我们进行上面调用时，会输出结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2022-03-2 20:55:48.330 [main] [TRACE] [  com.ldmzw.demo.logback.test.MTest.test(MTest.java:16)] level is: trace</span><br><span class="line">2022-03-2 20:55:48.330 [main] [DEBUG] [  com.ldmzw.demo.logback.test.MTest.test(MTest.java:17)] level is: debug</span><br><span class="line">2022-03-2 20:55:48.330 [main] [INFO ] [  com.ldmzw.demo.logback.test.MTest.test(MTest.java:18)] level is: info</span><br><span class="line">2022-03-2 20:55:48.330 [main] [WARN ] [  com.ldmzw.demo.logback.test.MTest.test(MTest.java:19)] level is: warn</span><br><span class="line">2022-03-2 20:55:48.330 [main] [ERROR] [  com.ldmzw.demo.logback.test.MTest.test(MTest.java:20)] level is: error</span><br><span class="line">2022-03-2 20:55:48.330 [main] [WARN ] [  com.ldmzw.demo.logback.test.MTest.test(MTest.java:35)] level is: warn</span><br><span class="line">2022-03-2 20:55:48.330 [main] [ERROR] [  com.ldmzw.demo.logback.test.MTest.test(MTest.java:36)] level is: error</span><br></pre></td></tr></table></figure>

<p>但是当我们测试下面代码时，会发现我们后一次的修改并未改变日志等级，不是我们所期望的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// com.ldmzw.demo.logback.test.MTest</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(MTest.class);</span><br><span class="line">    log.trace(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;trace&quot;</span>);</span><br><span class="line">    log.debug(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;debug&quot;</span>);</span><br><span class="line">    log.info(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;info&quot;</span>);</span><br><span class="line">    log.warn(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;warn&quot;</span>);</span><br><span class="line">    log.error(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;error&quot;</span>);</span><br><span class="line"></span><br><span class="line">    LoggerContext loggerContext = (ch.qos.logback.classic.LoggerContext) LoggerFactory.getILoggerFactory();</span><br><span class="line">    Logger logger1 = loggerContext.getLogger(<span class="string">&quot;com.ldmzw.demo.logback.test&quot;</span>);</span><br><span class="line">    <span class="comment">// 修改等级</span></span><br><span class="line">    logger1.setLevel(ch.qos.logback.classic.Level.toLevel(<span class="string">&quot;warn&quot;</span>));</span><br><span class="line"></span><br><span class="line">    log.trace(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;trace&quot;</span>);</span><br><span class="line">    log.debug(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;debug&quot;</span>);</span><br><span class="line">    log.info(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;info&quot;</span>);</span><br><span class="line">    log.warn(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;warn&quot;</span>);</span><br><span class="line">    log.error(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;error&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Logger logger2 = loggerContext.getLogger(<span class="string">&quot;com.ldmzw.demo.logback&quot;</span>);</span><br><span class="line">    <span class="comment">// 修改等级</span></span><br><span class="line">    logger2.setLevel(ch.qos.logback.classic.Level.toLevel(<span class="string">&quot;info&quot;</span>));</span><br><span class="line"></span><br><span class="line">    log.trace(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;trace&quot;</span>);</span><br><span class="line">    log.debug(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;debug&quot;</span>);</span><br><span class="line">    log.info(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;info&quot;</span>);</span><br><span class="line">    log.warn(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;warn&quot;</span>);</span><br><span class="line">    log.error(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2022-03-21 20:59:43.822 [main] [TRACE] [  com.ldmzw.demo.logback.test.MTest.test(MTest.java:16)] level is: trace</span><br><span class="line">2022-03-21 20:59:43.822 [main] [DEBUG] [  com.ldmzw.demo.logback.test.MTest.test(MTest.java:17)] level is: debug</span><br><span class="line">2022-03-21 20:59:43.822 [main] [INFO ] [  com.ldmzw.demo.logback.test.MTest.test(MTest.java:18)] level is: info</span><br><span class="line">2022-03-21 20:59:43.822 [main] [WARN ] [  com.ldmzw.demo.logback.test.MTest.test(MTest.java:19)] level is: warn</span><br><span class="line">2022-03-21 20:59:43.822 [main] [ERROR] [  com.ldmzw.demo.logback.test.MTest.test(MTest.java:20)] level is: error</span><br><span class="line">2022-03-21 20:59:43.822 [main] [WARN ] [  com.ldmzw.demo.logback.test.MTest.test(MTest.java:35)] level is: warn</span><br><span class="line">2022-03-21 20:59:43.822 [main] [ERROR] [  com.ldmzw.demo.logback.test.MTest.test(MTest.java:36)] level is: error</span><br><span class="line">2022-03-21 20:59:43.822 [main] [WARN ] [  com.ldmzw.demo.logback.test.MTest.test(MTest.java:43)] level is: warn</span><br><span class="line">2022-03-21 20:59:43.822 [main] [ERROR] [  com.ldmzw.demo.logback.test.MTest.test(MTest.java:44)] level is: error</span><br></pre></td></tr></table></figure>

<p>我们看到，当我们调用<code>logger2.setLevel(ch.qos.logback.classic.Level.toLevel(&quot;info&quot;))</code>去修改日志等级为<code>info</code>后，我们预期后面的日志会输出<code>info</code>级别的日志，但是发现输出的依旧<code>warn</code>级别。引起这个的原因正如前面所说，是因为我们显示设置了<code>com.ldmzw.demo.logback.test</code>的日志等级，这时我们会发现<code>com.ldmzw.demo.logback.test.MTest</code>的<code>parent</code>已经由最初的<code>com.ldmzw.demo.logback</code>变成了<code>com.ldmzw.demo.logback.test</code>，并且<code>com.ldmzw.demo.logback.test</code>的<code>parent</code>为<code>com.ldmzw.demo.logback</code>。这时当我们再去修改<code>com.ldmzw.demo.logback</code>的等级，依旧会递归修改其<code>child com.ldmzw.demo.logback.test</code>的等级，但是此时发现<code>com.ldmzw.demo.logback.test</code>的<code>level</code>属性不再为空，所以返回递归。</p>
<p>源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// ch.qos.logback.classic.Logger</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setLevel</span><span class="params">(Level newLevel)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (level == newLevel) &#123;</span><br><span class="line">        <span class="comment">// nothing to do;</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (newLevel == <span class="keyword">null</span> &amp;&amp; isRootLogger()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;The level of the root logger cannot be set to null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    level = newLevel;</span><br><span class="line">    <span class="keyword">if</span> (newLevel == <span class="keyword">null</span>) &#123;</span><br><span class="line">        effectiveLevelInt = parent.effectiveLevelInt;</span><br><span class="line">        newLevel = parent.getEffectiveLevel();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        effectiveLevelInt = newLevel.levelInt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (childrenList != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> len = childrenList.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            Logger child = (Logger) childrenList.get(i);</span><br><span class="line">            <span class="comment">// tell child to handle parent levelInt change</span></span><br><span class="line">            child.handleParentLevelChange(effectiveLevelInt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// inform listeners</span></span><br><span class="line">    loggerContext.fireOnLevelChange(<span class="keyword">this</span>, newLevel);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This method is invoked by parent logger to let this logger know that the</span></span><br><span class="line"><span class="comment"> * prent&#x27;s levelInt changed.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> newParentLevelInt</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">handleParentLevelChange</span><span class="params">(<span class="keyword">int</span> newParentLevelInt)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// changes in the parent levelInt affect children only if their levelInt is</span></span><br><span class="line">    <span class="comment">// null</span></span><br><span class="line">    <span class="keyword">if</span> (level == <span class="keyword">null</span>) &#123;</span><br><span class="line">        effectiveLevelInt = newParentLevelInt;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// propagate the parent levelInt change to this logger&#x27;s children</span></span><br><span class="line">        <span class="keyword">if</span> (childrenList != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> len = childrenList.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                Logger child = (Logger) childrenList.get(i);</span><br><span class="line">                child.handleParentLevelChange(newParentLevelInt);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="在Spring-Boot中的动态切换"><a href="#在Spring-Boot中的动态切换" class="headerlink" title="在Spring Boot中的动态切换"></a>在Spring Boot中的动态切换</h2><p>我们知道，在<code>spring boot</code>中，默认的门面日志框架是<code>Slf4j</code>，默认的记录日志框架采用的是<code>logback</code>，但官方团队也做了<code>log4j2</code>的<code>starter</code>，所以在<code>spring boot</code>中切换日志框架十分的方便。</p>
<p>在<code>spring boot</code>中，官方团队已经给我们封装了动态切换日志等级的方法，调用<code>org.springframework.boot.logging.LoggingSystem#setLogLevel(String loggerName, org.springframework.boot.logging.LogLevel level)</code></p>
<p>核心方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ldmzw.demo.log4j2.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.logging.LogLevel;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.logging.LoggingSystem;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoggingSystem loggingSystem;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/log/change/&#123;name&#125;/&#123;level&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">changeLevel</span><span class="params">(<span class="meta">@PathVariable(&quot;name&quot;)</span> String name, <span class="meta">@PathVariable(&quot;level&quot;)</span> String level)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        loggingSystem.setLogLevel(name, LogLevel.valueOf(level.toUpperCase()));</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;修改日志等级：&#123;&#125; &#123;&#125;&quot;</span>, name, level);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Slf4j-Log4j2"><a href="#Slf4j-Log4j2" class="headerlink" title="Slf4j+Log4j2"></a>Slf4j+Log4j2</h3><h4 id="引入依赖-4"><a href="#引入依赖-4" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="等级切换"><a href="#等级切换" class="headerlink" title="等级切换"></a>等级切换</h4><p>在<code>spring boot</code>中，我们仍然可以选择<code>log4j2</code>前面介绍的两种方式来进行日志等级的动态切换，也可以选择<code>org.springframework.boot.logging.LoggingSystem#setLogLevel(String loggerName, org.springframework.boot.logging.LogLevel level)</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ldmzw.demo.log4j2.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Level;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.core.Logger;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.core.LoggerContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.core.config.LoggerConfig;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.logging.LogLevel;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.logging.LoggingSystem;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoggingSystem loggingSystem;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/log/change/&#123;name&#125;/&#123;level&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">changeLevel</span><span class="params">(<span class="meta">@PathVariable(&quot;name&quot;)</span> String name, <span class="meta">@PathVariable(&quot;level&quot;)</span> String level)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        loggingSystem.setLogLevel(name, LogLevel.valueOf(level.toUpperCase()));</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;修改日志等级：&#123;&#125; &#123;&#125;&quot;</span>, name, level);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/log&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">log</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.trace(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;trace&quot;</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;debug&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;info&quot;</span>);</span><br><span class="line">        log.warn(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;warn&quot;</span>);</span><br><span class="line">        log.error(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;error&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok - &quot;</span> + log.getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<p>当我们调用<code>loggingSystem.setLogLevel(name, LogLevel.valueOf(level.toUpperCase()))</code>时，如果我们传入的<code>name</code>没有找到相应的<code>loggerConfig</code>时，<code>spring boot</code>会为我们创建一个<code>org.springframework.boot.logging.log4j2.Log4J2LoggingSystem$LevelSetLoggerConfig</code>，并且增加到<code>configuration</code>中去。更新的时候对应<code>logger</code>会引用新增加入的<code>loggerConfig</code>，这一点与自己使用<code>slf4j</code>更新时存在区别。</p>
</blockquote>
<p>关键源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="comment">// org.springframework.boot.logging.log4j2.Log4J2LoggingSystem</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setLogLevel</span><span class="params">(String loggerName, Level level)</span> </span>&#123;</span><br><span class="line">	LoggerConfig logger = getLogger(loggerName);</span><br><span class="line">	<span class="keyword">if</span> (level == <span class="keyword">null</span>) &#123;</span><br><span class="line">		clearLogLevel(loggerName, logger);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		setLogLevel(loggerName, logger, level);</span><br><span class="line">	&#125;</span><br><span class="line">	getLoggerContext().updateLoggers();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">clearLogLevel</span><span class="params">(String loggerName, LoggerConfig logger)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (logger <span class="keyword">instanceof</span> LevelSetLoggerConfig) &#123;</span><br><span class="line">		getLoggerContext().getConfiguration().removeLogger(loggerName);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		logger.setLevel(<span class="keyword">null</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setLogLevel</span><span class="params">(String loggerName, LoggerConfig logger, Level level)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (logger == <span class="keyword">null</span>) &#123;</span><br><span class="line">		getLoggerContext().getConfiguration().addLogger(loggerName,</span><br><span class="line">				<span class="keyword">new</span> LevelSetLoggerConfig(loggerName, level, <span class="keyword">true</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		logger.setLevel(level);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Slf4j-Logback"><a href="#Slf4j-Logback" class="headerlink" title="Slf4j+Logback"></a>Slf4j+Logback</h3><h4 id="等级切换-1"><a href="#等级切换-1" class="headerlink" title="等级切换"></a>等级切换</h4><p>由于<code>logback</code>本身就实现了<code>slf4j</code>，并且在<code>logback</code>中没有<code>loggerConfig</code>的概念，所以在<code>spring boot</code>中进行动态切换时使用区别不大。值得注意一点的是，和<code>logback</code>切换一样，当<code>child logger</code>如果<code>level</code>属性不为空，当<code>parent logger</code>等级修改时递归调用并不会影响到<code>child logger</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ldmzw.demo.logback.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.classic.Logger;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.classic.LoggerContext;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.logging.LogLevel;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.logging.LoggingSystem;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoggingSystem loggingSystem;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/log/change/&#123;name&#125;/&#123;level&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">changeLevel</span><span class="params">(<span class="meta">@PathVariable(&quot;name&quot;)</span> String name, <span class="meta">@PathVariable(&quot;level&quot;)</span> String level)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    loggingSystem.setLogLevel(name, LogLevel.valueOf(level.toUpperCase()));</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;修改日志等级：&#123;&#125; &#123;&#125;&quot;</span>, name, level);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change1</span><span class="params">(String name, String level)</span> </span>&#123;</span><br><span class="line">        LoggerContext loggerContext = (ch.qos.logback.classic.LoggerContext) LoggerFactory.getILoggerFactory();</span><br><span class="line">        Logger logger = loggerContext.getLogger(name);</span><br><span class="line">        <span class="keyword">if</span> (logger == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 更改全局日志级别；否则按传递的包名或类名修改日志级别。</span></span><br><span class="line">            logger = loggerContext.getLogger(org.slf4j.Logger.ROOT_LOGGER_NAME);</span><br><span class="line">        &#125;</span><br><span class="line">        logger.setLevel(ch.qos.logback.classic.Level.toLevel(level));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/log&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">log</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.trace(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;trace&quot;</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;debug&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;info&quot;</span>);</span><br><span class="line">        log.warn(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;warn&quot;</span>);</span><br><span class="line">        log.error(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;error&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok - &quot;</span> + log.getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关键源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="comment">// org.springframework.boot.logging.logback.LogbackLoggingSystem</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLogLevel</span><span class="params">(String loggerName, LogLevel level)</span> </span>&#123;</span><br><span class="line">	ch.qos.logback.classic.Logger logger = getLogger(loggerName);</span><br><span class="line">	<span class="keyword">if</span> (logger != <span class="keyword">null</span>) &#123;</span><br><span class="line">		logger.setLevel(LEVELS.convertSystemToNative(level));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ch.qos.logback.classic.<span class="function">Logger <span class="title">getLogger</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">	LoggerContext factory = getLoggerContext();</span><br><span class="line">	<span class="keyword">return</span> factory.getLogger(getLoggerName(name));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> LoggerContext <span class="title">getLoggerContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ILoggerFactory factory = StaticLoggerBinder.getSingleton().getLoggerFactory();</span><br><span class="line">	Assert.isInstanceOf(LoggerContext.class, factory,</span><br><span class="line">			() -&gt; String.format(</span><br><span class="line">					<span class="string">&quot;LoggerFactory is not a Logback LoggerContext but Logback is on &quot;</span></span><br><span class="line">							+ <span class="string">&quot;the classpath. Either remove Logback or the competing &quot;</span></span><br><span class="line">							+ <span class="string">&quot;implementation (%s loaded from %s). If you are using &quot;</span></span><br><span class="line">							+ <span class="string">&quot;WebLogic you will need to add &#x27;org.slf4j&#x27; to &quot;</span></span><br><span class="line">							+ <span class="string">&quot;prefer-application-packages in WEB-INF/weblogic.xml&quot;</span>,</span><br><span class="line">					factory.getClass(), getLocation(factory)));</span><br><span class="line">	<span class="keyword">return</span> (LoggerContext) factory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文只介绍了目前比较主流的记录日志框架<code>logback</code>与<code>log4j2</code>，其它的框架大家可以去研究一下。在<code>spring boot</code>中，不论是<code>logback</code>还是<code>log4j2</code>，spring团队都为我们做了适配，因此我们在<code>spring boot</code>应用中去动态切换，基本不需要修改代码。</p>
]]></content>
      <categories>
        <category>java</category>
        <category>日志组件</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>日志组件</tag>
      </tags>
  </entry>
  <entry>
    <title>日志组件Log4j2</title>
    <url>/2022/03/14/log-log4j2/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在上一篇文章中，我们已经讲解了<code>logback</code>，这篇文章我们讲解一下同样优秀的日志框架<code>log4j2</code>。<code>log4j2</code>作为老牌日志框架<code>log4j</code>的升级框架，从它面世就受到了广大研发者的青睐。它吸取了<code>logback</code>的优点，同时提升了它的性能。</p>
<ul>
<li><a href="https://logging.apache.org/log4j/2.x/index.html" title="Log4j2 官网">Log4j2 官网</a></li>
<li><a href="https://logging.apache.org/log4j/2.x/manual/index.html" title="Log4j2 使用手册">Log4j2 使用手册</a></li>
</ul>
<p>系列相关文章：</p>
<ul>
<li><a href="/2022/02/28/log-framework/" title="日志组件">日志组件</a></li>
<li><a href="/2022/03/07/log-logback/" title="日志组件Logback">日志组件Logback</a></li>
<li><a href="/2022/03/14/log-log4j2/" title="日志组件Log4j2">日志组件Log4j2</a></li>
<li><a href="/2022/03/21/log-framework1/" title="日志组件动态日志">日志组件动态日志</a></li>
</ul>
<span id="more"></span>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>为了使用<code>log4j2</code>，我们需要引入<code>log4j-core</code>与<code>log4j-api</code>，如果是maven项目使用，我们只需要引入<code>log4j-core</code>即可，maven帮助我们自动引入<code>log4j-core</code>所依赖的<code>log4j-api</code>。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.17.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="增加配置文件（可选）"><a href="#增加配置文件（可选）" class="headerlink" title="增加配置文件（可选）"></a>增加配置文件（可选）</h3><p>在使用<code>log4j2</code>的时候，我们可通过配置文件来配置我们的日志，当然，如果我们没有对日志进行配置，<code>log4j2</code>会采用它默认的配置<code>org.apache.logging.log4j.core.config.DefaultConfiguration</code>进行配置，默认的<code>ConfigurationFactory</code>为<code>org.apache.logging.log4j.core.config.ConfigurationFactory.Factory</code>。</p>
<ul>
<li><a href="https://logging.apache.org/log4j/2.x/manual/configuration.html" title="Log4j2 配置手册">Log4j2 配置手册</a></li>
<li><a href="https://logging.apache.org/log4j/2.x/manual/appenders.html" title="Log4j2 Appenders">Log4j2 Appenders</a></li>
<li><a href="https://logging.apache.org/log4j/2.x/manual/layouts.html" title="Log4j2 Layouts">Log4j2 Layouts</a></li>
<li><a href="https://logging.apache.org/log4j/2.x/manual/filters.html" title="Log4j2 Filters">Log4j2 Filters</a></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Licensed to the Apache Software Foundation (ASF) under one or more</span></span><br><span class="line"><span class="comment"> * contributor license agreements. See the NOTICE file distributed with</span></span><br><span class="line"><span class="comment"> * this work for additional information regarding copyright ownership.</span></span><br><span class="line"><span class="comment"> * The ASF licenses this file to You under the Apache license, Version 2.0</span></span><br><span class="line"><span class="comment"> * (the &quot;License&quot;); you may not use this file except in compliance with</span></span><br><span class="line"><span class="comment"> * the License. You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the license for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the license.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> org.apache.logging.log4j.core.config;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The default configuration writes all output to the Console using the default logging level. You configure default</span></span><br><span class="line"><span class="comment"> * logging level by setting the system property &quot;org.apache.logging.log4j.level&quot; to a level name. If you do not</span></span><br><span class="line"><span class="comment"> * specify the property, Log4j uses the ERROR Level. Log Events will be printed using the basic formatting provided</span></span><br><span class="line"><span class="comment"> * by each Message.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultConfiguration</span> <span class="keyword">extends</span> <span class="title">AbstractConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The name of the default configuration.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_NAME = <span class="string">&quot;Default&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The System Property used to specify the logging level.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_LEVEL = <span class="string">&quot;org.apache.logging.log4j.level&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The default Pattern used for the default Layout.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PATTERN = <span class="string">&quot;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructor to create the default configuration.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DefaultConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="keyword">null</span>, ConfigurationSource.NULL_SOURCE);</span><br><span class="line">        setToDefault();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doConfigure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以看到，核心的方法<code>setToDefault()</code>，该方法为父类<code>org.apache.logging.log4j.core.config.AbstractConfiguration</code>中的方法，方法如下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Level <span class="title">getDefaultLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String levelName = PropertiesUtil.getProperties().getStringProperty(DefaultConfiguration.DEFAULT_LEVEL,</span><br><span class="line">            Level.ERROR.name());</span><br><span class="line">    <span class="keyword">return</span> Level.valueOf(levelName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setToDefault</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// LOG4J2-1176 facilitate memory leak investigation</span></span><br><span class="line">    setName(DefaultConfiguration.DEFAULT_NAME + <span class="string">&quot;@&quot;</span> + Integer.toHexString(hashCode()));</span><br><span class="line">    <span class="keyword">final</span> Layout&lt;? extends Serializable&gt; layout = PatternLayout.newBuilder()</span><br><span class="line">            .withPattern(DefaultConfiguration.DEFAULT_PATTERN)</span><br><span class="line">            .withConfiguration(<span class="keyword">this</span>)</span><br><span class="line">            .build();</span><br><span class="line">    <span class="keyword">final</span> Appender appender = ConsoleAppender.createDefaultAppenderForLayout(layout);</span><br><span class="line">    appender.start();</span><br><span class="line">    addAppender(appender);</span><br><span class="line">    <span class="keyword">final</span> LoggerConfig rootLoggerConfig = getRootLogger();</span><br><span class="line">    rootLoggerConfig.addAppender(appender, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    rootLoggerConfig.setLevel(getDefaultLevel());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从默认配置源码中我们可以看到：</p>
<ul>
<li><code>ConsoleAppender</code>将会添加到<code>root</code>logger。</li>
<li><code>PatternLayout</code> <code>%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n</code>将会添加到 <code>ConsoleAppender</code>。</li>
<li>如果我们没有设置<code>org.apache.logging.log4j.level</code>变量，<code>log4j2``root</code>的默认等级为<code>error</code>。</li>
</ul>
<p>log4j2.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">&quot;WARN&quot;</span> <span class="attr">monitorInterval</span>=<span class="string">&quot;30&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">&quot;log.path&quot;</span> <span class="attr">value</span>=<span class="string">&quot;logs&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">&quot;app.name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ldmzw-demo-log4j2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    &lt;ThresholdFilter level=&quot;info&quot;/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d&#123;HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %m%n&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">File</span> <span class="attr">name</span>=<span class="string">&quot;DEBUG_FILE&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;$&#123;log.path&#125;/$&#123;app.name&#125;_debug.log&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%t] %-5level %c %m%n<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">PatternLayout</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">File</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">&quot;INFO_FILE&quot;</span> <span class="attr">filePattern</span>=<span class="string">&quot;$&#123;log.path&#125;/$&#123;app.name&#125;-info-%d&#123;yyyy-MM-dd&#125;.%i.log&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%t] %-5level %c %L %m%n<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">PatternLayout</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">&quot;250 MB&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DirectWriteRolloverStrategy</span> <span class="attr">maxFiles</span>=<span class="string">&quot;15&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">&quot;WARN_FILE&quot;</span> <span class="attr">filePattern</span>=<span class="string">&quot;$&#123;log.path&#125;/$&#123;app.name&#125;-warn-%d&#123;yyyy-MM-dd&#125;.%i.log&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%t] %-5level %c %L %m%n<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">PatternLayout</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">&quot;250 MB&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DirectWriteRolloverStrategy</span> <span class="attr">maxFiles</span>=<span class="string">&quot;15&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">LevelMatchFilter</span> <span class="attr">level</span>=<span class="string">&quot;WARN&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">&quot;ERROR_FILE&quot;</span> <span class="attr">filePattern</span>=<span class="string">&quot;$&#123;log.path&#125;/$&#123;app.name&#125;-error-%d&#123;yyyy-MM-dd&#125;.%i.log&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%t] %-5level %c %L %m%n<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">PatternLayout</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">&quot;250 MB&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DirectWriteRolloverStrategy</span> <span class="attr">maxFiles</span>=<span class="string">&quot;15&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">LevelMatchFilter</span> <span class="attr">level</span>=<span class="string">&quot;ERROR&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">&quot;com.ldmzw.demo.log4j2&quot;</span> <span class="attr">level</span>=<span class="string">&quot;trace&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">&quot;error&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;DEBUG_FILE&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;INFO_FILE&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;WARN_FILE&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;ERROR_FILE&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>特别说明：</p>
<ul>
<li>status：用于控制<code>log4j2</code>自身的日志打印级别。</li>
<li>monitorInterval：当我们配置了一个非零的<code>monitorInterval</code>后，<code>log4j2</code>会自动检测配置文件变化然后重新进行配置。单位<code>秒</code>。</li>
</ul>
<h3 id="打印日志"><a href="#打印日志" class="headerlink" title="打印日志"></a>打印日志</h3><p>log4j2打印日志十分的简单。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ldmzw.demo.log4j2.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Logger log = LogManager.getLogger(MTest.class);</span><br><span class="line">        log.trace(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;trace&quot;</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;debug&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;info&quot;</span>);</span><br><span class="line">        log.warn(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;warn&quot;</span>);</span><br><span class="line">        log.error(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="进阶使用"><a href="#进阶使用" class="headerlink" title="进阶使用"></a>进阶使用</h2><h3 id="在Spring-Boot中动态切换日志等级"><a href="#在Spring-Boot中动态切换日志等级" class="headerlink" title="在Spring Boot中动态切换日志等级"></a>在Spring Boot中动态切换日志等级</h3><p>如果我们使用 <code>log4j2</code> 来实现我们的日志，我们只需要编写下面的简单代码就能进行日志等级切换。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">org.apache.logging.log4j.core.LoggerContext context = (org.apache.logging.log4j.core.LoggerContext) LogManager.getContext(<span class="keyword">false</span>);</span><br><span class="line">org.apache.logging.log4j.core.Logger logger = (org.apache.logging.log4j.core.Logger) context.getLogger(MTest.class);</span><br><span class="line">logger.setLevel(org.apache.logging.log4j.Level.toLevel(level)); <span class="comment">//修改日志等级</span></span><br></pre></td></tr></table></figure>

<p>使用controller来控制日志等级</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ldmzw.demo.log4j2.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Level;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.core.Logger;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.core.LoggerContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/log/change/&#123;name&#125;/&#123;level&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">changeLevel</span><span class="params">(<span class="meta">@PathVariable(&quot;name&quot;)</span> String name, <span class="meta">@PathVariable(&quot;level&quot;)</span> String level)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        LoggerContext logContext = (LoggerContext) LogManager.getContext(<span class="keyword">false</span>);</span><br><span class="line">        Logger logger = logContext.getLogger(name);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (logger == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 更改全局日志级别；否则按传递的包名或类名修改日志级别。</span></span><br><span class="line">            logger = logContext.getLogger(org.slf4j.Logger.ROOT_LOGGER_NAME);</span><br><span class="line">            name = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        logger.setLevel(Level.toLevel(level));</span><br><span class="line">        log.info(<span class="string">&quot;修改日志等级：&#123;&#125; &#123;&#125;&quot;</span>, name, level);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/log&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">log</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.trace(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;trace&quot;</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;debug&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;info&quot;</span>);</span><br><span class="line">        log.warn(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;warn&quot;</span>);</span><br><span class="line">        log.error(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;error&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok - &quot;</span> + log.getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>我们在传递<code>org.apache.logging.log4j.Level</code>的时候如果使用<code>Level.getLevel(level)</code>时需要使用大写，或者使用<code>Level.toLevel(level)</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//源代码：org.apache.logging.log4j.Level</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Level <span class="title">getLevel</span><span class="params">(<span class="keyword">final</span> String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> LEVELS.get(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Level <span class="title">toLevel</span><span class="params">(<span class="keyword">final</span> String level)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> toLevel(level, Level.DEBUG);<span class="comment">//如果不合法则默认为DEBUG</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Level <span class="title">toLevel</span><span class="params">(<span class="keyword">final</span> String name, <span class="keyword">final</span> Level defaultLevel)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> defaultLevel;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> Level level = LEVELS.get(toUpperCase(name.trim()));<span class="comment">//会进行toUpperCase转换</span></span><br><span class="line">    <span class="keyword">return</span> level == <span class="keyword">null</span> ? defaultLevel : level;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>与<code>logback</code>不同，使用<code>logger.setLevel(org.apache.logging.log4j.Level.toLevel(level))</code>时，只会修改自己<code>logger</code>的等级，并不会修改其<code>子logger</code>的等级，比如我们配置了<code>com.ldmzw.demo.log4j2</code>的等级为<code>trace</code>，当我们使用<code>@Slf4j</code>的时候，会为我们创建具体的<code>com.ldmzw.demo.log4j2.controller.TestController</code> logger，但是由于<code>com.ldmzw.demo.log4j2.controller.TestController</code>没有设置日志等级，所以会继承<code>parent</code>的等级。但是当我们修改<code>com.ldmzw.demo.log4j2</code>的等级为<code>info</code>后，<code>com.ldmzw.demo.log4j2.controller.TestController</code>的等级并不会变为<code>info</code>，还是<code>trace</code>保持不变。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//源码：ch.qos.logback.classic.Logger#setLevel</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setLevel</span><span class="params">(Level newLevel)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (level == newLevel) &#123;</span><br><span class="line">        <span class="comment">// nothing to do;</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (newLevel == <span class="keyword">null</span> &amp;&amp; isRootLogger()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;The level of the root logger cannot be set to null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    level = newLevel;</span><br><span class="line">    <span class="keyword">if</span> (newLevel == <span class="keyword">null</span>) &#123;</span><br><span class="line">        effectiveLevelInt = parent.effectiveLevelInt;</span><br><span class="line">        newLevel = parent.getEffectiveLevel();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        effectiveLevelInt = newLevel.levelInt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (childrenList != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> len = childrenList.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            Logger child = (Logger) childrenList.get(i);</span><br><span class="line">            <span class="comment">// tell child to handle parent levelInt change</span></span><br><span class="line">            child.handleParentLevelChange(effectiveLevelInt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// inform listeners</span></span><br><span class="line">    loggerContext.fireOnLevelChange(<span class="keyword">this</span>, newLevel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//源码：org.apache.logging.log4j.core.Logger#setLevel</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setLevel</span><span class="params">(<span class="keyword">final</span> Level level)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (level == getLevel()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Level actualLevel;</span><br><span class="line">    <span class="keyword">if</span> (level != <span class="keyword">null</span>) &#123;</span><br><span class="line">        actualLevel = level;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> Logger parent = getParent();</span><br><span class="line">        actualLevel = parent != <span class="keyword">null</span> ? parent.getLevel() : privateConfig.loggerConfigLevel;</span><br><span class="line">    &#125;</span><br><span class="line">    privateConfig = <span class="keyword">new</span> PrivateConfig(privateConfig, actualLevel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h2><p><code>log4j2</code>在他初始化时会进行自动配置，当<code>log4j2</code>启动时，它会查找所有的<code>org.apache.logging.log4j.core.config.ConfigurationFactory</code>配置，然后根据权重从高到低进行排序。<code>log4j2</code>已经为我们实现了下面四种<code>ConfigurationFactory</code>：</p>
<ul>
<li>org.apache.logging.log4j.core.config.properties.PropertiesConfigurationFactory：加载<code>properties</code>配置，@Order(8)</li>
<li>org.apache.logging.log4j.core.config.yaml.YamlConfigurationFactory加载<code>yaml</code>配置，@Order(7)</li>
<li>org.apache.logging.log4j.core.config.json.JsonConfigurationFactory：加载<code>json</code>配置，@Order(6)</li>
<li>org.apache.logging.log4j.core.config.xml.XmlConfigurationFactory：加载<code>xml</code>配置，@Order(5)</li>
</ul>
<p><code>log4j2</code>在启动时会根据下面的顺序去寻找配置：</p>
<ol>
<li><code>log4j2</code>会检查系统是否配置<code>log4j2.configurationFile</code>，如果配置了<code>log4j2.configurationFile</code>，它会根据文件后缀选取合适的<code>ConfigurationFactory</code>来进行配置。<code>log4j2.configurationFile</code>可以是一个本地文件系统中的文件，也可以是存放在网络上的一个文件。</li>
<li>如果没有<code>log4j2.configurationFile</code>，<code>properties ConfigurationFactory</code>会寻找classpath下的<code>log4j2-test.properties</code>。</li>
<li>如果没有找到文件，<code>yaml ConfigurationFactory</code>会寻找classpath下的<code>log4j2-test.yaml</code>或者<code>log4j2-test.yml</code>。</li>
<li>如果没有找到文件，<code>json ConfigurationFactory</code>会寻找classpath下的<code>log4j2-test.json</code>或者<code>log4j2-test.jsn</code>。</li>
<li>如果没有找到文件，<code>xml ConfigurationFactory</code>会寻找classpath下的<code>log4j2-test.xml</code>。</li>
<li>如果没有找到文件，<code>properties ConfigurationFactory</code>会寻找classpath下的<code>log4j2.properties</code>。</li>
<li>如果没有找到文件，<code>yaml ConfigurationFactory</code>会寻找classpath下的<code>log4j2.yaml</code>或者<code>log4j2.yml</code>。</li>
<li>如果没有找到文件，<code>json ConfigurationFactory</code>会寻找classpath下的<code>log4j2.json</code>或者<code>log4j2.jsn</code>。</li>
<li>如果没有找到文件，<code>xml ConfigurationFactory</code>会寻找classpath下的<code>log4j2.xml</code>。</li>
<li>如果都没有找到配置文件，<code>log4j2</code>会采用<code>org.apache.logging.log4j.core.config.DefaultConfiguration</code>进行配置。</li>
</ol>
<p>关于自动配置，我们可以从官网中获取更多信息：</p>
<ul>
<li><a href="https://logging.apache.org/log4j/2.x/manual/configuration.html" title="log4j2 自动配置">log4j2 自动配置</a></li>
</ul>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p><code>log4j2</code>相比于<code>logback</code>提供了更多的功能，同时很多地方给我们留了切入点，让我们可以自由的进行扩展，但是也因此增加了使用难度。</p>
<p>遗留问题：</p>
<ul>
<li>在<code>spring boot</code>中使用动态切换时，<code>@Slf4j</code>会为每一个类创建一个<code>logger</code>，并且会有一个私有的<code>PrivateConfig</code>，这就导致我们如果想要整体修改某一个包下的所有类的日志级别，可能会比较麻烦，目前还没有找到更好的方法，欢迎大家提出解决办法</li>
</ul>
<p>参考：</p>
<ul>
<li><a href="https://logging.apache.org/log4j/2.x/index.html" title="Log4j2 官网">Log4j2 官网</a></li>
<li><a href="https://logging.apache.org/log4j/2.x/manual/index.html" title="Log4j2 使用手册">Log4j2 使用手册</a></li>
<li><a href="https://www.exahd.com/article/rollingfile%20.html" title="说说Log4j2中RollingFile的文件滚动更新机制">说说Log4j2中RollingFile的文件滚动更新机制</a></li>
</ul>
]]></content>
      <categories>
        <category>java</category>
        <category>日志组件</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>日志组件</tag>
        <tag>log4j2</tag>
      </tags>
  </entry>
  <entry>
    <title>日志组件Logback</title>
    <url>/2022/03/07/log-logback/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在任何应用开发中，日志是必不可少的，它可以帮助我们在应用出现问题时快速的定位排查问题。在Java语言的日志组件中，我们熟悉的有<code>logback</code>、<code>log4j</code>、<code>log4j2</code>、<code>jul（Java Util Logging）</code>等。</p>
<blockquote>
<p>注意：在没有特别说明的情况下，<code>log4j</code>指的是<code>log4j 1.x</code>版本</p>
</blockquote>
<p>通过前面文章的从绍，我们对<code>java</code>的日志体系已经有一个整体了解，这篇文章主要讲解一下日志框架中的<code>logback</code>。<code>logback</code>的出现是为了替代<code>log4j</code>，它是由log4j的创始人<code>Ceki Gülcü</code>设计。<code>logback</code>包含三个模块，<code>logback-classic</code>,<code> logback-core</code>,<code> logback-access</code>。</p>
<ul>
<li><a href="https://logback.qos.ch/" title="Logback 官网">Logback 官网</a></li>
<li><a href="https://logback.qos.ch/manual/index.html" title="Logback 使用手册">Logback 使用手册</a></li>
</ul>
<p>系列相关文章：</p>
<ul>
<li><a href="/2022/02/28/log-framework/" title="日志组件">日志组件</a></li>
<li><a href="/2022/03/07/log-logback/" title="日志组件Logback">日志组件Logback</a></li>
<li><a href="/2022/03/14/log-log4j2/" title="日志组件Log4j2">日志组件Log4j2</a></li>
<li><a href="/2022/03/21/log-framework1/" title="日志组件动态日志">日志组件动态日志</a></li>
</ul>
<span id="more"></span>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>为了使用<code>logback</code>，我们需要引入<code>logback-classic</code>与<code>logback-core</code>，同时还需要引入<code>slf4j-api</code>，如果是maven项目使用，我们只需要引入<code>logback-classic</code>即可，maven帮助我们自动引入<code>logback-classic</code>所依赖的<code>logback-core</code>与<code>slf4j-api</code>。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="增加配置文件（可选）"><a href="#增加配置文件（可选）" class="headerlink" title="增加配置文件（可选）"></a>增加配置文件（可选）</h3><p>在使用<code>logback</code>的时候，我们可通过配置文件来配置我们的日志，当然，如果我们没有对日志进行配置，<code>logback</code>会采用它默认的配置<code>ch.qos.logback.classic.BasicConfigurator</code>进行配置。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicConfigurator</span> <span class="keyword">extends</span> <span class="title">ContextAwareBase</span> <span class="keyword">implements</span> <span class="title">Configurator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BasicConfigurator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(LoggerContext lc)</span> </span>&#123;</span><br><span class="line">        addInfo(<span class="string">&quot;Setting up default configuration.&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        ConsoleAppender&lt;ILoggingEvent&gt; ca = <span class="keyword">new</span> ConsoleAppender&lt;ILoggingEvent&gt;();</span><br><span class="line">        ca.setContext(lc);</span><br><span class="line">        ca.setName(<span class="string">&quot;console&quot;</span>);</span><br><span class="line">        LayoutWrappingEncoder&lt;ILoggingEvent&gt; encoder = <span class="keyword">new</span> LayoutWrappingEncoder&lt;ILoggingEvent&gt;();</span><br><span class="line">        encoder.setContext(lc);</span><br><span class="line">        </span><br><span class="line"> </span><br><span class="line">        <span class="comment">// same as </span></span><br><span class="line">        <span class="comment">// PatternLayout layout = new PatternLayout();</span></span><br><span class="line">        <span class="comment">// layout.setPattern(&quot;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&quot;);</span></span><br><span class="line">        TTLLLayout layout = <span class="keyword">new</span> TTLLLayout();</span><br><span class="line"> </span><br><span class="line">        layout.setContext(lc);</span><br><span class="line">        layout.start();</span><br><span class="line">        encoder.setLayout(layout);</span><br><span class="line">        </span><br><span class="line">        ca.setEncoder(encoder);</span><br><span class="line">        ca.start();</span><br><span class="line">        </span><br><span class="line">        Logger rootLogger = lc.getLogger(Logger.ROOT_LOGGER_NAME);</span><br><span class="line">        rootLogger.addAppender(ca);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们看到默认配置为<code>ConsoleAppender</code>，格式为<code>%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n</code>。但是在日常的项目中，我们通常需要把日常按不同的级别记录到不同的文件中去，这样方便我们在排查问题的时候可以快速的找到我们需要的日志。因此我们就需要自定义我们的日志配置。</p>
<p>logback.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">&quot;true&quot;</span> <span class="attr">scanPeriod</span>=<span class="string">&quot;10 seconds&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;log.path&quot;</span> <span class="attr">value</span>=<span class="string">&quot;logs&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;app.name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ldmzw-demo-logback&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE_LOG_PATTERN&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">value</span>=<span class="string">&quot;%date&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] [%-5level] [%replace(%caller&#123;1&#125;)&#123;&#x27;\t|Caller.&#123;1&#125;0|at|\r\n&#x27;, &#x27;&#x27;&#125;] %msg%n&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--输出到控制台 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>DEBUG<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--输出到文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;DEBUG_FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.FileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/$&#123;app.name&#125;_debug.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">append</span>&gt;</span>false<span class="tag">&lt;/<span class="name">append</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件输出格式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%date&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%t] [%-5level] %logger&#123;36&#125;.%M-%line - %msg%n</span><br><span class="line">            <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">immediateFlush</span>&gt;</span>true<span class="tag">&lt;/<span class="name">immediateFlush</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>DEBUG<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 时间滚动输出 level为 INFO 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;INFO_FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/$&#123;app.name&#125;_info.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%date&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%t] [%-5level] %logger&#123;36&#125;-%line - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">immediateFlush</span>&gt;</span>true<span class="tag">&lt;/<span class="name">immediateFlush</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 每天日志归档路径以及格式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/info/$&#123;app.name&#125;-info-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文件只记录info及以上级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 时间滚动输出 level为 WARN 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;WARN_FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/$&#123;app.name&#125;_warn.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件输出格式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%date&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; [%t] [%-5level] %logger&#123;36&#125;-%line - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> <span class="comment">&lt;!-- 此处设置字符集 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">immediateFlush</span>&gt;</span>true<span class="tag">&lt;/<span class="name">immediateFlush</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/warn/$&#123;app.name&#125;-warn-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文件只记录warn级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>WARN<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 时间滚动输出 level为 ERROR 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;ERROR_FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/$&#123;app.name&#125;_error.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件输出格式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%date&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; [%t] [%-5level] %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> <span class="comment">&lt;!-- 此处设置字符集 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">immediateFlush</span>&gt;</span>true<span class="tag">&lt;/<span class="name">immediateFlush</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/error/$&#123;app.name&#125;-error-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文件只记录ERROR级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;root&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;DEBUG_FILE&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;INFO_FILE&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;WARN_FILE&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;ERROR_FILE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.ldmzw.demo&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.springframework&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在<code>logback</code>中，也有<code>root</code> logger，实际使用时发现，下面两种配置效果是一样的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;root&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;DEBUG_FILE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;INFO_FILE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;WARN_FILE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;ERROR_FILE&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;DEBUG_FILE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;INFO_FILE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;WARN_FILE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;ERROR_FILE&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在配置中，有两个值得我们注意：</p>
<ul>
<li><code>scanPeriod</code>: 当我们开启了<code>scan</code>并且配置了<code>scanPeriod</code>后，<code>logback</code>会启动定时器来定时扫描文件的变化，具体的可以查看<code>ch.qos.logback.classic.joran.action.ConfigurationAction</code>与<code>ch.qos.logback.classic.joran.ReconfigureOnChangeTask</code></li>
<li><code>additivity</code>：<code>logger</code>的<code>additivity</code>默认为<code>true</code>，可在<code>ch.qos.logback.classic.Logger#additive</code>中查看源码，即<code>子logger</code>默认会在<code>父logger</code>的<code>appender</code>中输出日志内容，如果我们希望<code>logger</code>只在自己的<code>appender</code>中输出内容，我们可以将<code>additivity</code>设置为<code>false</code>。</li>
</ul>
<p>根据 <a href="https://logback.qos.ch/manual/configuration.html" title="网官的配置">网官的配置</a> 介绍，<code>logback</code>会根据下面的顺序来进行配置。</p>
<blockquote>
<p>Let us begin by discussing the initialization steps that logback follows to try to configure itself:</p>
<ol>
<li>Logback tries to find a file called <code>logback-test.xml</code> <a href="https://logback.qos.ch/faq.html#configFileLocation" title="classpath">in the classpath</a>.</li>
<li>If no such file is found, it checks for the file <code>logback.xml</code> <a href="https://logback.qos.ch/faq.html#configFileLocation" title="classpath">in the classpath</a>.</li>
<li>If no such file is found, <a href="https://docs.oracle.com/javase/6/docs/api/java/util/ServiceLoader.html" title="service-provider loading facility">service-provider loading facility</a> (introduced in JDK 1.6) is used to resolve the implementation of <code>com.qos.logback.classic.spi.Configurator</code> interface by looking up the file <code>META-INF\services\ch.qos.logback.classic.spi.Configurator</code> in the class path. Its contents should specify the fully qualified class name of the desired <code>Configurator</code> implementation.</li>
<li>If none of the above succeeds, logback configures itself automatically using the <code>BasicConfigurator</code> which will cause logging output to be directed to the console.</li>
</ol>
</blockquote>
<h3 id="打印日志"><a href="#打印日志" class="headerlink" title="打印日志"></a>打印日志</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ldmzw.demo.logback.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(MTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        log.trace(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;trace&quot;</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;debug&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;info&quot;</span>);</span><br><span class="line">        log.warn(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;warn&quot;</span>);</span><br><span class="line">        log.error(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="进阶使用"><a href="#进阶使用" class="headerlink" title="进阶使用"></a>进阶使用</h2><h3 id="在Spring-Boot中动态切换日志等级"><a href="#在Spring-Boot中动态切换日志等级" class="headerlink" title="在Spring Boot中动态切换日志等级"></a>在Spring Boot中动态切换日志等级</h3><p>如果我们使用 <code>logback</code> 来实现我们的日志，我们只需要编写下面的简单代码就能进行日志等级切换。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LoggerContext loggerContext = (ch.qos.logback.classic.LoggerContext) LoggerFactory.getILoggerFactory();</span><br><span class="line">Logger logger = loggerContext.getLogger(name);</span><br><span class="line">logger.setLevel(ch.qos.logback.classic.Level.toLevel(level));</span><br></pre></td></tr></table></figure>

<p>使用示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ldmzw.demo.logback.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.classic.Logger;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.classic.LoggerContext;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/log/change/&#123;name&#125;/&#123;level&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">changeLevel</span><span class="params">(<span class="meta">@PathVariable(&quot;name&quot;)</span> String name, <span class="meta">@PathVariable(&quot;level&quot;)</span> String level)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        LoggerContext loggerContext = (ch.qos.logback.classic.LoggerContext) LoggerFactory.getILoggerFactory();</span><br><span class="line">        Logger logger = loggerContext.getLogger(name);</span><br><span class="line">        <span class="keyword">if</span> (logger == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 更改全局日志级别；否则按传递的包名或类名修改日志级别。</span></span><br><span class="line">            logger = loggerContext.getLogger(org.slf4j.Logger.ROOT_LOGGER_NAME);</span><br><span class="line">            name = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        logger.setLevel(ch.qos.logback.classic.Level.toLevel(level));</span><br><span class="line">        log.info(<span class="string">&quot;修改日志等级：&#123;&#125; &#123;&#125;&quot;</span>, name, level);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/log&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">log</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.trace(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;trace&quot;</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;debug&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;info&quot;</span>);</span><br><span class="line">        log.warn(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;warn&quot;</span>);</span><br><span class="line">        log.error(<span class="string">&quot;level is: &#123;&#125;&quot;</span>, <span class="string">&quot;error&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok - &quot;</span> + log.getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们启动应用，然后访问下面的地址，然后再查看应用的日志，发现随着日志等级的改变，只打印对应等级及以上的日志，修改日志等级成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/test/log</span><br><span class="line">http://localhost:8080/test/log/change/root/info</span><br><span class="line">http://localhost:8080/test/log/change/com.ldmzw.demo/warn</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/07/log-logback/001.png" alt="logback change level" title="logback change level"></p>
<h3 id="日志等级继承"><a href="#日志等级继承" class="headerlink" title="日志等级继承"></a>日志等级继承</h3><p>在<code>logback</code>中，日志等级如果我们没有配置，则默认会继承<code>parent</code>的等级，如果<code>parent</code>也没有设置等级，则会一直寻找到<code>root</code>，如果我们连<code>root</code>也未设置等级，则<code>root</code>的默认等级为<code>DEBUG</code>，可以从源码<code>ch.qos.logback.classic.LoggerContext</code>中找到。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Logback: the reliable, generic, fast and flexible logging framework.</span></span><br><span class="line"><span class="comment"> * Copyright (C) 1999-2015, QOS.ch. All rights reserved.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This program and the accompanying materials are dual-licensed under</span></span><br><span class="line"><span class="comment"> * either the terms of the Eclipse Public License v1.0 as published by</span></span><br><span class="line"><span class="comment"> * the Eclipse Foundation</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   or (per the licensee&#x27;s choosing)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * under the terms of the GNU Lesser General Public License version 2.1</span></span><br><span class="line"><span class="comment"> * as published by the Free Software Foundation.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> ch.qos.logback.classic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> ch.qos.logback.core.CoreConstants.EVALUATOR_MAP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledFuture;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.ILoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Marker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.classic.spi.LoggerComparator;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.classic.spi.LoggerContextListener;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.classic.spi.LoggerContextVO;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.classic.spi.TurboFilterList;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.classic.turbo.TurboFilter;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.classic.util.LoggerNameUtil;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.core.ContextBase;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.core.boolex.EventEvaluator;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.core.spi.FilterReply;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.core.spi.LifeCycle;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.core.status.StatusListener;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.core.status.StatusManager;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.core.status.WarnStatus;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * LoggerContext glues many of the logback-classic components together. In</span></span><br><span class="line"><span class="comment"> * principle, every logback-classic component instance is attached either</span></span><br><span class="line"><span class="comment"> * directly or indirectly to a LoggerContext instance. Just as importantly</span></span><br><span class="line"><span class="comment"> * LoggerContext implements the &#123;<span class="doctag">@link</span> ILoggerFactory&#125; acting as the</span></span><br><span class="line"><span class="comment"> * manufacturing source of &#123;<span class="doctag">@link</span> Logger&#125; instances.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ceki Gulcu</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggerContext</span> <span class="keyword">extends</span> <span class="title">ContextBase</span> <span class="keyword">implements</span> <span class="title">ILoggerFactory</span>, <span class="title">LifeCycle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Default setting of packaging data in stack traces */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> DEFAULT_PACKAGING_DATA = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Logger root;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> noAppenderWarning = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">private</span> List&lt;LoggerContextListener&gt; loggerContextListenerList = <span class="keyword">new</span> ArrayList&lt;LoggerContextListener&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Logger&gt; loggerCache;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LoggerContextVO loggerContextRemoteView;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TurboFilterList turboFilterList = <span class="keyword">new</span> TurboFilterList();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> packagingDataEnabled = DEFAULT_PACKAGING_DATA;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxCallerDataDepth = ClassicConstants.DEFAULT_MAX_CALLEDER_DATA_DEPTH;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> resetCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; frameworkPackages;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoggerContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.loggerCache = <span class="keyword">new</span> ConcurrentHashMap&lt;String, Logger&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.loggerContextRemoteView = <span class="keyword">new</span> LoggerContextVO(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.root = <span class="keyword">new</span> Logger(Logger.ROOT_LOGGER_NAME, <span class="keyword">null</span>, <span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.root.setLevel(Level.DEBUG);</span><br><span class="line">        loggerCache.put(Logger.ROOT_LOGGER_NAME, root);</span><br><span class="line">        initEvaluatorMap();</span><br><span class="line">        size = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">this</span>.frameworkPackages = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    。。。</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从源码中，我们可以看到，在创建<code>LoggerContext</code>的时候会先创建一个<code>loggerCache</code>用来缓存我们所有的<code>logger</code>，同时还会默认创建一个<code>root logger</code>，设置为<code>debug</code>等级后放入缓存中。</p>
<p>关于日志等级继承，我们可以从源码<code>ch.qos.logback.classic.Logger</code>中找到对应的答案，同时也可以从官网中得到详细的介绍。</p>
<ul>
<li><a href="https://logback.qos.ch/manual/architecture.html" title="日志等级继承">日志等级继承</a></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Logback: the reliable, generic, fast and flexible logging framework.</span></span><br><span class="line"><span class="comment"> * Copyright (C) 1999-2015, QOS.ch. All rights reserved.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This program and the accompanying materials are dual-licensed under</span></span><br><span class="line"><span class="comment"> * either the terms of the Eclipse Public License v1.0 as published by</span></span><br><span class="line"><span class="comment"> * the Eclipse Foundation</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   or (per the licensee&#x27;s choosing)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * under the terms of the GNU Lesser General Public License version 2.1</span></span><br><span class="line"><span class="comment"> * as published by the Free Software Foundation.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> ch.qos.logback.classic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ObjectStreamException;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CopyOnWriteArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Marker;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.spi.LocationAwareLogger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.classic.spi.ILoggingEvent;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.classic.spi.LoggingEvent;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.classic.util.LoggerNameUtil;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.core.Appender;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.core.CoreConstants;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.core.spi.AppenderAttachable;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.core.spi.AppenderAttachableImpl;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.core.spi.FilterReply;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> <span class="keyword">implements</span> <span class="title">org</span>.<span class="title">slf4j</span>.<span class="title">Logger</span>, <span class="title">LocationAwareLogger</span>, <span class="title">AppenderAttachable</span>&lt;<span class="title">ILoggingEvent</span>&gt;, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">5454405123156820674L</span>; <span class="comment">// 8745934908040027998L;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The fully qualified name of this class. Used in gathering caller</span></span><br><span class="line"><span class="comment">     * information.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FQCN = ch.qos.logback.classic.Logger.class.getName();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The name of this logger</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The assigned levelInt of this logger. Can be null.</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">private</span> Level level;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The effective levelInt is the assigned levelInt and if null, a levelInt is</span></span><br><span class="line">    <span class="comment">// inherited form a parent.</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">private</span> <span class="keyword">int</span> effectiveLevelInt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The parent of this category. All categories have at least one ancestor</span></span><br><span class="line"><span class="comment">     * which is the root category.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">private</span> Logger parent;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The children of this logger. A logger may have zero or more children.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">private</span> List&lt;Logger&gt; childrenList;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * It is assumed that once the &#x27;aai&#x27; variable is set to a non-null value, it</span></span><br><span class="line"><span class="comment">     * will never be reset to null. it is further assumed that only place where</span></span><br><span class="line"><span class="comment">     * the &#x27;aai&#x27;ariable is set is within the addAppender method. This method is</span></span><br><span class="line"><span class="comment">     * synchronized on &#x27;this&#x27; (Logger) protecting against simultaneous</span></span><br><span class="line"><span class="comment">     * re-configuration of this logger (a very unlikely scenario).</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * It is further assumed that the AppenderAttachableImpl is responsible for</span></span><br><span class="line"><span class="comment">     * its internal synchronization and thread safety. Thus, we can get away with</span></span><br><span class="line"><span class="comment">     * *not* synchronizing on the &#x27;aai&#x27; (check null/ read) because</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 1) the &#x27;aai&#x27; variable is immutable once set to non-null</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 2) &#x27;aai&#x27; is getAndSet only within addAppender which is synchronized</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 3) all the other methods check whether &#x27;aai&#x27; is null</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 4) AppenderAttachableImpl is thread safe</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">private</span> AppenderAttachableImpl&lt;ILoggingEvent&gt; aai;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Additivity is set to true by default, that is children inherit the</span></span><br><span class="line"><span class="comment">     * appenders of their ancestors by default. If this variable is set to</span></span><br><span class="line"><span class="comment">     * &lt;code&gt;false&lt;/code&gt; then the appenders located in the ancestors of this</span></span><br><span class="line"><span class="comment">     * logger will not be used. However, the children of this logger will inherit</span></span><br><span class="line"><span class="comment">     * its appenders, unless the children have their additivity flag set to</span></span><br><span class="line"><span class="comment">     * &lt;code&gt;false&lt;/code&gt; too. See the user manual for more details.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">private</span> <span class="keyword">boolean</span> additive = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">transient</span> LoggerContext loggerContext;</span><br><span class="line"></span><br><span class="line">    Logger(String name, Logger parent, LoggerContext loggerContext) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.parent = parent;</span><br><span class="line">        <span class="keyword">this</span>.loggerContext = loggerContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setLevel</span><span class="params">(Level newLevel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (level == newLevel) &#123;</span><br><span class="line">            <span class="comment">// nothing to do;</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (newLevel == <span class="keyword">null</span> &amp;&amp; isRootLogger()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;The level of the root logger cannot be set to null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        level = newLevel;</span><br><span class="line">        <span class="keyword">if</span> (newLevel == <span class="keyword">null</span>) &#123;</span><br><span class="line">            effectiveLevelInt = parent.effectiveLevelInt;</span><br><span class="line">            newLevel = parent.getEffectiveLevel();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            effectiveLevelInt = newLevel.levelInt;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (childrenList != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> len = childrenList.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                Logger child = (Logger) childrenList.get(i);</span><br><span class="line">                <span class="comment">// tell child to handle parent levelInt change</span></span><br><span class="line">                child.handleParentLevelChange(effectiveLevelInt);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// inform listeners</span></span><br><span class="line">        loggerContext.fireOnLevelChange(<span class="keyword">this</span>, newLevel);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This method is invoked by parent logger to let this logger know that the</span></span><br><span class="line"><span class="comment">     * prent&#x27;s levelInt changed.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> newParentLevelInt</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">handleParentLevelChange</span><span class="params">(<span class="keyword">int</span> newParentLevelInt)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// changes in the parent levelInt affect children only if their levelInt is</span></span><br><span class="line">        <span class="comment">// null</span></span><br><span class="line">        <span class="keyword">if</span> (level == <span class="keyword">null</span>) &#123;</span><br><span class="line">            effectiveLevelInt = newParentLevelInt;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// propagate the parent levelInt change to this logger&#x27;s children</span></span><br><span class="line">            <span class="keyword">if</span> (childrenList != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> len = childrenList.size();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                    Logger child = (Logger) childrenList.get(i);</span><br><span class="line">                    child.handleParentLevelChange(newParentLevelInt);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    。。。</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例一：</p>
<table>
<thead>
<tr>
<th align="left">Logger name</th>
<th align="center">Assigned level</th>
<th align="center">Effective level</th>
</tr>
</thead>
<tbody><tr>
<td align="left">root</td>
<td align="center">DEBUG</td>
<td align="center">DEBUG</td>
</tr>
<tr>
<td align="left">x</td>
<td align="center">none</td>
<td align="center">DEBUG</td>
</tr>
<tr>
<td align="left">x.y</td>
<td align="center">none</td>
<td align="center">DEBUG</td>
</tr>
<tr>
<td align="left">x.y.z</td>
<td align="center">none</td>
<td align="center">DEBUG</td>
</tr>
</tbody></table>
<p>示例二：</p>
<table>
<thead>
<tr>
<th align="left">Logger name</th>
<th align="center">Assigned level</th>
<th align="center">Effective level</th>
</tr>
</thead>
<tbody><tr>
<td align="left">root</td>
<td align="center">ERROR</td>
<td align="center">ERROR</td>
</tr>
<tr>
<td align="left">x</td>
<td align="center">INFO</td>
<td align="center">INFO</td>
</tr>
<tr>
<td align="left">x.y</td>
<td align="center">DEBUG</td>
<td align="center">DEBUG</td>
</tr>
<tr>
<td align="left">x.y.z</td>
<td align="center">WARN</td>
<td align="center">WARN</td>
</tr>
</tbody></table>
<p>示例三：</p>
<table>
<thead>
<tr>
<th align="left">Logger name</th>
<th align="center">Assigned level</th>
<th align="center">Effective level</th>
</tr>
</thead>
<tbody><tr>
<td align="left">root</td>
<td align="center">DEBUG</td>
<td align="center">DEBUG</td>
</tr>
<tr>
<td align="left">x</td>
<td align="center">INFO</td>
<td align="center">INFO</td>
</tr>
<tr>
<td align="left">x.y</td>
<td align="center">none</td>
<td align="center">INFO</td>
</tr>
<tr>
<td align="left">x.y.z</td>
<td align="center">ERROR</td>
<td align="center">ERROR</td>
</tr>
</tbody></table>
<p>示例四：</p>
<table>
<thead>
<tr>
<th align="left">Logger name</th>
<th align="center">Assigned level</th>
<th align="center">Effective level</th>
</tr>
</thead>
<tbody><tr>
<td align="left">root</td>
<td align="center">DEBUG</td>
<td align="center">DEBUG</td>
</tr>
<tr>
<td align="left">x</td>
<td align="center">INFO</td>
<td align="center">INFO</td>
</tr>
<tr>
<td align="left">x.y</td>
<td align="center">none</td>
<td align="center">INFO</td>
</tr>
<tr>
<td align="left">x.y.z</td>
<td align="center">none</td>
<td align="center">INFO</td>
</tr>
</tbody></table>
<h3 id="自动重载配置（Automatically-reloading-configuration-file-upon-modification）"><a href="#自动重载配置（Automatically-reloading-configuration-file-upon-modification）" class="headerlink" title="自动重载配置（Automatically reloading configuration file upon modification）"></a>自动重载配置（Automatically reloading configuration file upon modification）</h3><p><code>logback</code>可以在配置文件发生变化的时候重新装载配置，当我们配置了<code>scan</code>与<code>scanPeriod</code>后，<code>logback</code>会启动定时任务来扫描配置文件变化。<code>scanPeriod</code>默认为<code>1 minute</code>，支持的单位包括<code>milliseconds, seconds, minutes or hours</code>，当我们没有配置任何单位时，会默认为<code>milliseconds</code>。在官网中我们可以查看到很多有用的信息。</p>
<ul>
<li><a href="https://logback.qos.ch/manual/configuration.html" title="自动重载配置">自动重载配置</a></li>
</ul>
<p>具体的实现我们可以在<code>ch.qos.logback.classic.joran.action.ConfigurationAction#processScanAttrib</code>与<code>ch.qos.logback.classic.joran.ReconfigureOnChangeTask</code>中找到。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Logback: the reliable, generic, fast and flexible logging framework.</span></span><br><span class="line"><span class="comment"> * Copyright (C) 1999-2015, QOS.ch. All rights reserved.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This program and the accompanying materials are dual-licensed under</span></span><br><span class="line"><span class="comment"> * either the terms of the Eclipse Public License v1.0 as published by</span></span><br><span class="line"><span class="comment"> * the Eclipse Foundation</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   or (per the licensee&#x27;s choosing)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * under the terms of the GNU Lesser General Public License version 2.1</span></span><br><span class="line"><span class="comment"> * as published by the Free Software Foundation.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> ch.qos.logback.classic.joran.action;</span><br><span class="line"></span><br><span class="line">。。。</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigurationAction</span> <span class="keyword">extends</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String INTERNAL_DEBUG_ATTR = <span class="string">&quot;debug&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String PACKAGING_DATA_ATTR = <span class="string">&quot;packagingData&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String SCAN_ATTR = <span class="string">&quot;scan&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String SCAN_PERIOD_ATTR = <span class="string">&quot;scanPeriod&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String DEBUG_SYSTEM_PROPERTY_KEY = <span class="string">&quot;logback.debug&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> threshold = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">begin</span><span class="params">(InterpretationContext ic, String name, Attributes attributes)</span> </span>&#123;</span><br><span class="line">        threshold = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// See LOGBACK-527 (the system property is looked up first. Thus, it overrides</span></span><br><span class="line">        <span class="comment">// the equivalent property in the config file. This reversal of scope priority is justified</span></span><br><span class="line">        <span class="comment">// by the use case: the admin trying to chase rogue config file</span></span><br><span class="line">        String debugAttrib = getSystemProperty(DEBUG_SYSTEM_PROPERTY_KEY);</span><br><span class="line">        <span class="keyword">if</span> (debugAttrib == <span class="keyword">null</span>) &#123;</span><br><span class="line">            debugAttrib = ic.subst(attributes.getValue(INTERNAL_DEBUG_ATTR));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (OptionHelper.isEmpty(debugAttrib) || debugAttrib.equalsIgnoreCase(<span class="string">&quot;false&quot;</span>) || debugAttrib.equalsIgnoreCase(<span class="string">&quot;null&quot;</span>)) &#123;</span><br><span class="line">            addInfo(INTERNAL_DEBUG_ATTR + <span class="string">&quot; attribute not set&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            StatusListenerConfigHelper.addOnConsoleListenerInstance(context, <span class="keyword">new</span> OnConsoleStatusListener());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        processScanAttrib(ic, attributes);</span><br><span class="line"></span><br><span class="line">        LoggerContext lc = (LoggerContext) context;</span><br><span class="line">        <span class="keyword">boolean</span> packagingData = OptionHelper.toBoolean(ic.subst(attributes.getValue(PACKAGING_DATA_ATTR)), LoggerContext.DEFAULT_PACKAGING_DATA);</span><br><span class="line">        lc.setPackagingDataEnabled(packagingData);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (EnvUtil.isGroovyAvailable()) &#123;</span><br><span class="line">            ContextUtil contextUtil = <span class="keyword">new</span> ContextUtil(context);</span><br><span class="line">            contextUtil.addGroovyPackages(lc.getFrameworkPackages());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// the context is turbo filter attachable, so it is pushed on top of the</span></span><br><span class="line">        <span class="comment">// stack</span></span><br><span class="line">        ic.pushObject(getContext());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getSystemProperty</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * LOGBACK-743: accessing a system property in the presence of a SecurityManager (e.g. applet sandbox) can</span></span><br><span class="line"><span class="comment">         * result in a SecurityException.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> System.getProperty(name);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SecurityException ex) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">processScanAttrib</span><span class="params">(InterpretationContext ic, Attributes attributes)</span> </span>&#123;</span><br><span class="line">        String scanAttrib = ic.subst(attributes.getValue(SCAN_ATTR));</span><br><span class="line">        <span class="keyword">if</span> (!OptionHelper.isEmpty(scanAttrib) &amp;&amp; !<span class="string">&quot;false&quot;</span>.equalsIgnoreCase(scanAttrib)) &#123;</span><br><span class="line"></span><br><span class="line">            ScheduledExecutorService scheduledExecutorService = context.getScheduledExecutorService();</span><br><span class="line">            URL mainURL = ConfigurationWatchListUtil.getMainWatchURL(context);</span><br><span class="line">            <span class="keyword">if</span> (mainURL == <span class="keyword">null</span>) &#123;</span><br><span class="line">                addWarn(<span class="string">&quot;Due to missing top level configuration file, reconfiguration on change (configuration file scanning) cannot be done.&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ReconfigureOnChangeTask rocTask = <span class="keyword">new</span> ReconfigureOnChangeTask();</span><br><span class="line">            rocTask.setContext(context);</span><br><span class="line"></span><br><span class="line">            context.putObject(CoreConstants.RECONFIGURE_ON_CHANGE_TASK, rocTask);</span><br><span class="line"></span><br><span class="line">            String scanPeriodAttrib = ic.subst(attributes.getValue(SCAN_PERIOD_ATTR));</span><br><span class="line">            Duration duration = getDuration(scanAttrib, scanPeriodAttrib);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (duration == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            addInfo(<span class="string">&quot;Will scan for changes in [&quot;</span> + mainURL + <span class="string">&quot;] &quot;</span>);</span><br><span class="line">            <span class="comment">// Given that included files are encountered at a later phase, the complete list of files </span></span><br><span class="line">            <span class="comment">// to scan can only be determined when the configuration is loaded in full.</span></span><br><span class="line">            <span class="comment">// However, scan can be active if mainURL is set. Otherwise, when changes are detected</span></span><br><span class="line">            <span class="comment">// the top level config file cannot be accessed.</span></span><br><span class="line">            addInfo(<span class="string">&quot;Setting ReconfigureOnChangeTask scanning period to &quot;</span> + duration);</span><br><span class="line"> </span><br><span class="line">            ScheduledFuture&lt;?&gt; scheduledFuture = scheduledExecutorService.scheduleAtFixedRate(rocTask, duration.getMilliseconds(), duration.getMilliseconds(),</span><br><span class="line">                            TimeUnit.MILLISECONDS);</span><br><span class="line">            context.addScheduledFuture(scheduledFuture);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Duration <span class="title">getDuration</span><span class="params">(String scanAttrib, String scanPeriodAttrib)</span> </span>&#123;</span><br><span class="line">        Duration duration = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!OptionHelper.isEmpty(scanPeriodAttrib)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                duration = Duration.valueOf(scanPeriodAttrib);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException nfe) &#123;</span><br><span class="line">                addError(<span class="string">&quot;Error while converting [&quot;</span> + scanAttrib + <span class="string">&quot;] to long&quot;</span>, nfe);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> duration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">end</span><span class="params">(InterpretationContext ec, String name)</span> </span>&#123;</span><br><span class="line">        addInfo(<span class="string">&quot;End of configuration.&quot;</span>);</span><br><span class="line">        ec.popObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>文中我们只使用了<code>logback</code>的最简单的功能，<code>logback</code>除了能将日志记录到<code>console</code>和文件外，还能将日志记录到数据库等。</p>
]]></content>
      <categories>
        <category>java</category>
        <category>日志组件</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>日志组件</tag>
        <tag>Logback</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud Gateway 请求处理</title>
    <url>/2022/04/04/scg2/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Spirng Cloud Gateway作为一款优秀的网关，相信大家在开中都或多或少的接触了解过。我们知道怎么去配置使用它的<code>RoutePredicateFactory</code>、<code>GatewayFilterFactory</code>、<code>GlobalFilter</code>，通过这些功能，我们可以进行请求的路由、限流与熔断等。但是当用户发起一个请求后，请求在网关内部是怎么流转的呢，网关又对请求做了哪些操作呢？本篇将对Spring Cloud Gateway中的源码进行分析，看看请求是如果经过网关的。</p>
<p>Spring官网</p>
<ul>
<li><a href="https://spring.io/" title="Spring官网">Spring官网</a></li>
<li><a href="https://spring.io/projects/spring-cloud-gateway" title="Spring Cloud Gateway官网">Spring Cloud Gateway官网</a></li>
</ul>
<p>系列相关文章：</p>
<ul>
<li><a href="/2022/03/28/scg1/" title="Spring Cloud Gateway 简单使用">Spring Cloud Gateway 简单使用</a></li>
<li><a href="/2022/04/04/scg2/" title="Spring Cloud Gateway 请求处理">Spring Cloud Gateway 请求处理</a></li>
</ul>
<span id="more"></span>

<h2 id="是如何处理请求的"><a href="#是如何处理请求的" class="headerlink" title="是如何处理请求的"></a>是如何处理请求的</h2><p>我们知道Spring Cloud Gateway采用的Reactive响应式编程。在之前我们一直使用<code>Web Servlet</code>，最具代表的就是<code>Spring MVC</code>。所有的<code>Web Servlet</code>框架底层都是基于<code>Servlet API</code>来实现的，在<code>Spring MVC</code>中的核心是<code>DispatcherServlet</code><br>。</p>
<p><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc" title="Web Servlet">Web Servlet</a></p>
<blockquote>
<p>Spring MVC, as many other web frameworks, is designed around the front controller pattern where a central Servlet, the DispatcherServlet, provides a shared algorithm for request processing, while actual work is performed by configurable delegate components. This model is flexible and supports diverse workflows.</p>
</blockquote>
<p>除了<code>Web Servlet</code>，还诞生了<code>Web Reactive</code>。<code>Web Reactive</code>底层是基于<code>Reactive Streams API</code>，可以参考 <a href="https://www.reactive-streams.org/" title="Reactive Streams API">Reactive Streams API</a>。在Spring的体系中，实现<code>Web Reactive</code>的主要是 <code>Spring WebFlux</code>。同样，<code>Spring WebFlux</code>与 <code>Spring MVC</code>类似，都是采用了环绕前置控制器的模式，其核心是 <code>WebHandler</code>，主要实现是由 <code>DispatcherHandler</code> 来完成的。</p>
<p><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web-reactive.html#webflux" title="Web Reactive">Web Reactive</a></p>
<blockquote>
<p>Spring WebFlux, similarly to Spring MVC, is designed around the front controller pattern, where a central WebHandler, the DispatcherHandler, provides a shared algorithm for request processing, while actual work is performed by configurable, delegate components. This model is flexible and supports diverse workflows.</p>
</blockquote>
<h3 id="流转图"><a href="#流转图" class="headerlink" title="流转图"></a>流转图</h3><p><img src="/2022/04/04/scg2/102.png" alt="Spring Cloud Gateway Diagram" title="Spring Cloud Gateway Diagram"> </p>
<blockquote>
<p>图片来源于网络</p>
</blockquote>
<p>从图中，我们可以看到请求的整个流转，基于上图中的启发与实际的源码阅读，我总结了如一下张图。</p>
<p><img src="/2022/04/04/scg2/103.png" alt="Spring Cloud Gateway" title="Spring Cloud Gateway"> </p>
<h3 id="Netty监听"><a href="#Netty监听" class="headerlink" title="Netty监听"></a>Netty监听</h3><p>我们知道，Spring Cloud Gateway采用的Web Reactive，其底层是基于Netty来实现的。<code>HttpServerHandle#onStateChange</code>来监听<code>HttpServerState.REQUEST_RECEIVED</code>并进行相应的处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reactor.netty.http.server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpServer</span> <span class="keyword">extends</span> <span class="title">ServerTransport</span>&lt;<span class="title">HttpServer</span>, <span class="title">HttpServerConfig</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpServerHandle</span> <span class="keyword">implements</span> <span class="title">ConnectionObserver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="meta">@SuppressWarnings(&quot;FutureReturnValueIgnored&quot;)</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStateChange</span><span class="params">(Connection connection, State newState)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">if</span> (newState == HttpServerState.REQUEST_RECEIVED) &#123; <span class="comment">// @1</span></span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					<span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">						log.debug(format(connection.channel(), <span class="string">&quot;Handler is being applied: &#123;&#125;&quot;</span>), handler);</span><br><span class="line">					&#125;</span><br><span class="line">					HttpServerOperations ops = (HttpServerOperations) connection;</span><br><span class="line">					Mono&lt;Void&gt; mono = Mono.fromDirect(handler.apply(ops, ops)); <span class="comment">// @2</span></span><br><span class="line">					<span class="keyword">if</span> (ops.mapHandle != <span class="keyword">null</span>) &#123;</span><br><span class="line">						mono = ops.mapHandle.apply(mono, connection); <span class="comment">// @3</span></span><br><span class="line">					&#125;</span><br><span class="line">					mono.subscribe(ops.disposeSubscriber()); <span class="comment">// @4</span></span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">					log.error(format(connection.channel(), <span class="string">&quot;&quot;</span>), t);</span><br><span class="line">					<span class="comment">//&quot;FutureReturnValueIgnored&quot; this is deliberate</span></span><br><span class="line">					connection.channel()</span><br><span class="line">					          .close();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><code>@1</code>判断状态是否是 <code>REQUEST_RECEIVED</code>，如是要是接收到消息，再进行下一步处理。<blockquote>
<p>状态：</p>
<ul>
<li><p>CONNECTED = ReactorNetty.CONNECTED：Propagated when a connection has been established and is available</p>
</li>
<li><p>CONFIGURED = ReactorNetty.CONFIGURED：Propagated when a connection is bound to a channelOperation and ready for user interaction</p>
</li>
<li><p>ACQUIRED = ReactorNetty.ACQUIRED：Propagated when a connection has been reused / acquired</p>
</li>
<li><p>RELEASED = ReactorNetty.RELEASED：ropagated when a connection has been released but not fully closed</p>
</li>
<li><p>DISCONNECTING = ReactorNetty.DISCONNECTING：Propagated when a connection is being fully closed</p>
</li>
</ul>
</blockquote>
</li>
<li><code>@2</code>handler处理</li>
<li><code>@3</code>mapHandle处理</li>
<li><code>@4</code>增加DisposeSubscriber</li>
</ol>
<h3 id="ReactorHttpHandlerAdapter"><a href="#ReactorHttpHandlerAdapter" class="headerlink" title="ReactorHttpHandlerAdapter"></a>ReactorHttpHandlerAdapter</h3><p>在Netty Server监听到<code>REQUEST_RECEIVED</code>状态变化后，会调用 <code>ReactorHttpHandlerAdapter#apply</code>来处理请求。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.http.server.reactive;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReactorHttpHandlerAdapter</span> <span class="keyword">implements</span> <span class="title">BiFunction</span>&lt;<span class="title">HttpServerRequest</span>, <span class="title">HttpServerResponse</span>, <span class="title">Mono</span>&lt;<span class="title">Void</span>&gt;&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">apply</span><span class="params">(HttpServerRequest reactorRequest, HttpServerResponse reactorResponse)</span> </span>&#123;</span><br><span class="line">		NettyDataBufferFactory bufferFactory = <span class="keyword">new</span> NettyDataBufferFactory(reactorResponse.alloc());</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			ReactorServerHttpRequest request = <span class="keyword">new</span> ReactorServerHttpRequest(reactorRequest, bufferFactory); <span class="comment">// @1</span></span><br><span class="line">			ServerHttpResponse response = <span class="keyword">new</span> ReactorServerHttpResponse(reactorResponse, bufferFactory); <span class="comment">// @2</span></span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (request.getMethod() == HttpMethod.HEAD) &#123;</span><br><span class="line">				response = <span class="keyword">new</span> HttpHeadResponseDecorator(response);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.httpHandler.handle(request, response) <span class="comment">// @3</span></span><br><span class="line">					.doOnError(ex -&gt; logger.trace(request.getLogPrefix() + <span class="string">&quot;Failed to complete: &quot;</span> + ex.getMessage()))</span><br><span class="line">					.doOnSuccess(aVoid -&gt; logger.trace(request.getLogPrefix() + <span class="string">&quot;Handling completed&quot;</span>));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (URISyntaxException ex) &#123;</span><br><span class="line">			<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">				logger.debug(<span class="string">&quot;Failed to get request URI: &quot;</span> + ex.getMessage());</span><br><span class="line">			&#125;</span><br><span class="line">			reactorResponse.status(HttpResponseStatus.BAD_REQUEST);</span><br><span class="line">			<span class="keyword">return</span> Mono.empty();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><code>@1</code>将HttpServerRequest封装成ReactorServerHttpRequest</li>
<li><code>@2</code>将HttpServerResponse封装成ReactorServerHttpResponse</li>
<li><code>@3</code>调用后续的Hadler进行处理</li>
</ol>
<h3 id="HttpWebHandlerAdapter"><a href="#HttpWebHandlerAdapter" class="headerlink" title="HttpWebHandlerAdapter"></a>HttpWebHandlerAdapter</h3><p>在上一个步骤中，<code>ReactorHttpHandlerAdapter</code>已经对 <code>Request</code> 与 <code>Response</code> 进行了封装，然后会调用 <code>HttpWebHandlerAdapter</code> 继续来处理请求。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.web.server.adapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpWebHandlerAdapter</span> <span class="keyword">extends</span> <span class="title">WebHandlerDecorator</span> <span class="keyword">implements</span> <span class="title">HttpHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">handle</span><span class="params">(ServerHttpRequest request, ServerHttpResponse response)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.forwardedHeaderTransformer != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				request = <span class="keyword">this</span>.forwardedHeaderTransformer.apply(request); <span class="comment">// @1</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">				<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">					logger.debug(<span class="string">&quot;Failed to apply forwarded headers to &quot;</span> + formatRequest(request), ex);</span><br><span class="line">				&#125;</span><br><span class="line">				response.setStatusCode(HttpStatus.BAD_REQUEST); <span class="comment">// @2</span></span><br><span class="line">				<span class="keyword">return</span> response.setComplete(); </span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		ServerWebExchange exchange = createExchange(request, response); <span class="comment">// @3</span></span><br><span class="line"></span><br><span class="line">		LogFormatUtils.traceDebug(logger, traceOn -&gt;</span><br><span class="line">				exchange.getLogPrefix() + formatRequest(exchange.getRequest()) +</span><br><span class="line">						(traceOn ? <span class="string">&quot;, headers=&quot;</span> + formatHeaders(exchange.getRequest().getHeaders()) : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> getDelegate().handle(exchange) <span class="comment">// @4</span></span><br><span class="line">				.doOnSuccess(aVoid -&gt; logResponse(exchange)) <span class="comment">// @5</span></span><br><span class="line">				.onErrorResume(ex -&gt; handleUnresolvedError(exchange, ex)) <span class="comment">// @6</span></span><br><span class="line">				.then(Mono.defer(response::setComplete)); <span class="comment">// @7</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><code>@1</code>如果需要重定向，对 <code>Request</code> 进行重定向处理</li>
<li><code>@2</code>如果处理重定向失败，则设置 <code>Status Code</code> 然后返回</li>
<li><code>@3</code>封装 <code>Request</code> 与 <code>Response</code> 为 <code>ServerWebExchange</code>，这也是为什么我们在后续的一些GatewayFilter中，我们使用的参数是 <code>ServerWebExchange</code></li>
<li><code>@4</code>先获取委托Handler，然后通过委托Handler进行处理</li>
<li><code>@5</code>如果成功，记录成功日志</li>
<li><code>@6</code>错误处理</li>
<li><code>@7</code>设置请求完成</li>
</ol>
<h3 id="DispatcherHandler"><a href="#DispatcherHandler" class="headerlink" title="DispatcherHandler"></a>DispatcherHandler</h3><p>在上一步骤中，我们可以看到调用了 <code>getDelegate()</code> 来获取委托 Handler。通过debug不难发现，这里获取到的委托处理类正是我们的核心 <code>DispatcherHandler</code>。</p>
<p>在 <code>DispatcherHandler</code> 有三个重要的属性 <code>private List&lt;HandlerMapping&gt; handlerMappings</code>、<code>private List&lt;HandlerAdapter&gt; handlerAdapters</code>、<code>private List&lt;HandlerResultHandler&gt; resultHandlers</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.web.reactive;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DispatcherHandler</span> <span class="keyword">implements</span> <span class="title">WebHandler</span>, <span class="title">PreFlightRequestHandler</span>, <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="keyword">private</span> List&lt;HandlerMapping&gt; handlerMappings; <span class="comment">// @1</span></span><br><span class="line"></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="keyword">private</span> List&lt;HandlerAdapter&gt; handlerAdapters; <span class="comment">// @2</span></span><br><span class="line"></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="keyword">private</span> List&lt;HandlerResultHandler&gt; resultHandlers; <span class="comment">// @3</span></span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">handle</span><span class="params">(ServerWebExchange exchange)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.handlerMappings == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> createNotFoundError(); <span class="comment">// @4</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (CorsUtils.isPreFlightRequest(exchange.getRequest())) &#123;</span><br><span class="line">			<span class="keyword">return</span> handlePreFlight(exchange); <span class="comment">// @5</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> Flux.fromIterable(<span class="keyword">this</span>.handlerMappings)</span><br><span class="line">				.concatMap(mapping -&gt; mapping.getHandler(exchange)) <span class="comment">// @6</span></span><br><span class="line">				.next()</span><br><span class="line">				.switchIfEmpty(createNotFoundError()) <span class="comment">// @7</span></span><br><span class="line">				.flatMap(handler -&gt; invokeHandler(exchange, handler)) <span class="comment">// @8</span></span><br><span class="line">				.flatMap(result -&gt; handleResult(exchange, result)); <span class="comment">// @9</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> &lt;R&gt; <span class="function">Mono&lt;R&gt; <span class="title">createNotFoundError</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Mono.defer(() -&gt; &#123;</span><br><span class="line">			Exception ex = <span class="keyword">new</span> ResponseStatusException(HttpStatus.NOT_FOUND, <span class="string">&quot;No matching handler&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span> Mono.error(ex);</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> Mono&lt;HandlerResult&gt; <span class="title">invokeHandler</span><span class="params">(ServerWebExchange exchange, Object handler)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (ObjectUtils.nullSafeEquals(exchange.getResponse().getStatusCode(), HttpStatus.FORBIDDEN)) &#123;</span><br><span class="line">			<span class="keyword">return</span> Mono.empty();  <span class="comment">// CORS rejection</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.handlerAdapters != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span> (HandlerAdapter handlerAdapter : <span class="keyword">this</span>.handlerAdapters) &#123;</span><br><span class="line">				<span class="keyword">if</span> (handlerAdapter.supports(handler)) &#123;</span><br><span class="line">					<span class="keyword">return</span> handlerAdapter.handle(exchange, handler);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> Mono.error(<span class="keyword">new</span> IllegalStateException(<span class="string">&quot;No HandlerAdapter: &quot;</span> + handler));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> Mono&lt;Void&gt; <span class="title">handleResult</span><span class="params">(ServerWebExchange exchange, HandlerResult result)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> getResultHandler(result).handleResult(exchange, result)</span><br><span class="line">				.checkpoint(<span class="string">&quot;Handler &quot;</span> + result.getHandler() + <span class="string">&quot; [DispatcherHandler]&quot;</span>)</span><br><span class="line">				.onErrorResume(ex -&gt;</span><br><span class="line">						result.applyExceptionHandler(ex).flatMap(exResult -&gt; &#123;</span><br><span class="line">							String text = <span class="string">&quot;Exception handler &quot;</span> + exResult.getHandler() +</span><br><span class="line">									<span class="string">&quot;, error=\&quot;&quot;</span> + ex.getMessage() + <span class="string">&quot;\&quot; [DispatcherHandler]&quot;</span>;</span><br><span class="line">							<span class="keyword">return</span> getResultHandler(exResult).handleResult(exchange, exResult).checkpoint(text);</span><br><span class="line">						&#125;));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><code>@1</code>handlerMapping集合，通过源码我们可以看出，在初始化时，<code>handlerMappings</code>会从<code>BeanFactory</code>里面取出所有类型为<code>HandlerMapping</code>的实例，包含不是单例的实例，排序后调用<code>Collections.unmodifiableList</code>创建不可修改集合</li>
<li><code>@2</code>handlerAdapters集合，与<code>handlerMappings</code>大致相同，从<code>BeanFactory</code>里面取出所有类型为<code>HandlerAdapter</code>的实例，然后进行排序，唯一不同的是，<code>handlerAdapters</code>集合提可以修改的</li>
<li><code>@3</code>resultHandlers集合，与<code>handlerAdapters</code>一样，从<code>BeanFactory</code>里面取出所有类型为<code>HandlerResultHandler</code>的实例，然后进行排序</li>
<li><code>@4</code>当<code>handlerMappings</code>未初始化时，网关找不到对应的Handler来继续处理请求，于是会直接返回 <code>404</code></li>
<li><code>@5</code>如果是 <code>PreFlightRequest</code>预检请求，主要是指 <code>CORS</code> 中的 <code>OPTIONS</code> 请求，则遍历所有 <code>handlerMappings</code> 尝试获取 <code>Handler</code>，只要能获取到<code>Handler</code>就返回成功，如果未获取到任何 <code>Handler</code>，则返回 <code>403</code></li>
<li><code>@6</code>遍历所有<code>handlerMappings</code>来尝试获取 <code>Handler</code>，当进行到这里的时候，网关会调用 <code>AbstractHandlerMapping#getHandler</code>来处理请求，继续在 <code>AbstractHandlerMapping#getHandler</code>中会调用 <code>AbstractHandlerMapping#getHandlerInternal</code> 来获取具体的 <code>Handler</code></li>
<li><code>@7</code>如果在<code>handlerMappings</code>未找到合适的 <code>Handler</code>，则返回 <code>404</code></li>
<li><code>@8</code>找到合适的<code>Handler</code>后，会遍历 <code>handlerAdapters</code> 从中找出适配该 <code>Handler</code>的 <code>HandlerAdapter</code>进行处理请求</li>
<li><code>@9</code>当 <code>HandlerAdapter</code> 处理完请求后，会返回 <code>HandlerResult</code>，然后遍历<code>resultHandlers</code>找到适配的<code>HandlerResultHandler</code>进行结果处理</li>
</ol>
<h3 id="HandlerMapping"><a href="#HandlerMapping" class="headerlink" title="HandlerMapping"></a>HandlerMapping</h3><p>在上一节中，我们可以看到请求在 <code>DispatcherHandler</code> 会先从 <code>handlerMappings</code> 选取适配的 <code>Handler</code>，而在选取的时候会调用 <code>AbstractHandlerMapping#getHandlerInternal</code>进行选取。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.web.reactive.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractHandlerMapping</span> <span class="keyword">extends</span> <span class="title">ApplicationObjectSupport</span></span></span><br><span class="line"><span class="class">		<span class="keyword">implements</span> <span class="title">HandlerMapping</span>, <span class="title">Ordered</span>, <span class="title">BeanNameAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Mono&lt;Object&gt; <span class="title">getHandler</span><span class="params">(ServerWebExchange exchange)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> getHandlerInternal(exchange).map(handler -&gt; &#123;</span><br><span class="line">			<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">				logger.debug(exchange.getLogPrefix() + <span class="string">&quot;Mapped to &quot;</span> + handler);</span><br><span class="line">			&#125;</span><br><span class="line">			ServerHttpRequest request = exchange.getRequest();</span><br><span class="line">			<span class="keyword">if</span> (hasCorsConfigurationSource(handler) || CorsUtils.isPreFlightRequest(request)) &#123;</span><br><span class="line">				CorsConfiguration config = (<span class="keyword">this</span>.corsConfigurationSource != <span class="keyword">null</span> ?</span><br><span class="line">						<span class="keyword">this</span>.corsConfigurationSource.getCorsConfiguration(exchange) : <span class="keyword">null</span>);</span><br><span class="line">				CorsConfiguration handlerConfig = getCorsConfiguration(handler, exchange);</span><br><span class="line">				config = (config != <span class="keyword">null</span> ? config.combine(handlerConfig) : handlerConfig);</span><br><span class="line">				<span class="keyword">if</span> (config != <span class="keyword">null</span>) &#123;</span><br><span class="line">					config.validateAllowCredentials();</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (!<span class="keyword">this</span>.corsProcessor.process(config, exchange) || CorsUtils.isPreFlightRequest(request)) &#123;</span><br><span class="line">					<span class="keyword">return</span> NO_OP_HANDLER;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> handler;</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过调试发现，<code>handlerMappings</code> 集合中包含如下 <code>HandlerMapping</code>：</p>
<ul>
<li>RouterFunctionMapping</li>
<li>RequestMappingHandlerMapping</li>
<li>RoutePredicateHandlerMapping</li>
<li>SimpleUrlhandlerMapping</li>
</ul>
<p>这里我们就不一一讲解每个 <code>HandlerMapping</code>，感兴趣的同学大家可以自己去看一下源代码。在网关中，我们用到的是 <code>RoutePredicateHandlerMapping</code>，我们着重看一下 <code>RoutePredicateHandlerMapping</code>的源代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.cloud.gateway.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoutePredicateHandlerMapping</span> <span class="keyword">extends</span> <span class="title">AbstractHandlerMapping</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> FilteringWebHandler webHandler;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> RouteLocator routeLocator;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> Mono&lt;?&gt; getHandlerInternal(ServerWebExchange exchange) &#123;</span><br><span class="line">		<span class="comment">// don&#x27;t handle requests on management port if set and different than server port</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.managementPortType == DIFFERENT &amp;&amp; <span class="keyword">this</span>.managementPort != <span class="keyword">null</span></span><br><span class="line">				&amp;&amp; exchange.getRequest().getURI().getPort() == <span class="keyword">this</span>.managementPort) &#123;</span><br><span class="line">			<span class="keyword">return</span> Mono.empty();</span><br><span class="line">		&#125;</span><br><span class="line">		exchange.getAttributes().put(GATEWAY_HANDLER_MAPPER_ATTR, getSimpleName());</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> lookupRoute(exchange)</span><br><span class="line">				<span class="comment">// .log(&quot;route-predicate-handler-mapping&quot;, Level.FINER) //name this</span></span><br><span class="line">				.flatMap((Function&lt;Route, Mono&lt;?&gt;&gt;) r -&gt; &#123;</span><br><span class="line">					exchange.getAttributes().remove(GATEWAY_PREDICATE_ROUTE_ATTR);</span><br><span class="line">					<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">						logger.debug(<span class="string">&quot;Mapping [&quot;</span> + getExchangeDesc(exchange) + <span class="string">&quot;] to &quot;</span> + r);</span><br><span class="line">					&#125;</span><br><span class="line"></span><br><span class="line">					exchange.getAttributes().put(GATEWAY_ROUTE_ATTR, r);</span><br><span class="line">					<span class="keyword">return</span> Mono.just(webHandler);</span><br><span class="line">				&#125;).switchIfEmpty(Mono.empty().then(Mono.fromRunnable(() -&gt; &#123;</span><br><span class="line">					exchange.getAttributes().remove(GATEWAY_PREDICATE_ROUTE_ATTR);</span><br><span class="line">					<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">						logger.trace(<span class="string">&quot;No RouteDefinition found for [&quot;</span> + getExchangeDesc(exchange) + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;)));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> Mono&lt;Route&gt; <span class="title">lookupRoute</span><span class="params">(ServerWebExchange exchange)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.routeLocator.getRoutes()</span><br><span class="line">				<span class="comment">// individually filter routes so that filterWhen error delaying is not a</span></span><br><span class="line">				<span class="comment">// problem</span></span><br><span class="line">				.concatMap(route -&gt; Mono.just(route).filterWhen(r -&gt; &#123;</span><br><span class="line">					<span class="comment">// add the current route we are testing</span></span><br><span class="line">					exchange.getAttributes().put(GATEWAY_PREDICATE_ROUTE_ATTR, r.getId());</span><br><span class="line">					<span class="keyword">return</span> r.getPredicate().apply(exchange);</span><br><span class="line">				&#125;)</span><br><span class="line">						<span class="comment">// instead of immediately stopping main flux due to error, log and</span></span><br><span class="line">						<span class="comment">// swallow it</span></span><br><span class="line">						.doOnError(e -&gt; logger.error(<span class="string">&quot;Error applying predicate for route: &quot;</span> + route.getId(), e))</span><br><span class="line">						.onErrorResume(e -&gt; Mono.empty()))</span><br><span class="line">				<span class="comment">// .defaultIfEmpty() put a static Route not found</span></span><br><span class="line">				<span class="comment">// or .switchIfEmpty()</span></span><br><span class="line">				<span class="comment">// .switchIfEmpty(Mono.&lt;Route&gt;empty().log(&quot;noroute&quot;))</span></span><br><span class="line">				.next()</span><br><span class="line">				<span class="comment">// <span class="doctag">TODO:</span> error handling</span></span><br><span class="line">				.map(route -&gt; &#123;</span><br><span class="line">					<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">						logger.debug(<span class="string">&quot;Route matched: &quot;</span> + route.getId());</span><br><span class="line">					&#125;</span><br><span class="line">					validateRoute(route, exchange);</span><br><span class="line">					<span class="keyword">return</span> route;</span><br><span class="line">				&#125;);</span><br><span class="line"></span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * <span class="doctag">TODO:</span> trace logging if (logger.isTraceEnabled()) &#123;</span></span><br><span class="line"><span class="comment">		 * logger.trace(&quot;RouteDefinition did not match: &quot; + routeDefinition.getId()); &#125;</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从源码中，我们可以看到很多熟悉的代码，<code>lookupRoute</code> 会根据我们的请求去获取相应的路由信息。而所有的路由信息是通过 <code>RouteLocator#getRoutes</code> 去获取的，而具体实现是在 <code>CachingRouteLocator</code>中。我们配置的路由信息是在 <code>RouteDefinitionLocator</code> 中， <code>RouteDefinitionLocator</code> 会在 <code>RouteDefinitionRouteLocator</code> 中将我们的 <code>RouteDefinition</code> 转化为 <code>Route</code>，<code>CompositeRouteLocator</code> 会收集 <code>RouteDefinitionRouteLocator</code> 与 <code>CachingRouteLocator</code> 中的路由信息，最后所有的路由信息都会缓存到 <code>CachingRouteLocator</code> 中。网关在获取路由信息的时候，会调用委托类 <code>CompositeRouteLocator</code> 到 <code>CachingRouteLocator</code> 中去获取路由信息。具体的可以看下面的图：</p>
<p><img src="/2022/04/04/scg2/104.png" alt="路由信息" title="路由信息"></p>
<h3 id="HandlerAdapter"><a href="#HandlerAdapter" class="headerlink" title="HandlerAdapter"></a>HandlerAdapter</h3><p>在 <code>DispatcherHandler</code> 中，我们可以看到当从 <code>HandlerMapping</code> 中取到适配的 <code>Handler</code> 后，会遍历所有 <code>HandlerAdapter</code> 来对 <code>Handler</code> 进行处理，而 <code>HandlerAdapter</code> 能否对 <code>Handler</code> 进行处理是通过调用 <code>HandlerAdapter#supports</code> 方法来判断的。通过调试发现，<code>handlerAdapters</code> 包含如下 <code>HandlerAdapter</code>：</p>
<ul>
<li><p>WebSockethandlerAdapter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Object handler)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> WebSocketHandler.class.isAssignableFrom(handler.getClass());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>RequestMappingHandlerAdapter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Object handler)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> handler <span class="keyword">instanceof</span> HandlerMethod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>HandlerFunctionAdapter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Object handler)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> handler <span class="keyword">instanceof</span> HandlerFunction;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>SimpleHandlerAdapter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Object handler)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> WebHandler.class.isAssignableFrom(handler.getClass());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>从上面的方法中，我们不难看出，如果是网关路由的话，最后会通过 <code>SimpleHandlerAdapter</code> 来进行处理。 因为在上一步的处理中 <code>RoutePredicateHandlerMapping#getHandlerInternal</code> 方法返回的是一个 <code>WebHandler</code>, 具体实例是 <code>FilteringWebHandler</code></p>
<p>SimpleHandlerAdapter源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.web.reactive.result;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleHandlerAdapter</span> <span class="keyword">implements</span> <span class="title">HandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Object handler)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> WebHandler.class.isAssignableFrom(handler.getClass());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Mono&lt;HandlerResult&gt; <span class="title">handle</span><span class="params">(ServerWebExchange exchange, Object handler)</span> </span>&#123;</span><br><span class="line">		WebHandler webHandler = (WebHandler) handler;</span><br><span class="line">		Mono&lt;Void&gt; mono = webHandler.handle(exchange);</span><br><span class="line">		<span class="keyword">return</span> mono.then(Mono.empty());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>FilteringWebHandler源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.cloud.gateway.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilteringWebHandler</span> <span class="keyword">implements</span> <span class="title">WebHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> List&lt;GatewayFilter&gt; globalFilters;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">FilteringWebHandler</span><span class="params">(List&lt;GlobalFilter&gt; globalFilters)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.globalFilters = loadFilters(globalFilters);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;GatewayFilter&gt; <span class="title">loadFilters</span><span class="params">(List&lt;GlobalFilter&gt; filters)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> filters.stream().map(filter -&gt; &#123;</span><br><span class="line">			GatewayFilterAdapter gatewayFilter = <span class="keyword">new</span> GatewayFilterAdapter(filter);</span><br><span class="line">			<span class="keyword">if</span> (filter <span class="keyword">instanceof</span> Ordered) &#123;</span><br><span class="line">				<span class="keyword">int</span> order = ((Ordered) filter).getOrder();</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">new</span> OrderedGatewayFilter(gatewayFilter, order);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> gatewayFilter;</span><br><span class="line">		&#125;).collect(Collectors.toList());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">handle</span><span class="params">(ServerWebExchange exchange)</span> </span>&#123;</span><br><span class="line">		Route route = exchange.getRequiredAttribute(GATEWAY_ROUTE_ATTR); <span class="comment">// @1</span></span><br><span class="line">		List&lt;GatewayFilter&gt; gatewayFilters = route.getFilters(); <span class="comment">// @2</span></span><br><span class="line"></span><br><span class="line">		List&lt;GatewayFilter&gt; combined = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="keyword">this</span>.globalFilters);</span><br><span class="line">		combined.addAll(gatewayFilters); <span class="comment">// @3</span></span><br><span class="line">		<span class="comment">// <span class="doctag">TODO:</span> needed or cached?</span></span><br><span class="line">		AnnotationAwareOrderComparator.sort(combined);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">			logger.debug(<span class="string">&quot;Sorted gatewayFilterFactories: &quot;</span> + combined);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> DefaultGatewayFilterChain(combined).filter(exchange); <span class="comment">// @4</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><code>@1</code>先从 <code>ServerWebExchange</code> 中取出路由信息，而路由信息的放入是在 <code>RoutePredicateHandlerMapping</code> 中进行的</li>
<li><code>@2</code>取出路由信息中的所有 <code>GatewayFilter</code></li>
<li><code>@3</code>在全局的 <code>GlobalFilter</code> 集合中加入路由信息中单独配置的 <code>GatewayFilter</code>，然后对所有的 <code>GatewayFilter</code> 进行排序</li>
<li><code>@4</code>生成 <code>GatewayFilterChain</code>， 遍历集合中的 <code>GatewayFilter</code> 并调用 <code>filter</code> 方法</li>
</ol>
<h3 id="HandlerResultHandler"><a href="#HandlerResultHandler" class="headerlink" title="HandlerResultHandler"></a>HandlerResultHandler</h3><p>在 <code>DispatcherHandler</code> 中，除了 <code>HandlerMapping</code> 与 <code>HandlerAdapter</code>，还有一个重要的集合就是 <code>HandlerResultHandler</code>。我们可以看出，当请求经过所有 <code>HandlerAdapter</code> 的处理后，返回一个 <code>HandlerResult</code>，而 <code>HandlerResultHandler</code> 就是来处理 <code>HandlerResult</code> 的。调试不难发现，<code>resultHandlers</code> 包含如下 <code>HandlerResultHandler</code>：</p>
<ul>
<li>ResponseEntityResultHandler</li>
<li>ServerResponseResultHandler</li>
<li>ResponseBodyResultHandler</li>
<li>ViewResolutionResultHandler</li>
</ul>
<p><code>HandlerResultHandler</code> 就是对请求的结果进行一些处理与煊染，感兴趣的同学可以去查看源码。</p>
<h3 id="重要GlobalFilter"><a href="#重要GlobalFilter" class="headerlink" title="重要GlobalFilter"></a>重要GlobalFilter</h3><p>在 <code>FilteringWebHandler</code> 中，我们可以看到 <code>private final List&lt;GatewayFilter&gt; globalFilters;</code>，<code>globalFilters</code> 是在创建 <code>FilteringWebHandler</code> 的时候通过静态方法 <code>loadFilters(List&lt;GlobalFilter&gt; filters)</code> 生成的。而这 <code>List&lt;GlobalFilter&gt;</code> 是在创建 <code>FilteringWebHandler</code> 中传入的，<code>FilteringWebHandler</code> 是在 <code>GatewayAutoConfiguration</code> 中进行实例化的。</p>
<ul>
<li>NettyRoutingFilter</li>
</ul>
<p><code>NettyRoutingFilter</code> 是真正转发请求的，在这个filter中，会根据路由信息去进行远程服务调用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.cloud.gateway.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyRoutingFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="meta">@SuppressWarnings(&quot;Duplicates&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">		URI requestUrl = exchange.getRequiredAttribute(GATEWAY_REQUEST_URL_ATTR);</span><br><span class="line"></span><br><span class="line">		String scheme = requestUrl.getScheme();</span><br><span class="line">		<span class="keyword">if</span> (isAlreadyRouted(exchange) || (!<span class="string">&quot;http&quot;</span>.equalsIgnoreCase(scheme) &amp;&amp; !<span class="string">&quot;https&quot;</span>.equalsIgnoreCase(scheme))) &#123;</span><br><span class="line">			<span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">		&#125;</span><br><span class="line">		setAlreadyRouted(exchange);</span><br><span class="line"></span><br><span class="line">		ServerHttpRequest request = exchange.getRequest();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">final</span> HttpMethod method = HttpMethod.valueOf(request.getMethodValue());</span><br><span class="line">		<span class="keyword">final</span> String url = requestUrl.toASCIIString();</span><br><span class="line"></span><br><span class="line">		HttpHeaders filtered = filterRequest(getHeadersFilters(), exchange);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">final</span> DefaultHttpHeaders httpHeaders = <span class="keyword">new</span> DefaultHttpHeaders();</span><br><span class="line">		filtered.forEach(httpHeaders::set);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">boolean</span> preserveHost = exchange.getAttributeOrDefault(PRESERVE_HOST_HEADER_ATTRIBUTE, <span class="keyword">false</span>);</span><br><span class="line">		Route route = exchange.getAttribute(GATEWAY_ROUTE_ATTR);</span><br><span class="line"></span><br><span class="line">		Flux&lt;HttpClientResponse&gt; responseFlux = getHttpClient(route, exchange).headers(headers -&gt; &#123;</span><br><span class="line">			headers.add(httpHeaders);</span><br><span class="line">			<span class="comment">// Will either be set below, or later by Netty</span></span><br><span class="line">			headers.remove(HttpHeaders.HOST);</span><br><span class="line">			<span class="keyword">if</span> (preserveHost) &#123;</span><br><span class="line">				String host = request.getHeaders().getFirst(HttpHeaders.HOST);</span><br><span class="line">				headers.add(HttpHeaders.HOST, host);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;).request(method).uri(url).send((req, nettyOutbound) -&gt; &#123;</span><br><span class="line">			<span class="keyword">if</span> (log.isTraceEnabled()) &#123;</span><br><span class="line">				nettyOutbound.withConnection(connection -&gt; log.trace(<span class="string">&quot;outbound route: &quot;</span></span><br><span class="line">						+ connection.channel().id().asShortText() + <span class="string">&quot;, inbound: &quot;</span> + exchange.getLogPrefix()));</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> nettyOutbound.send(request.getBody().map(<span class="keyword">this</span>::getByteBuf));</span><br><span class="line">		&#125;).responseConnection((res, connection) -&gt; &#123;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Defer committing the response until all route filters have run</span></span><br><span class="line">			<span class="comment">// Put client response as ServerWebExchange attribute and write</span></span><br><span class="line">			<span class="comment">// response later NettyWriteResponseFilter</span></span><br><span class="line">			exchange.getAttributes().put(CLIENT_RESPONSE_ATTR, res);</span><br><span class="line">			exchange.getAttributes().put(CLIENT_RESPONSE_CONN_ATTR, connection);</span><br><span class="line"></span><br><span class="line">			ServerHttpResponse response = exchange.getResponse();</span><br><span class="line">			<span class="comment">// put headers and status so filters can modify the response</span></span><br><span class="line">			HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line"></span><br><span class="line">			res.responseHeaders().forEach(entry -&gt; headers.add(entry.getKey(), entry.getValue()));</span><br><span class="line"></span><br><span class="line">			String contentTypeValue = headers.getFirst(HttpHeaders.CONTENT_TYPE);</span><br><span class="line">			<span class="keyword">if</span> (StringUtils.hasLength(contentTypeValue)) &#123;</span><br><span class="line">				exchange.getAttributes().put(ORIGINAL_RESPONSE_CONTENT_TYPE_ATTR, contentTypeValue);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			setResponseStatus(res, response);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// make sure headers filters run after setting status so it is</span></span><br><span class="line">			<span class="comment">// available in response</span></span><br><span class="line">			HttpHeaders filteredResponseHeaders = HttpHeadersFilter.filter(getHeadersFilters(), headers, exchange,</span><br><span class="line">					Type.RESPONSE);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (!filteredResponseHeaders.containsKey(HttpHeaders.TRANSFER_ENCODING)</span><br><span class="line">					&amp;&amp; filteredResponseHeaders.containsKey(HttpHeaders.CONTENT_LENGTH)) &#123;</span><br><span class="line">				<span class="comment">// It is not valid to have both the transfer-encoding header and</span></span><br><span class="line">				<span class="comment">// the content-length header.</span></span><br><span class="line">				<span class="comment">// Remove the transfer-encoding header in the response if the</span></span><br><span class="line">				<span class="comment">// content-length header is present.</span></span><br><span class="line">				response.getHeaders().remove(HttpHeaders.TRANSFER_ENCODING);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			exchange.getAttributes().put(CLIENT_RESPONSE_HEADER_NAMES, filteredResponseHeaders.keySet());</span><br><span class="line"></span><br><span class="line">			response.getHeaders().putAll(filteredResponseHeaders);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">return</span> Mono.just(res);</span><br><span class="line">		&#125;);</span><br><span class="line"></span><br><span class="line">		Duration responseTimeout = getResponseTimeout(route);</span><br><span class="line">		<span class="keyword">if</span> (responseTimeout != <span class="keyword">null</span>) &#123;</span><br><span class="line">			responseFlux = responseFlux</span><br><span class="line">					.timeout(responseTimeout,</span><br><span class="line">							Mono.error(<span class="keyword">new</span> TimeoutException(<span class="string">&quot;Response took longer than timeout: &quot;</span> + responseTimeout)))</span><br><span class="line">					.onErrorMap(TimeoutException.class,</span><br><span class="line">							th -&gt; <span class="keyword">new</span> ResponseStatusException(HttpStatus.GATEWAY_TIMEOUT, th.getMessage(), th));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> responseFlux.then(chain.filter(exchange));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>NettyWriteResponseFilter</li>
</ul>
<p><code>NettyWriteResponseFilter</code> 对远程调用响应进行处理并返回给客户端。<code>NettyWriteResponseFilter</code> 拿到远程调用响应字节流是从 <code>ServerWebExchange</code> 的 <code>CLIENT_RESPONSE_CONN_ATTR</code>属性上获取的，而这个属性是 <code>NettyRoutingFilter</code> 远程调用后将结果设置到 <code>ServerWebExchange</code> 中去的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.cloud.gateway.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyWriteResponseFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// NOTICE: nothing in &quot;pre&quot; filter stage as CLIENT_RESPONSE_CONN_ATTR is not added</span></span><br><span class="line">		<span class="comment">// until the NettyRoutingFilter is run</span></span><br><span class="line">		<span class="comment">// @formatter:off</span></span><br><span class="line">		<span class="keyword">return</span> chain.filter(exchange)</span><br><span class="line">				.doOnError(throwable -&gt; cleanup(exchange))</span><br><span class="line">				.then(Mono.defer(() -&gt; &#123;</span><br><span class="line">					Connection connection = exchange.getAttribute(CLIENT_RESPONSE_CONN_ATTR);</span><br><span class="line"></span><br><span class="line">					<span class="keyword">if</span> (connection == <span class="keyword">null</span>) &#123;</span><br><span class="line">						<span class="keyword">return</span> Mono.empty();</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span> (log.isTraceEnabled()) &#123;</span><br><span class="line">						log.trace(<span class="string">&quot;NettyWriteResponseFilter start inbound: &quot;</span></span><br><span class="line">								+ connection.channel().id().asShortText() + <span class="string">&quot;, outbound: &quot;</span></span><br><span class="line">								+ exchange.getLogPrefix());</span><br><span class="line">					&#125;</span><br><span class="line">					ServerHttpResponse response = exchange.getResponse();</span><br><span class="line"></span><br><span class="line">					<span class="comment">// <span class="doctag">TODO:</span> needed?</span></span><br><span class="line">					<span class="keyword">final</span> Flux&lt;DataBuffer&gt; body = connection</span><br><span class="line">							.inbound()</span><br><span class="line">							.receive()</span><br><span class="line">							.retain()</span><br><span class="line">							.map(byteBuf -&gt; wrap(byteBuf, response));</span><br><span class="line"></span><br><span class="line">					MediaType contentType = <span class="keyword">null</span>;</span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						contentType = response.getHeaders().getContentType();</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">						<span class="keyword">if</span> (log.isTraceEnabled()) &#123;</span><br><span class="line">							log.trace(<span class="string">&quot;invalid media type&quot;</span>, e);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">return</span> (isStreamingMediaType(contentType)</span><br><span class="line">							? response.writeAndFlushWith(body.map(Flux::just))</span><br><span class="line">							: response.writeWith(body));</span><br><span class="line">				&#125;)).doOnCancel(() -&gt; cleanup(exchange));</span><br><span class="line">		<span class="comment">// @formatter:on</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> DataBuffer <span class="title">wrap</span><span class="params">(ByteBuf byteBuf, ServerHttpResponse response)</span> </span>&#123;</span><br><span class="line">		DataBufferFactory bufferFactory = response.bufferFactory();</span><br><span class="line">		<span class="keyword">if</span> (bufferFactory <span class="keyword">instanceof</span> NettyDataBufferFactory) &#123;</span><br><span class="line">			NettyDataBufferFactory factory = (NettyDataBufferFactory) bufferFactory;</span><br><span class="line">			<span class="keyword">return</span> factory.wrap(byteBuf);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// MockServerHttpResponse creates these</span></span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (bufferFactory <span class="keyword">instanceof</span> DefaultDataBufferFactory) &#123;</span><br><span class="line">			DataBuffer buffer = ((DefaultDataBufferFactory) bufferFactory).allocateBuffer(byteBuf.readableBytes());</span><br><span class="line">			buffer.write(byteBuf.nioBuffer());</span><br><span class="line">			byteBuf.release();</span><br><span class="line">			<span class="keyword">return</span> buffer;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Unkown DataBufferFactory type &quot;</span> + bufferFactory.getClass());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>Spring Cloud Gateway是一个非常不错的项目，在Java的语言世界中占有举足轻重的地位。本文只是简单介绍了请求的流转，其中有很多细节并未深入。比如在 <code>NettyRoutingFilter</code> 中进行远程服务请求的时候是如何去获取 <code>connection</code> 的，<code>NettyRoutingFilter</code>为什么必须是最后一个 <code>Filter</code>，如果我们需要重写 <code>Response</code> 流要怎么做，为什么可以这么做…</p>
]]></content>
      <categories>
        <category>java</category>
        <category>spring</category>
        <category>spring cloud</category>
        <category>spring cloud gateway</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>spring</tag>
        <tag>spring cloud</tag>
        <tag>spring cloud gateway</tag>
        <tag>网关组件</tag>
      </tags>
  </entry>
  <entry>
    <title>消息队列RabbitMQ</title>
    <url>/2022/01/22/rabbitmq/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在日常开发中，我们或多或少都会接触和使用消息队列。我们常见的消息队列有<code>RabbitMQ</code>、<code>RocketMQ</code>、<code>ActiveMQ</code>、<code>Kafka</code>、<code>ZeroMQ</code>、<code>MetaMQ</code>等，部分数据库也可实现消息队列的功能，如<code>Redis</code>。</p>
<p>消息队列是分布式应用间交换信息的重要组件，消息队列可驻留在内存或磁盘上, 队列可以存储消息直到它们被应用程序读走。通过消息队列，应用程序可以在不知道彼此位置的情况下独立处理消息，或者在处理消息前不需要等待接收此消息。所以消息队列可以解决应用解耦、异步消息、流量削锋等问题，是实现高性能、高可用、可伸缩和最终一致性架构中不可以或缺的一环。</p>
<p>大家使用得比较多的可能应该是<code>RabbitMQ</code>与<code>Kafka</code>。本文主要记录一些<code>RabbitMQ</code>的使用。引用官网的一句话：</p>
<blockquote>
<p>RabbitMQ is the most widely deployed open source message broker</p>
</blockquote>
<ul>
<li><a href="https://www.rabbitmq.com/" title="RabbitMQ 官网">RabbitMQ 官网</a></li>
</ul>
<p><code>RabbitMQ</code>作为一款优秀的消息中间件，它具有如下特性：</p>
<ul>
<li>Asynchronous Messaging：支持多种消息协议，消息队列，丰富的文档知识，灵活的队列路由与多种消息分发策略</li>
<li>Developer Experience：支持多种语言客户端，包括Java，.NET，PHP，Python，JavaScript，Ruby，Go等</li>
<li>Distributed Deployment：支持集群部署</li>
<li>Enterprise &amp; Cloud Ready：可插件式的认证与授权管理，支持TLS与LDAP，可以非常简单、轻量化的部署到私有云或者公有云上</li>
<li>Tools &amp; Plugins：插件机制，有丰富的工具与插件，同时可以支持我们自己编写自己的插件</li>
<li>Management &amp; Monitoring：丰富的管理界面与监控，支持接口、命令行、界面</li>
</ul>
<p>我们可以从官网链接获取更详细的文档： <em><a href="https://www.rabbitmq.com/#features" title="RabbitMQ 特征">RabbitMQ 特征</a></em></p>
<span id="more"></span>

<h2 id="模型概念"><a href="#模型概念" class="headerlink" title="模型概念"></a>模型概念</h2><p>为了弄清楚<code>RabbitMQ</code>，我们需要了解<code>RabbitMQ</code>中的一些概念</p>
<ul>
<li>Message：消息，消息是不具名的，它由消息头和消息体组成。消息体是不透明的，而消息头则由一系列的可选属性组成，这些属性包括<code>routing-key（路由键）</code>、<code>priority（相对于其他消息的优先权）</code>、<code>delivery-mode（指出该消息可能需要持久性存储）</code>等。</li>
<li>Broker：消息队列服务器实体。</li>
<li>Exchange：交换器，用来接收生产者发送的消息并将这些消息路由给服务器中的队列。</li>
<li>Binding：绑定，它的作用就是把<code>exchange</code>和<code>queue</code>按照路由规则绑定起来。</li>
<li>Queue：消息队列，用来保存消息直到发送给消费者。它是消息的容器，也是消息的终点。一个消息可投入一个或多个队列，消息一直在队列里面，等待消费者连接到这个队列将其取走。</li>
<li>Publisher：消息的生产者，一个向交换器发布消息的客户端应用程序。</li>
<li>Consumer：消息的消费者，表示一个从消息队列中取得消息的客户端应用程序。</li>
<li>Channel：信道，多路复用连接中的一条独立的双向数据流通道。信道是建立在真实的<code>TCP</code>连接内的虚拟连接，<code>AMQP</code>命令都是通过信道发出去的，不管是发布消息、订阅队列还是接收消息，这些动作都是通过信道完成。因为对于操作系统来说建立和销毁<code>TCP</code>都是非常昂贵的开销，所以引入了信道的概念，以复用一条<code>TCP</code>连接。</li>
<li>Virtual Host：虚拟主机，表示一批交换器、消息队列和相关对象。虚拟主机是共享相同的身份认证和加密环境的独立服务器域。每个 <code>vhost</code>本质上就是一个mini版的<code>RabbitMQ</code>服务器，拥有自己的队列、交换器、绑定和权限机制。<code>vhost</code>是<code>AMQP</code>概念的基础，必须在连接时指定，<code>RabbitMQ</code>默认的<code>vhost</code>是<code>/</code>。一个<code>broker</code>里可以开设多个<code>vhost</code>，用作不同用户的权限分离。</li>
<li>Routing Key：路由关键字，<code>exchange</code>根据这个关键字进行消息投递。</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>RabbitMQ</code>的安装方式非常的简单，我们可以从官网的 <em><a href="https://www.rabbitmq.com/download.html" title="安装页面">安装页面</a></em> 找到非常详细的安装步骤。由于笔者使用的是<code>Windows 7</code>，所以文中以<code>Windows</code>为例，版本号为<code>3.9.13</code>。</p>
<p><a href="https://www.rabbitmq.com/install-windows.html" title="RabbitMQ install-windows">RabbitMQ install-windows</a></p>
<h3 id="安装-erLang"><a href="#安装-erLang" class="headerlink" title="安装 erLang"></a>安装 erLang</h3><p>由于<code>RabbitM!</code>是使用<code>erLang</code>编写的，所以我们首先需要在我们环境中安装<code>erLang</code>的运行环境。</p>
<ul>
<li><a href="https://www.erlang.org/" title="erLang 官网">erLang 官网</a></li>
<li><a href="https://www.erlang.org/downloads" title="erLang 下载地址">erLang 下载地址</a></li>
</ul>
<p>得到下载文件后，我们一直<code>next</code>就行了，然后再配置一下环境变量，最后我们打开命令行，输入以下命令查看是否安装成功。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">erl -version</span><br></pre></td></tr></table></figure>
<p>我们看到下图的信息则表示已经安装成功。</p>
<p><img src="/2022/01/22/rabbitmq/001.png" alt="erLang 安装" title="erLang 安装"></p>
<h3 id="安装-RabbitMQ"><a href="#安装-RabbitMQ" class="headerlink" title="安装 RabbitMQ"></a>安装 RabbitMQ</h3><p>从官方给出的文档 <em><a href="https://www.rabbitmq.com/install-windows.html" title="RabbitMQ install-windows">RabbitMQ install-windows</a></em> ，我们知道有两种方式来安装<code>RabbitMQ</code>，我们使用第二种 <em><a href="https://www.rabbitmq.com/install-windows.html#installer" title="Using the Installer">Using the Installer</a></em> 来进行安装。</p>
<p>我们得到安装文件后，双击打开，然后一直<code>next</code>就行了，最后别忘了配置一下环境变量。如果我们不想使用安装文件，也可以直接下载 <em><a href="https://www.rabbitmq.com/install-windows-manual.html" title="zip 文件">zip 文件</a></em> ，然后解压配置环境变即可。</p>
<ul>
<li><a href="https://www.rabbitmq.com/install-windows.html#installer" title="RabbitMQ 二进制文件">RabbitMQ 二进制文件</a></li>
<li><a href="https://www.rabbitmq.com/install-windows-manual.html#downloads" title="RabbitMQ ZIP文件">RabbitMQ ZIP文件</a></li>
</ul>
<p>安装完成后，我们使用以下命令查看安装是否成功：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rabbitmqctl --version</span><br></pre></td></tr></table></figure>
<p>我们看到下图的信息则表示已经安装成功。</p>
<p><img src="/2022/01/22/rabbitmq/002.png" alt="RabbitMQ 安装" title="RabbitMQ 安装"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_management //安装管理页面插件</span><br><span class="line">rabbitmq-server //启动RabbitMQ服务</span><br></pre></td></tr></table></figure>

<p><img src="/2022/01/22/rabbitmq/003.png" alt="RabbitMQ 启动" title="RabbitMQ 启动"></p>
<p>当我们启动完成后，访问<code>http://localhost:15672/</code>，账号密码默认是<code>guest/guest</code>，就可以看到如下界面</p>
<p><img src="/2022/01/22/rabbitmq/004.png" alt="RabbitMQ 管理页面" title="RabbitMQ 管理页面"></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>使用<code>RabbitMQ</code>非常的简单，在Spring Boot中，生产者只需要引入<code>amqp starter</code>就可以了</p>
<h3 id="引入POM依赖"><a href="#引入POM依赖" class="headerlink" title="引入POM依赖"></a>引入POM依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.rabbitmq.host</span> = <span class="string">127.0.0.1</span></span><br><span class="line"><span class="meta">spring.rabbitmq.port</span> = <span class="string">5672</span></span><br><span class="line"><span class="meta">spring.rabbitmq.username</span> = <span class="string">guest</span></span><br><span class="line"><span class="meta">spring.rabbitmq.password</span> = <span class="string">guest</span></span><br></pre></td></tr></table></figure>

<h3 id="配置RabbitMQ"><a href="#配置RabbitMQ" class="headerlink" title="配置RabbitMQ"></a>配置RabbitMQ</h3><p>由于我们这里是为了测试，直接使用<code>Direct Exchange</code>模式</p>
<p>RabbitMQConfig.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ldmzw.demo.rabbitmq.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.DirectExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String RABBITMQ_DEMO_DIRECT_TOPIC = <span class="string">&quot;test-direct-queue&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String RABBITMQ_DEMO_DIRECT_EXCHANGE = <span class="string">&quot;test-direct-exchange&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String RABBITMQ_DEMO_DIRECT_ROUTING = <span class="string">&quot;test-direct-routing&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">directQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1、name:    队列名称</span></span><br><span class="line"><span class="comment">         * 2、durable: 是否持久化</span></span><br><span class="line"><span class="comment">         * 3、exclusive: 是否独享、排外的。如果设置为true，定义为排他队列。则只有创建者可以使用此队列。也就是private私有的。</span></span><br><span class="line"><span class="comment">         * 4、autoDelete: 是否自动删除。也就是临时队列。当最后一个消费者断开连接后，会自动删除。</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(RABBITMQ_DEMO_DIRECT_TOPIC, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">directExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Direct交换机</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(RABBITMQ_DEMO_DIRECT_EXCHANGE, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bindDirect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//链式写法，绑定交换机和队列，并设置匹配键</span></span><br><span class="line">        <span class="keyword">return</span> BindingBuilder</span><br><span class="line">                <span class="comment">//绑定队列</span></span><br><span class="line">                .bind(directQueue())</span><br><span class="line">                <span class="comment">//到交换机</span></span><br><span class="line">                .to(directExchange())</span><br><span class="line">                <span class="comment">//并设置匹配键</span></span><br><span class="line">                .with(RABBITMQ_DEMO_DIRECT_ROUTING);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>生产者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ldmzw.demo.rabbitmq.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ldmzw.demo.rabbitmq.service.MQService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MQServiceImpl</span> <span class="keyword">implements</span> <span class="title">MQService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> DateTimeFormatter df = DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">send</span><span class="params">(String exchange, String routing, String msg)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; m = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        m.put(<span class="string">&quot;id&quot;</span>, UUID.randomUUID());</span><br><span class="line">        m.put(<span class="string">&quot;time&quot;</span>, LocalDateTime.now().format(df));</span><br><span class="line">        m.put(<span class="string">&quot;msg&quot;</span>, msg);</span><br><span class="line"></span><br><span class="line">        rabbitTemplate.convertAndSend(exchange, routing, m);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>消费者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ldmzw.demo.rabbitmq.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queuesToDeclare = &#123;@Queue(&quot;test-direct-queue&quot;)&#125;)</span></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consumer1</span><span class="params">(Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;message is: &#123;&#125;&quot;</span>, map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当我们启动应用并发送消息时，我们可以看到如下日志</p>
<p><img src="/2022/01/22/rabbitmq/005.png" alt="RabbitMQ 日志" title="RabbitMQ 日志"></p>
<h2 id="Exchnage的四种类型以及用法"><a href="#Exchnage的四种类型以及用法" class="headerlink" title="Exchnage的四种类型以及用法"></a>Exchnage的四种类型以及用法</h2><p>我们从<code>RabbitMQ</code>的页面中可以看到，<code>RabbitMQ</code>包含四种<code>Exchange</code></p>
<p><img src="/2022/01/22/rabbitmq/006.png" alt="RabbitMQ Exchange" title="RabbitMQ Exchange"></p>
<h3 id="Direct-Exchange"><a href="#Direct-Exchange" class="headerlink" title="Direct Exchange"></a>Direct Exchange</h3><p>直连交换机，就是将<code>exchange</code>与<code>queue</code>通过一个<code>routing key</code>绑订，要求消息与一个<code>routing key</code>完全匹配。</p>
<p><img src="/2022/01/22/rabbitmq/007.png" alt="RabbitMQ Direct Exchange" title="RabbitMQ Direct Exchange"></p>
<p>从图中我们可以看到，当消息的<code>routing key</code>为<code>key1</code>时，消息会被分发到<code>queue1</code>中，此时<code>conusmer1</code>将会收到该消息。</p>
<p>在我们上面的示例中，我们使用的即是<code>Direct Exchange</code>，因此我们这里不再重复代码。主要使用了<code>DirectExchange</code>。</p>
<h3 id="Fanout-Exchange"><a href="#Fanout-Exchange" class="headerlink" title="Fanout Exchange"></a>Fanout Exchange</h3><p>扇出交换机，不处理<code>routing key</code>，只需要简单的将队列绑订到交换机上面。一个发送到交换机的消息都会被转发到与该交换机绑定的所有队列上。很像子网广播，每台子网内的主机都获得了一份复制的消息。<code>fanout</code>交换机转发消息是最快的。</p>
<p><img src="/2022/01/22/rabbitmq/007.png" alt="RabbitMQ Fanout Exchange" title="RabbitMQ Fanout Exchange"></p>
<p>我们还是采用这张图来说明，在<code>Direct Exchange</code>中，当消息的<code>routing key</code>为<code>key1</code>时，消息只会被分发到<code>queue1</code>中，此时只有<code>conusmer1</code>将会收到该消息。但是在<code>Fanout Exchange</code>中，不论消息的<code>routing key</code>为<code>key1</code>、<code>key2</code>、<code>key3</code>还为其它，消息都会被分发到<code>queue1</code>、<code>queue2</code>、<code>queue3</code>，此时<code>consumer1</code>与<code>consumer2</code>都能收到消息。并且我们可以看到<code>consumer</code>消费了<code>queue2</code>与<code>queue3</code>，因此会收到两条消息。</p>
<p>代码实现如下</p>
<p>RabbitMQConfig.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ldmzw.demo.rabbitmq.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.DirectExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.FanoutExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String RABBITMQ_FANOUT_EXCHANGE = <span class="string">&quot;test-fanout-exchange&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String RABBITMQ_FANOUT_QUEUE_1 = <span class="string">&quot;test-fanout-queue-1&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String RABBITMQ_FANOUT_QUEUE_2 = <span class="string">&quot;test-fanout-queue-2&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String RABBITMQ_FANOUT_QUEUE_3 = <span class="string">&quot;test-fanout-queue-3&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queue</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1、name:    队列名称</span></span><br><span class="line"><span class="comment">         * 2、durable: 是否持久化</span></span><br><span class="line"><span class="comment">         * 3、exclusive: 是否独享、排外的。如果设置为true，定义为排他队列。则只有创建者可以使用此队列。也就是private私有的。</span></span><br><span class="line"><span class="comment">         * 4、autoDelete: 是否自动删除。也就是临时队列。当最后一个消费者断开连接后，会自动删除。</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(name, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FanoutExchange <span class="title">fanoutExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Fanout交换机</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FanoutExchange(RABBITMQ_FANOUT_EXCHANGE, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bindFanout1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//链式写法，绑定交换机和队列，并设置匹配键</span></span><br><span class="line">        <span class="keyword">return</span> BindingBuilder</span><br><span class="line">                <span class="comment">//绑定队列</span></span><br><span class="line">                .bind(queue(RABBITMQ_FANOUT_QUEUE_1))</span><br><span class="line">                <span class="comment">//到交换机</span></span><br><span class="line">                .to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bindFanout2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//链式写法，绑定交换机和队列，并设置匹配键</span></span><br><span class="line">        <span class="keyword">return</span> BindingBuilder</span><br><span class="line">                <span class="comment">//绑定队列</span></span><br><span class="line">                .bind(queue(RABBITMQ_FANOUT_QUEUE_2))</span><br><span class="line">                <span class="comment">//到交换机</span></span><br><span class="line">                .to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bindFanout3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//链式写法，绑定交换机和队列，并设置匹配键</span></span><br><span class="line">        <span class="keyword">return</span> BindingBuilder</span><br><span class="line">                <span class="comment">//绑定队列</span></span><br><span class="line">                .bind(queue(RABBITMQ_FANOUT_QUEUE_3))</span><br><span class="line">                <span class="comment">//到交换机</span></span><br><span class="line">                .to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>消费者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ldmzw.demo.rabbitmq.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ldmzw.demo.rabbitmq.config.RabbitMQConfig;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queuesToDeclare = &#123;@Queue(RabbitMQConfig.RABBITMQ_FANOUT_QUEUE_1)&#125;)</span></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consumerFanout1</span><span class="params">(Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;fanout consumer1 message is: &#123;&#125;&quot;</span>, map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queuesToDeclare = &#123;@Queue(RabbitMQConfig.RABBITMQ_FANOUT_QUEUE_2)</span></span><br><span class="line"><span class="meta">            , @Queue(RabbitMQConfig.RABBITMQ_FANOUT_QUEUE_3)&#125;)</span></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consumerFanout2</span><span class="params">(Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;fanout consumer2 message is: &#123;&#125;&quot;</span>, map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们启动应用后，登录<code>RabbitMQ</code>管理界面，可以看到<code>Exchange</code>与<code>Queue</code>已经创建。</p>
<p><img src="/2022/01/22/rabbitmq/008.png" alt="RabbitMQ Fanout Exchange" title="RabbitMQ Fanout Exchange"></p>
<p><img src="/2022/01/22/rabbitmq/009.png" alt="RabbitMQ Fanout Exchange" title="RabbitMQ Fanout Exchange"></p>
<p>然后我们调用下面的请求发送消息，我们可以在应用控制台看到日志记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/mq/send?exchange=test-fanout-exchange&amp;routing=test-direct-routing&amp;msg=xx</span><br><span class="line">http://localhost:8080/mq/send?exchange=test-fanout-exchange&amp;routing=test-direct-routing&amp;msg=yy</span><br></pre></td></tr></table></figure>

<p><img src="/2022/01/22/rabbitmq/010.png" alt="RabbitMQ Fanout Exchange" title="RabbitMQ Fanout Exchange"></p>
<h3 id="Topic-Exchange"><a href="#Topic-Exchange" class="headerlink" title="Topic Exchange"></a>Topic Exchange</h3><p><code>topic</code>交换机可以实现更加复杂的消息发送规则，即发送消息时，指定更为复杂的<code>routing key</code>，类似于模糊匹配，<code>routing key</code>可以多变。只要发送消息时指定的<code>routing key</code>符合交换机与队列绑定的binding key的匹配规则，则消息可以被正确投递到指定队列。</p>
<h4 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h4><ul>
<li>#：代表匹配一个多或多个、或者一个也匹配不到,支持多级</li>
<li>*：代表必须匹配一个，且只能是一级，即如果<code>binding key</code>为*.topic.*，则只有发送消息时指定<code>routing key</code>为类似<code>aaa.topic.bbb</code>等的消息才会被投递到该队列，如果<code>routing key</code>为<code>topic.bbb</code>或者<code>aa.sms</code>或者<code>ab.bb.sms</code>，则都不会被投递到该队列。</li>
</ul>
<p><img src="/2022/01/22/rabbitmq/013.png" alt="RabbitMQ Topic Exchange" title="RabbitMQ Topic Exchange"></p>
<p>我们还是采用图来说明，从图中的绑定关系我们可以知道</p>
<ul>
<li>当消息的<code>routing key</code>为<code>rabbit.a.xx</code>时，消息会被分发到<code>queuea</code>与<code>queuec</code>中，此时<code>conusmer1</code>与<code>consumer2</code>将会收到该消息。</li>
<li>当消息的<code>routing key</code>为<code>rabbit.a</code>时，消息只会被分发到<code>queuec</code>中，此时<code>consumer2</code>将会收到该消息。</li>
<li>当消息的<code>routing key</code>为<code>rabbit.b.xx</code>或者<code>rabbit.b</code>时，消息会被分发到<code>queueb</code>与<code>queuec</code>中，此时只有<code>consumer2</code>将会收到该消息，并且会收到两条消息。</li>
<li>当消息的<code>routing key</code>为<code>xx.a.xx</code>时，消息会被分发到<code>queuea</code>中，此时只有<code>consumer1</code>将会收到该消息。</li>
</ul>
<p>代码实现如下</p>
<p>RabbitMQConfig.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ldmzw.demo.rabbitmq.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.DirectExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.FanoutExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.TopicExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String RABBITMQ_TOPIC_EXCHANGE = <span class="string">&quot;test-topic-exchange&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String RABBITMQ_TOPIC_QUEUE_A = <span class="string">&quot;test-topic-queue-a&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String RABBITMQ_TOPIC_QUEUE_B = <span class="string">&quot;test-topic-queue-b&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String RABBITMQ_TOPIC_QUEUE_C = <span class="string">&quot;test-topic-queue-c&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queue</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1、name:    队列名称</span></span><br><span class="line"><span class="comment">         * 2、durable: 是否持久化</span></span><br><span class="line"><span class="comment">         * 3、exclusive: 是否独享、排外的。如果设置为true，定义为排他队列。则只有创建者可以使用此队列。也就是private私有的。</span></span><br><span class="line"><span class="comment">         * 4、autoDelete: 是否自动删除。也就是临时队列。当最后一个消费者断开连接后，会自动删除。</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(name, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TopicExchange <span class="title">topicExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Topic交换机</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TopicExchange(RABBITMQ_TOPIC_EXCHANGE, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bindTopicA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//队列A绑定到TopicExchange交换机</span></span><br><span class="line">        <span class="keyword">return</span> BindingBuilder</span><br><span class="line">                .bind(queue(RABBITMQ_TOPIC_QUEUE_A))</span><br><span class="line">                .to(topicExchange())</span><br><span class="line">                .with(<span class="string">&quot;*.a.*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bindTopicB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//队列B绑定到TopicExchange交换机</span></span><br><span class="line">        <span class="keyword">return</span> BindingBuilder</span><br><span class="line">                .bind(queue(RABBITMQ_TOPIC_QUEUE_B))</span><br><span class="line">                .to(topicExchange())</span><br><span class="line">                .with(<span class="string">&quot;*.b.#&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bindTopicC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//队列C绑定到TopicExchange交换机</span></span><br><span class="line">        <span class="keyword">return</span> BindingBuilder</span><br><span class="line">                .bind(queue(RABBITMQ_TOPIC_QUEUE_C))</span><br><span class="line">                .to(topicExchange())</span><br><span class="line">                .with(<span class="string">&quot;rabbit.#&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>消费者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ldmzw.demo.rabbitmq.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ldmzw.demo.rabbitmq.config.RabbitMQConfig;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queuesToDeclare = &#123;@Queue(RabbitMQConfig.RABBITMQ_TOPIC_QUEUE_A)&#125;)</span></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consumerTopic1</span><span class="params">(Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;topic consumer1 message is: &#123;&#125;&quot;</span>, map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queuesToDeclare = &#123;@Queue(RabbitMQConfig.RABBITMQ_TOPIC_QUEUE_B)</span></span><br><span class="line"><span class="meta">            , @Queue(RabbitMQConfig.RABBITMQ_TOPIC_QUEUE_C)&#125;)</span></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consumerTopic2</span><span class="params">(Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;topic consumer2 message is: &#123;&#125;&quot;</span>, map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们启动应用后，登录<code>RabbitMQ</code>管理界面，可以看到<code>Exchange</code>与<code>Queue</code>已经创建。</p>
<p><img src="/2022/01/22/rabbitmq/011.png" alt="RabbitMQ Topic Exchange" title="RabbitMQ Topic Exchange"></p>
<p><img src="/2022/01/22/rabbitmq/012.png" alt="RabbitMQ Topic Exchange" title="RabbitMQ Topic Exchange"></p>
<p>然后我们调用下面的请求发送消息，我们可以在应用控制台看到日志记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/mq/send?exchange=test-topic-exchange&amp;routing=rabbit.a.xx&amp;msg=rabbit.a.xx</span><br><span class="line">http://localhost:8080/mq/send?exchange=test-topic-exchange&amp;routing=rabbit.a&amp;msg=rabbit.a</span><br><span class="line">http://localhost:8080/mq/send?exchange=test-topic-exchange&amp;routing=rabbit.b.xx&amp;msg=rabbit.b.xx</span><br><span class="line">http://localhost:8080/mq/send?exchange=test-topic-exchange&amp;routing=rabbit.b&amp;msg=rabbit.b</span><br><span class="line">http://localhost:8080/mq/send?exchange=test-topic-exchange&amp;routing=xx.a.xx&amp;msg=xx.a.xx</span><br></pre></td></tr></table></figure>

<p><img src="/2022/01/22/rabbitmq/014.png" alt="RabbitMQ Topic Exchange" title="RabbitMQ Topic Exchange"></p>
<h3 id="Headers-Exchange"><a href="#Headers-Exchange" class="headerlink" title="Headers Exchange"></a>Headers Exchange</h3><p><code>headers</code>这种交换机使用的相对没这么多。它跟上面三种有点区别，它的路由不是用routingKey进行路由匹配，而是在匹配请求头中所带的键值进行路由。</p>
<p><img src="/2022/01/22/rabbitmq/017.png" alt="RabbitMQ Headers Exchange" title="RabbitMQ Headers Exchange"></p>
<p>说明：图中的<code>x-map:all</code>表示完全匹配，<code>x-map:any</code>表示任一匹配。</p>
<p>根据上面图中的绑定配置情况</p>
<ul>
<li>当发送消息<code>header</code>中带有<code>&#123;&quot;header-x&quot;: &quot;x&quot;, &quot;header-a&quot;: &quot;a&quot;&#125;</code>，消息将被分发到<code>queuea</code>与<code>queuec</code>中，此时<code>conusmer1</code>与<code>consumer3</code>将会收到该消息。</li>
<li>当发送消息<code>header</code>中带有<code>&#123;&quot;header-x&quot;: &quot;x&quot;, &quot;header-b&quot;: &quot;b&quot;&#125;</code>，消息将被分发到<code>queueb</code>与<code>queuec</code>中，此时<code>conusmer2</code>与<code>consumer3</code>将会收到该消息。</li>
<li>当发送消息<code>header</code>中带有<code>&#123;&quot;header-a&quot;: &quot;a&quot;&#125;</code>或者<code>&#123;&quot;header-b&quot;: &quot;b&quot;&#125;</code>，消息将只被分发到<code>queuec</code>中，此时<code>consumer3</code>将会收到该消息。</li>
<li>当发送消息<code>header</code>中带有<code>&#123;&quot;header-x&quot;: &quot;x&quot;, &quot;header-a&quot;: &quot;a&quot;, &quot;header-b&quot;: &quot;b&quot;&#125;</code>，消息将被分发到<code>queuea</code>、<code>queueb</code>与<code>queuec</code>中，此时<code>conusmer1</code>、<code>conusmer2</code>与<code>consumer3</code>将会收到该消息。</li>
</ul>
<p>代码实现如下</p>
<p>RabbitMQConfig.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ldmzw.demo.rabbitmq.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.DirectExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.FanoutExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.HeadersExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.TopicExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String RABBITMQ_HEADERS_EXCHANGE = <span class="string">&quot;test-headers-exchange&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String RABBITMQ_HEADERS_QUEUE_A = <span class="string">&quot;test-headers-queue-a&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String RABBITMQ_HEADERS_QUEUE_B = <span class="string">&quot;test-headers-queue-b&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String RABBITMQ_HEADERS_QUEUE_C = <span class="string">&quot;test-headers-queue-c&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queue</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1、name:    队列名称</span></span><br><span class="line"><span class="comment">         * 2、durable: 是否持久化</span></span><br><span class="line"><span class="comment">         * 3、exclusive: 是否独享、排外的。如果设置为true，定义为排他队列。则只有创建者可以使用此队列。也就是private私有的。</span></span><br><span class="line"><span class="comment">         * 4、autoDelete: 是否自动删除。也就是临时队列。当最后一个消费者断开连接后，会自动删除。</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(name, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HeadersExchange <span class="title">headersExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Headers交换机</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HeadersExchange(RABBITMQ_HEADERS_EXCHANGE, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bindHeadersA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;header-x&quot;</span>, <span class="string">&quot;x&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;header-a&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="comment">//队列A绑定到HeadersExchange交换机</span></span><br><span class="line">        <span class="keyword">return</span> BindingBuilder</span><br><span class="line">                .bind(queue(RABBITMQ_HEADERS_QUEUE_A))</span><br><span class="line">                .to(headersExchange())</span><br><span class="line">                .whereAll(map)</span><br><span class="line">                .match();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bindHeadersB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;header-x&quot;</span>, <span class="string">&quot;x&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;header-b&quot;</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line">        <span class="comment">//队列B绑定到HeadersExchange交换机</span></span><br><span class="line">        <span class="keyword">return</span> BindingBuilder</span><br><span class="line">                .bind(queue(RABBITMQ_HEADERS_QUEUE_B))</span><br><span class="line">                .to(headersExchange())</span><br><span class="line">                .whereAll(map)</span><br><span class="line">                .match();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bindHeadersC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;header-a&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;header-b&quot;</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line">        <span class="comment">//队列C绑定到HeadersExchange交换机</span></span><br><span class="line">        <span class="keyword">return</span> BindingBuilder</span><br><span class="line">                .bind(queue(RABBITMQ_HEADERS_QUEUE_C))</span><br><span class="line">                .to(headersExchange())</span><br><span class="line">                .whereAny(map)</span><br><span class="line">                .match();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>生产者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ldmzw.demo.rabbitmq.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.ldmzw.demo.rabbitmq.service.MQService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.MessageDeliveryMode;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.MessageProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MQServiceImpl</span> <span class="keyword">implements</span> <span class="title">MQService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> DateTimeFormatter df = DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">send</span><span class="params">(String exchange, String routing, String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> send(exchange, routing, msg, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">send</span><span class="params">(String exchange, String routing, String msg, Map&lt;String, Object&gt; headers)</span> </span>&#123;</span><br><span class="line">        MessageProperties messageProperties = <span class="keyword">new</span> MessageProperties();</span><br><span class="line">        <span class="comment">//消息持久化</span></span><br><span class="line">        messageProperties.setDeliveryMode(MessageDeliveryMode.PERSISTENT);</span><br><span class="line">        messageProperties.setContentType(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (headers != <span class="keyword">null</span>) &#123;</span><br><span class="line">            messageProperties.getHeaders().putAll(headers);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加消息</span></span><br><span class="line">        Map&lt;String, Object&gt; m = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        m.put(<span class="string">&quot;id&quot;</span>, UUID.randomUUID());</span><br><span class="line">        m.put(<span class="string">&quot;time&quot;</span>, LocalDateTime.now().format(df));</span><br><span class="line">        m.put(<span class="string">&quot;msg&quot;</span>, msg);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            rabbitTemplate.convertAndSend(exchange, routing, <span class="keyword">new</span> Message(om.writeValueAsBytes(m), messageProperties));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;发送消息失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ldmzw.demo.rabbitmq.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ldmzw.demo.rabbitmq.controller.info.MQMessage;</span><br><span class="line"><span class="keyword">import</span> com.ldmzw.demo.rabbitmq.service.MQService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(path = &quot;/mq&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MQController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MQService mqService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/send&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">send</span><span class="params">(MQMessage message, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; headers = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Enumeration&lt;String&gt; headerNames = request.getHeaderNames();</span><br><span class="line">        <span class="keyword">while</span> (headerNames.hasMoreElements()) &#123;</span><br><span class="line">            String header = headerNames.nextElement();</span><br><span class="line">            headers.put(header, request.getHeader(header));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mqService.send(message.getExchange(), message.getRouting(), message.getMsg(), headers);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>消费者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ldmzw.demo.rabbitmq.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ldmzw.demo.rabbitmq.config.RabbitMQConfig;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queuesToDeclare = &#123;@Queue(RabbitMQConfig.RABBITMQ_HEADERS_QUEUE_A)&#125;)</span></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consumerHeaders1</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;headers consumer1 message is: &#123;&#125;&quot;</span>, <span class="keyword">new</span> String(message.getBody()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queuesToDeclare = &#123;@Queue(RabbitMQConfig.RABBITMQ_HEADERS_QUEUE_B)&#125;)</span></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consumerHeaders2</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;headers consumer2 message is: &#123;&#125;&quot;</span>, <span class="keyword">new</span> String(message.getBody()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queuesToDeclare = &#123;@Queue(RabbitMQConfig.RABBITMQ_HEADERS_QUEUE_C)&#125;)</span></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consumerHeaders3</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;headers consumer3 message is: &#123;&#125;&quot;</span>, <span class="keyword">new</span> String(message.getBody()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们启动应用后，登录<code>RabbitMQ</code>管理界面，可以看到<code>Exchange</code>与<code>Queue</code>已经创建。</p>
<p><img src="/2022/01/22/rabbitmq/015.png" alt="RabbitMQ Headers Exchange" title="RabbitMQ Headers Exchange"></p>
<p><img src="/2022/01/22/rabbitmq/016.png" alt="RabbitMQ Headers Exchange" title="RabbitMQ Headers Exchange"></p>
<p>然后我们调用下面的请求发送消息，我们可以在应用控制台看到日志记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/mq/send?exchange=test-headers-exchange&amp;routing=test-headers-exchange&amp;msg=headers-xa</span><br><span class="line">http://localhost:8080/mq/send?exchange=test-headers-exchange&amp;routing=test-headers-exchange&amp;msg=headers-xb</span><br><span class="line">http://localhost:8080/mq/send?exchange=test-headers-exchange&amp;routing=test-headers-exchange&amp;msg=headers-a</span><br><span class="line">http://localhost:8080/mq/send?exchange=test-headers-exchange&amp;routing=test-headers-exchange&amp;msg=headers-b</span><br><span class="line">http://localhost:8080/mq/send?exchange=test-headers-exchange&amp;routing=test-headers-exchange&amp;msg=headers-xab</span><br></pre></td></tr></table></figure>

<p><img src="/2022/01/22/rabbitmq/018.png" alt="RabbitMQ Headers Exchange" title="RabbitMQ Headers Exchange"></p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>文章对<code>RabbitMQ</code>的安装与使用作了一个简单的入门介绍。<code>RabbitMQ</code>还有很多其它配置，可以在<code>rabbitmq.conf</code>与<code>advanced.config</code>中进行配置，还有很多其它的用法，包括组建<code>cluster</code>、<code>TLS</code>、以及用户的权限控制，<code>vhost</code>配置等。需要研究的地细节还有很多，期待后续更精彩。</p>
<p>文章中的代码下载地址： <em><a href="/2022/01/22/rabbitmq/code.zip" title="项目代码">项目代码</a></em> </p>
<p>参考：</p>
<ul>
<li><a href="https://www.jianshu.com/p/dae5bbed39b1" title="RabbitMQ入门教程（概念，应用场景，安装，使用">RabbitMQ入门教程（概念，应用场景，安装，使用</a></li>
<li><a href="https://www.jianshu.com/p/79ca08116d57/" title="消息队列之 RabbitMQ">消息队列之 RabbitMQ</a></li>
</ul>
]]></content>
      <categories>
        <category>java</category>
        <category>消息中间件</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>消息中间件</tag>
        <tag>消息队列</tag>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud Gateway 简单使用</title>
    <url>/2022/03/28/scg1/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在微服务盛行的开发世界中，网关是至关重要的存在。在JAVA的生态中，我们已经阻挡不了Spring以及由此而生的Spring Boot与Spring Cloud，作为Spring Cloud项目中的Spring Cloud Gateway，正是为解决网关问题而生的项目，是新一代的网关解决方案。</p>
<p>Spring官网</p>
<ul>
<li><a href="https://spring.io/" title="Spring官网">Spring官网</a></li>
<li><a href="https://spring.io/projects/spring-boot" title="Spring Boot官网">Spring Boot项目官网</a></li>
<li><a href="https://spring.io/projects/spring-cloud" title="Spring Cloud官网">Spring Cloud项目官网</a></li>
<li><a href="https://spring.io/projects/spring-cloud-gateway" title="Spring Cloud Gateway官网">Spring Cloud Gateway项目官网</a></li>
</ul>
<blockquote>
<p>提示：</p>
<p>由于Zuul 1.x版本进入维护状态，2.x版本迟迟未发布的原因，Spring Cloud团队开发了自己的Spring Cloud Gateway网关。Spring Cloud Gateway是代替Spring Cloud Netflix Zuul的网关解决方案，在版本2020.0.0中，Spring Cloud团队已经移出了Netflix的相关组件，仅留下了服务发现与注册中心Eureka。</p>
<p>从 <a href="https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-2020.0-Release-Notes" title="Spring-Cloud-2020.0-Release-Notes">Spring-Cloud-2020.0-Release-Notes</a> 中，我们可以看出，已经移出的组件包含：</p>
<ul>
<li>spring-cloud-netflix-archaius</li>
<li>spring-cloud-netflix-concurrency-limits</li>
<li>spring-cloud-netflix-core</li>
<li>spring-cloud-netflix-dependencies</li>
<li>spring-cloud-netflix-hystrix</li>
<li>spring-cloud-netflix-hystrix-contract</li>
<li>spring-cloud-netflix-hystrix-dashboard</li>
<li>spring-cloud-netflix-hystrix-stream</li>
<li>spring-cloud-netflix-ribbon</li>
<li>spring-cloud-netflix-sidecar</li>
<li>spring-cloud-netflix-turbine</li>
<li>spring-cloud-netflix-turbine-stream</li>
<li>spring-cloud-netflix-zuul</li>
<li>spring-cloud-starter-netflix-archaius</li>
<li>spring-cloud-starter-netflix-hystrix</li>
<li>spring-cloud-starter-netflix-hystrix-dashboard</li>
<li>spring-cloud-starter-netflix-ribbon</li>
<li>spring-cloud-starter-netflix-turbine</li>
<li>spring-cloud-starter-netflix-turbine-stream</li>
<li>spring-cloud-starter-netflix-zuul</li>
</ul>
<p>如果是新开发的项目，建议直接使用Spring Cloud Gateway。</p>
</blockquote>
<p>系列相关文章：</p>
<ul>
<li><a href="/2022/03/28/scg1/" title="Spring Cloud Gateway 简单使用">Spring Cloud Gateway 简单使用</a></li>
<li><a href="/2022/04/04/scg2/" title="Spring Cloud Gateway 请求处理">Spring Cloud Gateway 请求处理</a></li>
</ul>
<span id="more"></span>

<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Spring Cloud是基于Spring Boot之上的应用，都是基于Spring来进行的。Spring Cloud Gateway采用了Spring 5.0, Spring Boot 2.0和Project Reactor等技术。</p>
<h3 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h3><ul>
<li>Route（路由）：这是网关的基本构建模块。它由一个ID，一个目标URI，一组断言和一组过滤器定义。如果断言为真，则路由匹配。</li>
<li>Predicate（断言）：这是一个JAVA 8的 <code>java.util.function.Predicate</code>，输入类型是一个 <code>org.springframework.web.server.ServerWebExchange</code>。我们可以使用它来匹配来自<code>HTTP</code>请求的任何内容，例如 headers 或参数。</li>
<li>Filter（过滤器）：这是<code>org.springframework.cloud.gateway.filter.GatewayFilter</code>的实例，我们可以在里面处理我们自己的业务逻辑，甚至可以使用它修改请求和响应。</li>
</ul>
<h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p><img src="/2022/03/28/scg1/001.png" alt="Spring Cloud Gateway Diagram" title="Spring Cloud Gateway Diagram">  </p>
<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><h3 id="项目依赖"><a href="#项目依赖" class="headerlink" title="项目依赖"></a>项目依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 省略 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 下面的依赖可以不引入 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis-reactive<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-circuitbreaker-reactor-resilience4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="路由规则配置"><a href="#路由规则配置" class="headerlink" title="路由规则配置"></a>路由规则配置</h3><p>在 Spring Cloud Gateway 中 Spring 利用 Predicate 的特性实现了各种路由匹配规则，有通过 Header、请求参数等不同的条件来进行作为条件匹配到对应的路由，我们可以查看<code>org.springframework.cloud.gateway.handler.predicate.RoutePredicateFactory</code>的实现。网上有一张图总结了 Spring Cloud 内置的几种 Predicate 的实现。</p>
<p><img src="/2022/03/28/scg1/002.png" alt="RoutePredicateFactory" title="RoutePredicateFactory"><br><img src="/2022/03/28/scg1/003.png" alt="RoutePredicateFactory" title="RoutePredicateFactory"> </p>
<p>每一个Predicate的使用，你可以理解为：当满足这种条件后才会被转发，如果是多个，那就是都满足的情况下被转发。 </p>
<h4 id="yaml配置"><a href="#yaml配置" class="headerlink" title="yaml配置"></a>yaml配置</h4><p>平常开发中，我们用得最多的也许就是<code>org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory</code>。文中就以 <code>PathRoutePredicateFactory</code> 来进行讲解。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-cloud-gateway-sample</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">sample-a</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://a.xxx.com</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/a/**,/c/**</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">sample-b</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://b.xxx.com</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/b/**,/c/**</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<p>当一个请求进来时，如果我们的<code>routes</code>没有指定顺序，则会从上往下进行匹配，只要匹配到一个后就不会再进行后面的匹配。这一点与<code>nginx</code>有点区别，<code>nginx</code>会选取最大匹配来进行转发，而<code>scg</code>是第一匹配进行转发，所以配置的时候需要注意一下顺序。</p>
</blockquote>
<p>举例：<br>配置A：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-cloud-gateway-sample</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">sample-a</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://a.xxx.com</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/a/b/**</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">sample-b</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://b.xxx.com</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/a/**</span></span><br></pre></td></tr></table></figure>

<p>配置B:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-cloud-gateway-sample</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">sample-b</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://b.xxx.com</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/a/**</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">sample-a</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://a.xxx.com</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/a/b/**</span></span><br></pre></td></tr></table></figure>

<p>对于上面的<code>配置A</code>与<code>配置B</code>，当我们请求<code>http://ip:port/a/b/c</code>时，<code>smaple-a</code>与<code>smaple-b</code>两个路由都能进行匹配，但是由于配置顺序不同，使用<code>配置A</code>时，请求会被转发到<code>http://a.xxx.com</code>，而使用<code>配置B</code>时，请求则会被转发到<code>http://b.xxx.com</code>。</p>
<blockquote>
<p>提示：</p>
<p><code>PathRoutePredicateFactory</code> 中的 <code>patterns</code> 支持多个匹配。</p>
</blockquote>
<p>源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PathRoutePredicateFactory</span> <span class="keyword">extends</span> <span class="title">AbstractRoutePredicateFactory</span>&lt;<span class="title">PathRoutePredicateFactory</span>.<span class="title">Config</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Validated</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">private</span> List&lt;String&gt; patterns = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">boolean</span> matchTrailingSlash = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="RouteLocator配置"><a href="#RouteLocator配置" class="headerlink" title="RouteLocator配置"></a>RouteLocator配置</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RouteLocator <span class="title">routeLocator</span><span class="params">(RouteLocatorBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder.routes()</span><br><span class="line">                .route(<span class="string">&quot;sample-a&quot;</span>, r -&gt; r</span><br><span class="line">                        .path(<span class="string">&quot;/a/**&quot;</span>, <span class="string">&quot;/c/**&quot;</span>)</span><br><span class="line">                        .uri(<span class="string">&quot;http://a.xxx.com&quot;</span>))</span><br><span class="line">                .route(<span class="string">&quot;sample-b&quot;</span>, r -&gt; r</span><br><span class="line">                        .path(<span class="string">&quot;/a/**&quot;</span>, <span class="string">&quot;/c/**&quot;</span>)</span><br><span class="line">                        .uri(<span class="string">&quot;http://b.xxx.com&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="RouteDefinition配置"><a href="#RouteDefinition配置" class="headerlink" title="RouteDefinition配置"></a>RouteDefinition配置</h4><p>在实际使用中，我们大都会选取使用<code>RouterDefinition</code>的方式来配置路由，这样我们就能实现动态路由。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouteDefinitionRepository</span> <span class="keyword">implements</span> <span class="title">RouteDefinitionRepository</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Flux&lt;RouteDefinition&gt; <span class="title">getRouteDefinitions</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;RouteDefinition&gt; routes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从数据库、Redis等地方查询路由信息</span></span><br><span class="line">        List&lt;XXX&gt; routeList = jdbcTemplate.query(<span class="string">&quot;select * from xxx&quot;</span>, BeanPropertyRowMapper.newInstance(XXX.class));</span><br><span class="line">        <span class="keyword">if</span> (routeList != <span class="keyword">null</span> &amp;&amp; routeList.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">            routes = routeList.stream().map(e -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    URI u = URI.create(e.getUrl());</span><br><span class="line"></span><br><span class="line">                    RouteDefinition definition = <span class="keyword">new</span> RouteDefinition();</span><br><span class="line">                    definition.setId(e.getId());</span><br><span class="line">                    definition.setOrder(?); <span class="comment">// @1 设置路由顺序</span></span><br><span class="line">                    definition.setUri(u);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//定义断言</span></span><br><span class="line">                    PredicateDefinition predicate = <span class="keyword">new</span> PredicateDefinition();</span><br><span class="line">                    predicate.setName(<span class="string">&quot;Path&quot;</span>); <span class="comment">//指定名称</span></span><br><span class="line">                    predicate.getArgs().put(<span class="string">&quot;pattern&quot;</span>, e.getRoute()); <span class="comment">//配置参数</span></span><br><span class="line"></span><br><span class="line">                    definition.getPredicates().add(predicate);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//定义filter</span></span><br><span class="line">                    <span class="keyword">if</span> (StringUtils.isNotBlank(u.getPath())) &#123;</span><br><span class="line">                        <span class="comment">// rewrite path</span></span><br><span class="line">                        FilterDefinition filterDefinition = <span class="keyword">new</span> FilterDefinition(<span class="string">&quot;RewritePath&quot;</span>);</span><br><span class="line">                        filterDefinition.getArgs().put(<span class="string">&quot;regexp&quot;</span>, <span class="string">&quot;/(?&lt;segment&gt;.*)&quot;</span>);</span><br><span class="line">                        filterDefinition.getArgs().put(<span class="string">&quot;replacement&quot;</span>, u.getPath());</span><br><span class="line">                        definition.getFilters().add(filterDefinition);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> definition;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception ee) &#123;</span><br><span class="line">                    log.info(<span class="string">&quot;build route definition fail&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;).filter(Objects::nonNull).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Flux.fromIterable(routes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">save</span><span class="params">(Mono&lt;RouteDefinition&gt; route)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">delete</span><span class="params">(Mono&lt;String&gt; routeId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<p>代码中<code>@1</code>处设置的顺序即一个请求进来时，scg去寻找路由的顺序。值越小，优先级越高，值越大，优先级越低。</p>
</blockquote>
<p>其它断言配置我们都可以从源代码中看到，具体的配置可以在对应的 <code>RoutePredicateFactory</code> 的 <code>Config</code>中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="comment">// org.springframework.cloud.gateway.handler.predicate.CookieRoutePredicateFactory$Config</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@NotEmpty</span></span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@NotEmpty</span></span><br><span class="line">	<span class="keyword">private</span> String regexp;</span><br><span class="line"></span><br><span class="line">       ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="comment">// org.springframework.cloud.gateway.handler.predicate.HeaderRoutePredicateFactory$Config</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@NotEmpty</span></span><br><span class="line">	<span class="keyword">private</span> String header;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String regexp;</span><br><span class="line"></span><br><span class="line">       ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="自定义RoutePredicate"><a href="#自定义RoutePredicate" class="headerlink" title="自定义RoutePredicate"></a>自定义RoutePredicate</h4><p>虽然Spring Cloud Gateway已经帮我们预置了大量的路由断言，但有时我们还是需要根据我们自己的业务来进行路由断言。为了实现我们自己的RoutePredicate，我们可以实现<code>org.springframework.cloud.gateway.handler.predicate.RoutePredicateFactory</code>或者继承<code>org.springframework.cloud.gateway.handler.predicate.AbstractRoutePredicateFactory</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRoutePredicateFactory</span> <span class="keyword">extends</span> <span class="title">AbstractRoutePredicateFactory</span>&lt;<span class="title">HeaderRoutePredicateFactory</span>.<span class="title">Config</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyRoutePredicateFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Config.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Predicate&lt;ServerWebExchange&gt; <span class="title">apply</span><span class="params">(Config config)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// grab configuration from Config object</span></span><br><span class="line">        <span class="keyword">return</span> exchange -&gt; &#123;</span><br><span class="line">            <span class="comment">//grab the request</span></span><br><span class="line">            ServerHttpRequest request = exchange.getRequest();</span><br><span class="line">            <span class="comment">//take information from the request to see if it</span></span><br><span class="line">            <span class="comment">//matches configuration.</span></span><br><span class="line">            <span class="keyword">return</span> matches(config, request);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Put the configuration properties for your filter here</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="GlobalFilter配置"><a href="#GlobalFilter配置" class="headerlink" title="GlobalFilter配置"></a>GlobalFilter配置</h3><p>Spring Cloud Gateway GlobalFilter不需要在配置中配置，默认应用到所有的路由中。Spring Cloud Gateway已经给我们预置了许多GlobalFilter。</p>
<p><img src="/2022/03/28/scg1/004.png" alt="GlobalFilter" title="GlobalFilter"> </p>
<p>当然我们可以自定义自己的GlobalFilter。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomGlobalFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;custom global filter&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// pre</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> GlobalFilter <span class="title">customGlobalFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (exchange, chain) -&gt; exchange.getPrincipal()</span><br><span class="line">        .map(Principal::getName)</span><br><span class="line">        .defaultIfEmpty(<span class="string">&quot;Default User&quot;</span>)</span><br><span class="line">        .map(userName -&gt; &#123;</span><br><span class="line">          <span class="comment">//adds header to proxied request</span></span><br><span class="line">          exchange.getRequest().mutate().header(<span class="string">&quot;CUSTOM-REQUEST-HEADER&quot;</span>, userName).build();</span><br><span class="line">          <span class="keyword">return</span> exchange;</span><br><span class="line">        &#125;)</span><br><span class="line">        .flatMap(chain::filter);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// post</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> GlobalFilter <span class="title">customGlobalPostFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (exchange, chain) -&gt; chain.filter(exchange)</span><br><span class="line">        .then(Mono.just(exchange))</span><br><span class="line">        .map(serverWebExchange -&gt; &#123;</span><br><span class="line">          <span class="comment">//adds header to response</span></span><br><span class="line">          serverWebExchange.getResponse().getHeaders().set(<span class="string">&quot;CUSTOM-RESPONSE-HEADER&quot;</span>,</span><br><span class="line">              HttpStatus.OK.equals(serverWebExchange.getResponse().getStatusCode()) ? <span class="string">&quot;It worked&quot;</span>: <span class="string">&quot;It did not work&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> serverWebExchange;</span><br><span class="line">        &#125;)</span><br><span class="line">        .then();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="GatewayFilterFactory配置"><a href="#GatewayFilterFactory配置" class="headerlink" title="GatewayFilterFactory配置"></a>GatewayFilterFactory配置</h3><p>Spring Cloud Gateway GatewayFilterFactory应用于我们选择的RouterDefinition中，我们可以在需要使用的RouterDefinition中增加我们的GatewayFilter。我们可以通过实现<code>org.springframework.cloud.gateway.filter.factory.GatewayFilterFactory</code>或者继承<code>org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory</code>来实现我们的自定义GatewayFilter。</p>
<p><img src="/2022/03/28/scg1/005.png" alt="GatewayFilterFactory" title="GatewayFilterFactory"> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PreGatewayFilterFactory</span> <span class="keyword">extends</span> <span class="title">AbstractGatewayFilterFactory</span>&lt;<span class="title">PreGatewayFilterFactory</span>.<span class="title">Config</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PreGatewayFilterFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Config.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GatewayFilter <span class="title">apply</span><span class="params">(Config config)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// grab configuration from Config object</span></span><br><span class="line">        <span class="keyword">return</span> (exchange, chain) -&gt; &#123;</span><br><span class="line">            <span class="comment">//If you want to build a &quot;pre&quot; filter you need to manipulate the</span></span><br><span class="line">            <span class="comment">//request before calling chain.filter</span></span><br><span class="line">            ServerHttpRequest.Builder builder = exchange.getRequest().mutate();</span><br><span class="line">            <span class="comment">//use builder to manipulate the request</span></span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange.mutate().request(builder.build()).build());</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Put the configuration properties for your filter here</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PostGatewayFilterFactory</span> <span class="keyword">extends</span> <span class="title">AbstractGatewayFilterFactory</span>&lt;<span class="title">PostGatewayFilterFactory</span>.<span class="title">Config</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PostGatewayFilterFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Config.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GatewayFilter <span class="title">apply</span><span class="params">(Config config)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// grab configuration from Config object</span></span><br><span class="line">        <span class="keyword">return</span> (exchange, chain) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange).then(Mono.fromRunnable(() -&gt; &#123;</span><br><span class="line">                ServerHttpResponse response = exchange.getResponse();</span><br><span class="line">                <span class="comment">//Manipulate the response in some way</span></span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Put the configuration properties for your filter here</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="鉴权"><a href="#鉴权" class="headerlink" title="鉴权"></a>鉴权</h2><p>在微服务的架构中，网关作为统一的流量入口，我们时常会在网关中编写自己的鉴权逻辑。鉴权我们可以写在自定义的GlobalFilter中，也可以写在我们的GatewayFilterFactory中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthCheckGatewayFilterFactory</span> <span class="keyword">extends</span> <span class="title">AbstractGatewayFilterFactory</span>&lt;<span class="title">AuthCheckGatewayFilterFactory</span>.<span class="title">Config</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ReactiveRedisTemplate reactiveRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AuthCheckGatewayFilterFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Config.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GatewayFilter <span class="title">apply</span><span class="params">(Config config)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (exchange, chain) -&gt; &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!config.getEnable()) &#123;</span><br><span class="line">                <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ServerHttpRequest request = exchange.getRequest();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//@1.判断是否带有鉴权信息</span></span><br><span class="line">            List&lt;String&gt; authorization = request.getHeaders().get(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (authorization == <span class="keyword">null</span> || authorization.size() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;鉴权信息[Authorization]不能为空&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> fastFinish(exchange, HttpStatus.UNAUTHORIZED);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//@2.权限校验，根据实际情况自定义逻辑</span></span><br><span class="line">            String path = request.getURI().getPath();</span><br><span class="line">            <span class="keyword">return</span> reactiveRedisTemplate.opsForHash().get(<span class="string">&quot;xxx&quot;</span>) <span class="comment">//2.1从redis中获取能访问的url权限</span></span><br><span class="line">                    .defaultIfEmpty(Mono.just(<span class="string">&quot;&quot;</span>)) <span class="comment">//2.2如果redis为空，则默认&quot;&quot;</span></span><br><span class="line">                    .flatMap(e -&gt; &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!path.eqauls(e)) &#123;<span class="comment">//2.3权限校验</span></span><br><span class="line">                            log.info(<span class="string">&quot;权限不足, require: &#123;&#125;&quot;</span>, path);</span><br><span class="line">                            <span class="keyword">return</span> fastFinish(exchange, HttpStatus.FORBIDDEN);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> chain.filter(exchange);<span class="comment">//2.4执行后面的filter</span></span><br><span class="line">                    &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 是否开启</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> Boolean enable;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Mono&lt;Void&gt; <span class="title">fastFinish</span><span class="params">(ServerWebExchange exchange, HttpStatus httpStatus)</span> </span>&#123;</span><br><span class="line">        ServerHttpResponse response = exchange.getResponse();</span><br><span class="line">        response.setStatusCode(httpStatus);</span><br><span class="line">        <span class="keyword">return</span> response.setComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<p>Spring Cloud Gateway采用了Reactor非阻塞流，底层采用了Netty。在上面的示例中，我们需要加入 2.2步骤 <code>defaultIfEmpty(Mono.just(&quot;&quot;))</code>。在Reactor中，Mono与Flux都是发射器，不同的是Mono只发送一个数据，Flux是发送一连串数据，但是如果当Mono中或者Flux中没有数据时，后续的 <code>.flatMap</code> 或者 <code>.map</code> 等操作是不会执行的。在下面的这个示例中，如果我们运行测试，将不会输出任何内容。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Mono.empty()</span><br><span class="line">            .flatMap(e -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;这是一个空&quot;</span>); <span class="comment">//1</span></span><br><span class="line">                <span class="keyword">return</span> Mono.empty();</span><br><span class="line">            &#125;)</span><br><span class="line">            .flatMap(e -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (e == <span class="keyword">null</span>) &#123; <span class="comment">//2</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;内容为空&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> Mono.empty();</span><br><span class="line">            &#125;)</span><br><span class="line">            .then();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</blockquote>
<h2 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h2><p>网关除了做统一鉴权之外，还有一个重要的功能就是做限流。Spring Cloud Gateway已经为我们预置了限流的GatewayFilterFactory <code>org.springframework.cloud.gateway.filter.factory.RequestRateLimiterGatewayFilterFactory</code>。</p>
<p>源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// org.springframework.cloud.gateway.filter.factory.RequestRateLimiterGatewayFilterFactory</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties(&quot;spring.cloud.gateway.filter.request-rate-limiter&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestRateLimiterGatewayFilterFactory</span></span></span><br><span class="line"><span class="class">		<span class="keyword">extends</span> <span class="title">AbstractGatewayFilterFactory</span>&lt;<span class="title">RequestRateLimiterGatewayFilterFactory</span>.<span class="title">Config</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">	<span class="comment">// getter and setter</span></span><br><span class="line"></span><br><span class="line">	<span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> GatewayFilter <span class="title">apply</span><span class="params">(Config config)</span> </span>&#123;</span><br><span class="line">		KeyResolver resolver = getOrDefault(config.keyResolver, defaultKeyResolver);</span><br><span class="line">		RateLimiter&lt;Object&gt; limiter = getOrDefault(config.rateLimiter, defaultRateLimiter);</span><br><span class="line">		<span class="keyword">boolean</span> denyEmpty = getOrDefault(config.denyEmptyKey, <span class="keyword">this</span>.denyEmptyKey);</span><br><span class="line">		HttpStatusHolder emptyKeyStatus = HttpStatusHolder</span><br><span class="line">				.parse(getOrDefault(config.emptyKeyStatus, <span class="keyword">this</span>.emptyKeyStatusCode));</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> (exchange, chain) -&gt; resolver.resolve(exchange).defaultIfEmpty(EMPTY_KEY).flatMap(key -&gt; &#123;</span><br><span class="line">			<span class="keyword">if</span> (EMPTY_KEY.equals(key)) &#123;</span><br><span class="line">				<span class="keyword">if</span> (denyEmpty) &#123;</span><br><span class="line">					setResponseStatus(exchange, emptyKeyStatus);</span><br><span class="line">					<span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">			&#125;</span><br><span class="line">			String routeId = config.getRouteId();</span><br><span class="line">			<span class="keyword">if</span> (routeId == <span class="keyword">null</span>) &#123;</span><br><span class="line">				Route route = exchange.getAttribute(ServerWebExchangeUtils.GATEWAY_ROUTE_ATTR);</span><br><span class="line">				routeId = route.getId();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> limiter.isAllowed(routeId, key).flatMap(response -&gt; &#123;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">for</span> (Map.Entry&lt;String, String&gt; header : response.getHeaders().entrySet()) &#123;</span><br><span class="line">					exchange.getResponse().getHeaders().add(header.getKey(), header.getValue());</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (response.isAllowed()) &#123;</span><br><span class="line">					<span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				setResponseStatus(exchange, config.getStatusCode());</span><br><span class="line">				<span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">			&#125;);</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> &lt;T&gt; <span class="function">T <span class="title">getOrDefault</span><span class="params">(T configValue, T defaultValue)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (configValue != <span class="keyword">null</span>) ? configValue : defaultValue;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> <span class="keyword">implements</span> <span class="title">HasRouteId</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">private</span> KeyResolver keyResolver;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">private</span> RateLimiter rateLimiter;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">private</span> HttpStatus statusCode = HttpStatus.TOO_MANY_REQUESTS;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">private</span> Boolean denyEmptyKey;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">private</span> String emptyKeyStatus;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">private</span> String routeId;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// getter and setter</span></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从源码中我们可以看出，我们需要配置自己的 <code>org.springframework.cloud.gateway.filter.ratelimit.KeyResolver</code> 、<code>org.springframework.cloud.gateway.filter.ratelimit.RateLimiter</code>，同时，当限流后，返回的状态默认为 <code>HttpStatus.TOO_MANY_REQUESTS</code>。</p>
<h3 id="KeyResolver配置"><a href="#KeyResolver配置" class="headerlink" title="KeyResolver配置"></a>KeyResolver配置</h3><p>Spring Cloud Gateway已经预置了一个默认的 KeyResolver <code>org.springframework.cloud.gateway.filter.ratelimit.PrincipalNameKeyResolver</code>，源码如下： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// org.springframework.cloud.gateway.filter.ratelimit.PrincipalNameKeyResolver</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrincipalNameKeyResolver</span> <span class="keyword">implements</span> <span class="title">KeyResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * &#123;<span class="doctag">@link</span> PrincipalNameKeyResolver&#125; bean name.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BEAN_NAME = <span class="string">&quot;principalNameKeyResolver&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Mono&lt;String&gt; <span class="title">resolve</span><span class="params">(ServerWebExchange exchange)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> exchange.getPrincipal().flatMap(p -&gt; Mono.justOrEmpty(p.getName()));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自定义KeyResolver: 我们需要提供一个自己的KeyResolver，里面的统计维度根据我们自己的业务进行自定义。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 限流自定义</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestRateLimiterConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function">KeyResolver <span class="title">apiKeyResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//按URL限流</span></span><br><span class="line">        <span class="keyword">return</span> exchange -&gt; Mono.just(exchange.getRequest().getPath().toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">KeyResolver <span class="title">userKeyResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//按用户限流</span></span><br><span class="line">        <span class="keyword">return</span> exchange -&gt; Mono.just( Optional.ofNullable(exchange.getRequest().getHeaders().get(<span class="string">&quot;Authorization&quot;</span>)).map(e -&gt; e.get(<span class="number">0</span>)).orElse(<span class="string">&quot;none&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">KeyResolver <span class="title">ipKeyResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//按IP来限流</span></span><br><span class="line">        <span class="keyword">return</span> exchange -&gt; Mono.just(exchange.getRequest().getRemoteAddress().getHostName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="RateLimiter配置"><a href="#RateLimiter配置" class="headerlink" title="RateLimiter配置"></a>RateLimiter配置</h3><p>Spring Cloud Gateway已经为我们预置了默认的RateLimiter，采用了redis来进行统计，通过 <code>令牌桶</code> 的算法来实现。因此，我们必须引用 <code>spring-boot-starter-data-redis-reactive</code>。</p>
<blockquote>
<p>TIP：</p>
<p>常用的限流实现算法有 <code>漏桶算法</code>， <code>令牌桶算法</code>， <code>滑动时间窗口算法</code>。如果大家有兴趣可以去看一下具体的实现。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// org.springframework.cloud.gateway.filter.ratelimit.RedisRateLimiter</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties(&quot;spring.cloud.gateway.redis-rate-limiter&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisRateLimiter</span> <span class="keyword">extends</span> <span class="title">AbstractRateLimiter</span>&lt;<span class="title">RedisRateLimiter</span>.<span class="title">Config</span>&gt; <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">static</span> List&lt;String&gt; <span class="title">getKeys</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// use `&#123;&#125;` around keys to use Redis Key hash tags</span></span><br><span class="line">		<span class="comment">// this allows for using redis cluster</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// Make a unique key per user.</span></span><br><span class="line">		String prefix = <span class="string">&quot;request_rate_limiter.&#123;&quot;</span> + id;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// You need two Redis keys for Token Bucket.</span></span><br><span class="line">		String tokenKey = prefix + <span class="string">&quot;&#125;.tokens&quot;</span>;</span><br><span class="line">		String timestampKey = prefix + <span class="string">&quot;&#125;.timestamp&quot;</span>;</span><br><span class="line">		<span class="keyword">return</span> Arrays.asList(tokenKey, timestampKey);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// getter and setter</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Used when setting default configuration in constructor.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> context the ApplicationContext object to be used by this object</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> BeansException if thrown by application context methods</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext context)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (initialized.compareAndSet(<span class="keyword">false</span>, <span class="keyword">true</span>)) &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.redisTemplate == <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">this</span>.redisTemplate = context.getBean(ReactiveStringRedisTemplate.class);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">this</span>.script = context.getBean(REDIS_SCRIPT_NAME, RedisScript.class);</span><br><span class="line">			<span class="keyword">if</span> (context.getBeanNamesForType(ConfigurationService.class).length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">				setConfigurationService(context.getBean(ConfigurationService.class));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* for testing */</span> <span class="function">Config <span class="title">getDefaultConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> defaultConfig;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * This uses a basic token bucket algorithm and relies on the fact that Redis scripts</span></span><br><span class="line"><span class="comment">	 * execute atomically. No other operations can run between fetching the count and</span></span><br><span class="line"><span class="comment">	 * writing the new count.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Mono&lt;Response&gt; <span class="title">isAllowed</span><span class="params">(String routeId, String id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!<span class="keyword">this</span>.initialized.get()) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;RedisRateLimiter is not initialized&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		Config routeConfig = loadConfiguration(routeId);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// How many requests per second do you want a user to be allowed to do?</span></span><br><span class="line">		<span class="keyword">int</span> replenishRate = routeConfig.getReplenishRate();</span><br><span class="line"></span><br><span class="line">		<span class="comment">// How much bursting do you want to allow?</span></span><br><span class="line">		<span class="keyword">int</span> burstCapacity = routeConfig.getBurstCapacity();</span><br><span class="line"></span><br><span class="line">		<span class="comment">// How many tokens are requested per request?</span></span><br><span class="line">		<span class="keyword">int</span> requestedTokens = routeConfig.getRequestedTokens();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			List&lt;String&gt; keys = getKeys(id);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// The arguments to the LUA script. time() returns unixtime in seconds.</span></span><br><span class="line">			List&lt;String&gt; scriptArgs = Arrays.asList(replenishRate + <span class="string">&quot;&quot;</span>, burstCapacity + <span class="string">&quot;&quot;</span>,</span><br><span class="line">					Instant.now().getEpochSecond() + <span class="string">&quot;&quot;</span>, requestedTokens + <span class="string">&quot;&quot;</span>);</span><br><span class="line">			<span class="comment">// allowed, tokens_left = redis.eval(SCRIPT, keys, args)</span></span><br><span class="line">			Flux&lt;List&lt;Long&gt;&gt; flux = <span class="keyword">this</span>.redisTemplate.execute(<span class="keyword">this</span>.script, keys, scriptArgs);</span><br><span class="line">			<span class="comment">// .log(&quot;redisratelimiter&quot;, Level.FINER);</span></span><br><span class="line">			<span class="keyword">return</span> flux.onErrorResume(throwable -&gt; &#123;</span><br><span class="line">				<span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">					log.debug(<span class="string">&quot;Error calling rate limiter lua&quot;</span>, throwable);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">return</span> Flux.just(Arrays.asList(<span class="number">1L</span>, -<span class="number">1L</span>));</span><br><span class="line">			&#125;).reduce(<span class="keyword">new</span> ArrayList&lt;Long&gt;(), (longs, l) -&gt; &#123;</span><br><span class="line">				longs.addAll(l);</span><br><span class="line">				<span class="keyword">return</span> longs;</span><br><span class="line">			&#125;).map(results -&gt; &#123;</span><br><span class="line">				<span class="keyword">boolean</span> allowed = results.get(<span class="number">0</span>) == <span class="number">1L</span>;</span><br><span class="line">				Long tokensLeft = results.get(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">				Response response = <span class="keyword">new</span> Response(allowed, getHeaders(routeConfig, tokensLeft));</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">					log.debug(<span class="string">&quot;response: &quot;</span> + response);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">return</span> response;</span><br><span class="line">			&#125;);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			<span class="comment">/*</span></span><br><span class="line"><span class="comment">			 * We don&#x27;t want a hard dependency on Redis to allow traffic. Make sure to set</span></span><br><span class="line"><span class="comment">			 * an alert so you know if this is happening too much. Stripe&#x27;s observed</span></span><br><span class="line"><span class="comment">			 * failure rate is 0.01%.</span></span><br><span class="line"><span class="comment">			 */</span></span><br><span class="line">			log.error(<span class="string">&quot;Error determining if user allowed from redis&quot;</span>, e);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> Mono.just(<span class="keyword">new</span> Response(<span class="keyword">true</span>, getHeaders(routeConfig, -<span class="number">1L</span>)));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* for testing */</span> <span class="function">Config <span class="title">loadConfiguration</span><span class="params">(String routeId)</span> </span>&#123;</span><br><span class="line">		Config routeConfig = getConfig().getOrDefault(routeId, defaultConfig);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (routeConfig == <span class="keyword">null</span>) &#123;</span><br><span class="line">			routeConfig = getConfig().get(RouteDefinitionRouteLocator.DEFAULT_FILTERS);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (routeConfig == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;No Configuration found for route &quot;</span> + routeId + <span class="string">&quot; or defaultFilters&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> routeConfig;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Validated</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Min(1)</span></span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">int</span> replenishRate;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Min(0)</span></span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">int</span> burstCapacity = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Min(1)</span></span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">int</span> requestedTokens = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// getter and setter</span></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从上面的源码中，我们可以看出如下的几个信息：Spring Cloud RedisRateLimiter采用 <code>令牌桶</code> 算法实现，默认桶包含令牌数为1，每次请求需要令牌数为1。存储在 redis 中的键为 <code>request_rate_limiter.&#123;xxx&#125;.timestamp</code>、<code>request_rate_limiter.&#123;xxx&#125;.tokens</code>，其中的 <code>xxx</code> 为我们自定义中 <code>KeyResolver</code> 返回的值。</p>
<h3 id="yaml配置-1"><a href="#yaml配置-1" class="headerlink" title="yaml配置"></a>yaml配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-cloud-gateway-sample</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">sample</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://xxx.com</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/a/**,/b/**,/c/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RequestRateLimiter</span></span><br><span class="line">            <span class="attr">args:</span></span><br><span class="line">              <span class="attr">key-resolver:</span> <span class="string">&#x27;#&#123;@apiKeyResolver&#125;&#x27;</span></span><br><span class="line">            <span class="comment">#   rate-limiter: &#x27;#&#123;@myRateLimiter&#125;&#x27;</span></span><br><span class="line">              <span class="attr">redis-rate-limiter.replenishRate:</span> <span class="number">10</span></span><br><span class="line">              <span class="attr">redis-rate-limiter.burstCapacity:</span> <span class="number">20</span></span><br><span class="line">              <span class="attr">redis-rate-limiter.requestedTokens:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>key-resolver：用于限流的键的解析器的 Bean 对象的名字。它使用 SpEL 表达式根据#{@beanName}从 Spring 容器中获取 Bean 对象。</li>
<li>rate-limiter：限流逻辑实现。</li>
<li>redis-rate-limiter.replenishRate：每秒钟产生令牌的数量</li>
<li>redis-rate-limiter.burstCapacity：令牌桶的容量，允许在一秒钟内完成的最大请求数</li>
<li>redis-rate-limiter.requestedTokens: 每次请求需要的令牌数量</li>
</ul>
<h3 id="FilterDefinition配置"><a href="#FilterDefinition配置" class="headerlink" title="FilterDefinition配置"></a>FilterDefinition配置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FilterDefinition rateLimiterFilterDefinition = <span class="keyword">new</span> FilterDefinition(<span class="string">&quot;RequestRateLimiter&quot;</span>);</span><br><span class="line">rateLimiterFilterDefinition.getArgs().put(<span class="string">&quot;key-resolver&quot;</span>, <span class="string">&quot;#&#123;@customKeyResolver&#125;&quot;</span>);</span><br><span class="line">rateLimiterFilterDefinition.getArgs().put(<span class="string">&quot;redis-rate-limiter.replenishRate&quot;</span>, <span class="string">&quot;1000&quot;</span>);</span><br><span class="line">rateLimiterFilterDefinition.getArgs().put(<span class="string">&quot;redis-rate-limiter.burstCapacity&quot;</span>, <span class="string">&quot;5000&quot;</span>); <span class="comment">//5000 Qps</span></span><br><span class="line">routeDefinition.getFilters().add(rateLimiterFilterDefinition);</span><br></pre></td></tr></table></figure>

<h2 id="熔断"><a href="#熔断" class="headerlink" title="熔断"></a>熔断</h2><p>作为一个成熟的网关，熔断的能力必不可少。在分布式系统中，网关作为流量的入口，大量请求进入网关，向后端远程系统或服务发起调用，后端服务不可避免的会产生调用失败（超时或者异常），失败时不能让请求堆积在网关上，需要快速失败并返回回去，这就需要在网关上做熔断、降级操作。 Spring Cloud CircuitBreaker支持以下四种实现：<code>Netfix Hystrix</code>, <code>Resilience4J</code>, <code>Sentinel</code>, <code>Spring Retry</code>。</p>
<ul>
<li><a href="https://github.com/Netflix/Hystrix" title="Netfix Hystrix">Netfix Hystrix</a></li>
<li><a href="https://github.com/resilience4j/resilience4j" title="Resilience4J">Resilience4J</a></li>
<li><a href="https://github.com/alibaba/Sentinel" title="Sentinel">Sentinel</a></li>
<li><a href="https://github.com/spring-projects/spring-retry" title="Spring Retry">Spring Retry</a></li>
</ul>
<p>由于在新版本中，Spring Cloud已经移出了<code>spring-cloud-starter-netflix-hystrix</code>，因此不建议在使用 <code>netflix-hystrix</code>来做熔断。在新的版本中，Spring Cloud增加了<code>org.springframework.cloud.gateway.filter.factory.SpringCloudCircuitBreakerFilterFactory</code>来做熔断，我们可以继承它来实现自己的熔断规则，同时Srping Cloud也提供了<code>org.springframework.cloud.gateway.filter.factory.SpringCloudCircuitBreakerResilience4JFilterFactory</code>。</p>
<p>参考地址：<br><a href="https://cloud.spring.io/spring-cloud-circuitbreaker/reference/html/index.html#configuring-resilience4j-circuit-breakers" title="spring-cloud-circuitbreaker">spring-cloud-circuitbreaker</a></p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>Spring Cloud Gateway熔断支持 <code>netflix-hystrix</code> 与 <code>Resilience4J</code>。增加依赖如下： </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- netflix hystrix --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- resilience4j reactive --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-circuitbreaker-reactor-resilience4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- resilience4j non-reactive --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-circuitbreaker-resilience4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2022/03/28/scg1/006.jpg" alt="resilience4j" title="resilience4j"> </p>
<p><a href="https://resilience4j.readme.io/docs/circuitbreaker" title="Resilience4j CircuitBreaker">Resilience4j CircuitBreaker</a></p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>yaml配置如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">resilience4j:</span></span><br><span class="line">  <span class="attr">circuitbreaker:</span></span><br><span class="line">    <span class="attr">configs:</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="attr">failureRateThreshold:</span> <span class="number">50</span> <span class="comment">#失败阀值百分比</span></span><br><span class="line">        <span class="attr">minimumNumberOfCalls:</span> <span class="number">10</span> <span class="comment">#最小次数开始统计</span></span><br><span class="line">        <span class="attr">permittedNumberOfCallsInHalfOpenState:</span> <span class="number">100</span> <span class="comment">#在半打开状态下允许的请求</span></span><br><span class="line">        <span class="attr">automaticTransitionFromOpenToHalfOpenEnabled:</span> <span class="literal">true</span> <span class="comment">#自动由打开状态转化到半打开状态</span></span><br><span class="line">        <span class="attr">slidingWindowType:</span> <span class="string">TIME_BASED</span> <span class="comment">#时间窗口</span></span><br><span class="line">        <span class="attr">slidingWindowSize:</span> <span class="number">60</span> <span class="comment">#时间窗口大小</span></span><br><span class="line">  <span class="attr">timelimiter:</span></span><br><span class="line">    <span class="attr">configs:</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="attr">timeoutDuration:</span> <span class="string">10s</span> <span class="comment">#超时时间</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示：</p>
<p>具体的详细配置，可以查看源码 <code>io.github.resilience4j.circuitbreaker.autoconfigure.CircuitBreakerProperties</code>, <code>io.github.resilience4j.circuitbreaker.configure.CircuitBreakerConfigurationProperties</code>。</p>
<p><a href="https://resilience4j.readme.io/docs/circuitbreaker" title="Resilience4j CircuitBreaker">Resilience4j CircuitBreaker</a></p>
</blockquote>
<p>路由信息配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FilterDefinition circuitBreakerFilterDefinition = <span class="keyword">new</span> FilterDefinition(<span class="string">&quot;CircuitBreaker&quot;</span>);</span><br><span class="line">circuitBreakerFilterDefinition.getArgs().put(<span class="string">&quot;fallbackUri&quot;</span>, <span class="string">&quot;forward:/xxx/xxx/xxx&quot;</span>);</span><br><span class="line">filterDefinitionList.add(circuitBreakerFilterDefinition);</span><br></pre></td></tr></table></figure>

<p><code>resilience4j</code>提供了丰富的功能，包括<code>circuitbreaker</code>、<code>ratelimiter</code>、<code>timelimiter</code>、<code>retry</code>、<code>buikhead</code>、<code>fallback</code>等，它们的加顺序大体是一致的，我们以<code>circuitbreaker</code>为例，简单说一下<code>resilience4j</code>在<code>scg</code>中的加载顺序：</p>
<ol>
<li>首先会根据<code>io.github.resilience4j.circuitbreaker.autoconfigure.CircuitBreakerAutoConfiguration</code>进行自动配置</li>
<li>spring boot把配置封装在了自己的封装类中<code>io.github.resilience4j.circuitbreaker.autoconfigure.CircuitBreakerProperties</code>，采用前缀<code>resilience4j.circuitbreaker</code></li>
<li>在<code>CircuitBreakerAutoConfiguration</code>引入<code>io.github.resilience4j.circuitbreaker.autoconfigure.CircuitBreakerConfigurationOnMissingBean</code>进行配置</li>
<li>在<code>CircuitBreakerConfigurationOnMissingBean</code>中引入<code>io.github.resilience4j.circuitbreaker.autoconfigure.AbstractCircuitBreakerConfigurationOnMissingBean</code></li>
<li>在<code>AbstractCircuitBreakerConfigurationOnMissingBean</code>引入<code>io.github.resilience4j.circuitbreaker.configure.CircuitBreakerConfiguration</code></li>
<li>在<code>CircuitBreakerConfiguration</code>调用<code>circuitBreakerRegistry</code>进行注册</li>
<li>调用<code>io.github.resilience4j.common.circuitbreaker.configuration.CircuitBreakerConfigurationProperties#createCircuitBreakerConfig</code></li>
<li>调用<code>io.github.resilience4j.common.circuitbreaker.configuration.CircuitBreakerConfigurationProperties#buildConfig</code></li>
<li>最后生成的<code>config</code>实例<code>io.github.resilience4j.circuitbreaker.CircuitBreakerConfig</code></li>
<li>最后<code>io.github.resilience4j.circuitbreaker.CircuitBreakerRegistry</code>根据名称与<code>CircuitBreakerConfig</code>调用方法<code>circuitBreaker</code>生成具体的<code>io.github.resilience4j.circuitbreaker.CircuitBreaker</code>实例</li>
</ol>
<h2 id="统一错误处理"><a href="#统一错误处理" class="headerlink" title="统一错误处理"></a>统一错误处理</h2><p>网关作为面向用户统一接入层，时常需要进行统一的错误处理。在平时我们的web项目中，我们可以使用<code>org.springframework.web.bind.annotation.ControllerAdvice</code>配合<code>org.springframework.web.bind.annotation.ExceptionHandler</code>来完成全局错误统一处理。在Spring Cloud Gateway中，框架默认采用 <code>org.springframework.boot.autoconfigure.web.reactive.error.DefaultErrorWebExceptionHandler</code>来进行异常处理并返回。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// org.springframework.boot.autoconfigure.web.reactive.error.DefaultErrorWebExceptionHandler</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultErrorWebExceptionHandler</span> <span class="keyword">extends</span> <span class="title">AbstractErrorWebExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">DefaultErrorWebExceptionHandler</span><span class="params">(ErrorAttributes errorAttributes, Resources resources,</span></span></span><br><span class="line"><span class="params"><span class="function">			ErrorProperties errorProperties, ApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(errorAttributes, resources, applicationContext);</span><br><span class="line">		<span class="keyword">this</span>.errorProperties = errorProperties;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> RouterFunction&lt;ServerResponse&gt; <span class="title">getRoutingFunction</span><span class="params">(ErrorAttributes errorAttributes)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> route(acceptsTextHtml(), <span class="keyword">this</span>::renderErrorView).andRoute(all(), <span class="keyword">this</span>::renderErrorResponse);</span><br><span class="line">	&#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Mono&lt;ServerResponse&gt; <span class="title">renderErrorView</span><span class="params">(ServerRequest request)</span> </span>&#123;</span><br><span class="line">		Map&lt;String, Object&gt; error = getErrorAttributes(request, getErrorAttributeOptions(request, MediaType.TEXT_HTML));</span><br><span class="line">		<span class="keyword">int</span> errorStatus = getHttpStatus(error);</span><br><span class="line">		ServerResponse.BodyBuilder responseBody = ServerResponse.status(errorStatus).contentType(TEXT_HTML_UTF8);</span><br><span class="line">		<span class="keyword">return</span> Flux.just(getData(errorStatus).toArray(<span class="keyword">new</span> String[] &#123;&#125;))</span><br><span class="line">				.flatMap((viewName) -&gt; renderErrorView(viewName, responseBody, error))</span><br><span class="line">				.switchIfEmpty(<span class="keyword">this</span>.errorProperties.getWhitelabel().isEnabled()</span><br><span class="line">						? renderDefaultErrorView(responseBody, error) : Mono.error(getError(request)))</span><br><span class="line">				.next();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Mono&lt;ServerResponse&gt; <span class="title">renderErrorResponse</span><span class="params">(ServerRequest request)</span> </span>&#123;</span><br><span class="line">		Map&lt;String, Object&gt; error = getErrorAttributes(request, getErrorAttributeOptions(request, MediaType.ALL));</span><br><span class="line">		<span class="keyword">return</span> ServerResponse.status(getHttpStatus(error)).contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">				.body(BodyInserters.fromValue(error));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;    </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在<code>DefaultErrorWebExceptionHandler</code>中，最重要的方法是<code>protected RouterFunction&lt;ServerResponse&gt; getRoutingFunction(ErrorAttributes errorAttributes)</code>。从源码中我们可以看出，当如果是html时，Spring Cloud Gateway会返回页面，否则会返回JSON。 </p>
<p><img src="/2022/03/28/scg1/007.png" alt="Text/Html" title="Text/Html"> </p>
<p><img src="/2022/03/28/scg1/008.png" alt="Application/Json" title="Application/Json"> </p>
<p>我们可以自定义我们自己的<code>ErrorWebExceptionHandler</code>，只需要我们实现<code>getRoutingFunction</code>即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomErrorWebExceptionHandler</span> <span class="keyword">extends</span> <span class="title">AbstractErrorWebExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> RouterFunction&lt;ServerResponse&gt; <span class="title">getRoutingFunction</span><span class="params">(ErrorAttributes errorAttributes)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> route(all(), <span class="keyword">this</span>::renderErrorResponse); <span class="comment">//统一JSON返回</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Render the error information as a JSON payload.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> request the current request</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> a &#123;<span class="doctag">@code</span> Publisher&#125; of the HTTP response</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> Mono&lt;ServerResponse&gt; <span class="title">renderErrorResponse</span><span class="params">(ServerRequest request)</span> </span>&#123;</span><br><span class="line">		Map&lt;String, Object&gt; error = getErrorAttributes(request, getErrorAttributeOptions(request, MediaType.ALL));</span><br><span class="line">		<span class="keyword">return</span> ServerResponse.status(getHttpStatus(error)).contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">				.body(BodyInserters.fromValue(error));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过源码我们可以发现，当请求发生错误的时候，Spring Cloud Gateway的返回内容是通过<code>protected Map&lt;String, Object&gt; getErrorAttributes(ServerRequest request, ErrorAttributeOptions options)</code> 从 <code>ErrorAttributes</code>里面获取的，我们可以实现我们自己的 <code>ErrorAttributes</code> 来达到统一错误返回。Spring Boot已经给我们定义了默认的<code>org.springframework.boot.web.reactive.error.DefaultErrorAttributes</code>与<code>org.springframework.boot.web.servlet.error.DefaultErrorAttributes</code>，前者采用 <code>WebFlux</code>，后者采用 <code>WebMvc</code>。</p>
<p>自定义ErrorAttributes</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomErrorAttributes</span> <span class="keyword">implements</span> <span class="title">ErrorAttributes</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(ServerRequest request, ErrorAttributeOptions options)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; errorAttributes = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 自定义</span></span><br><span class="line">		errorAttributes.put(<span class="string">&quot;status&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">		errorAttributes.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">		errorAttributes.put(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> errorAttributes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Throwable <span class="title">getError</span><span class="params">(ServerRequest request)</span> </span>&#123;</span><br><span class="line">        Optional&lt;Object&gt; error = request.attribute(ERROR_INTERNAL_ATTRIBUTE);</span><br><span class="line">        error.ifPresent((value) -&gt; request.attributes().putIfAbsent(ErrorAttributes.ERROR_ATTRIBUTE, value));</span><br><span class="line">        <span class="keyword">return</span> (Throwable) error</span><br><span class="line">                .orElseThrow(() -&gt; <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Missing exception attribute in ServerWebExchange&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">storeErrorInformation</span><span class="params">(Throwable error, ServerWebExchange exchange)</span> </span>&#123;</span><br><span class="line">        exchange.getAttributes().putIfAbsent(ERROR_INTERNAL_ATTRIBUTE, error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>Spring Cloud Gateway是一个非常不错的项目，在Java的语言世界中占有举足轻重的地位。本文只是简单介绍了一些基本的应用，还有很多其它的内容我们可以通过阅读源码去了解，比如 <code>RouteDefinitionRepository#getRouteDefinitions</code> 方法是什么时候去调用的，<code>org.springframework.cloud.gateway.route.RouteDefinition</code>是怎么样转变化<code>org.springframework.cloud.gateway.route.Route</code>的，<code>RefreshRoutesEvent</code>是什么时候去触发的，一个请求进入网关后是怎么流转的…</p>
]]></content>
      <categories>
        <category>java</category>
        <category>spring</category>
        <category>spring cloud</category>
        <category>spring cloud gateway</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>spring</tag>
        <tag>spring cloud</tag>
        <tag>spring cloud gateway</tag>
        <tag>网关组件</tag>
      </tags>
  </entry>
</search>
